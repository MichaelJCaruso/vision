<!DOCTYPE html>
<html>
<head>
<title>Vision Portfolio Management Application Issues</title>
</head>
<body bgcolor=white>
<h2>Vision Portfolio Management Application Issues</h2>

<p>
| <a href="vpma.htm">Application Overview</a> 
| <a href="pmaXRef.htm">Application Cross Reference</a>
|
<hr>
<h3>Topics Covered:</h3>
<ul type=square>
<li><a href="#overview">Overview</a>
<li><a href="#splits">Split Adjustments</a>
<li><a href="#prices">Prices</a>
<li><a href="#divs">Dividends</a>
<li><a href="#ids">Security and Company Identification</a>
<li><a href="#holdings">Holdings</a>
</ul>
<p>
<hr>
<h3><a name="overview">Overview</a></h3>
<p>
Special structures have been designed to manage dividend,
price, and adjustment data in the Vision database.
These structures have been created to correctly handle split and
currency adjustments
automatically.  In addition, these structures have been designed
to facilitate future reorganizations as the database grows, so that 
applications that use this data are sheltered from structural changes.
<p>
Many items defined for a security are affected by stock splits
including price, shares outstanding, and dividends per share.
By default, data is returned split adjusted relative to the current
date.
In general, message names that begin with the character '_' indicate
the "raw", unadjusted data value in its initial units.  For example,
the property <i>_sharesOut</i> defined at <b>Security</b> refers to the
actual shares outstanding value as of a specific date.  The message
<i>sharesOut</i> returns this value adjusted for any splits that have
occurred since that date.

<p>
<hr>
<h3><a name="splits">Split Adjustments</a></h3>
<p>

All per share and shares outstanding data in Vision is implicitly
adjusted through some date.  To analyze per share data as of any date
other than this implicit date, it is necessary to account for any
splits that have occurred between this date and the analysis date.
Two viable approaches are available.  One alternative is to actually
change the values of existing data to reflect any splits that have
occurred.  Alternatively, stored data can always remain in its <b>raw</b>,
unadjusted form and an <b>adjustment factor</b> reflecting any splits that
have occurred can be applied to this data.  The advantage of this
approach is that data values are never changed directly, greatly
simplifying the magnitude of work that needs to be done when a split
does occur.  In addition, if a split is incorrectly introduced, it is
much easier and more reliable to just modify a single adjustment
factor than it is to unadjust and re-adjust all of the data that was
incorrectly adjusted.  Because of the data integrity problems that
can arise with the former approach, the Vision database uses the
adjustment factor approach in its handling of splits.  
<p>
To adjust per share data it is necessary to know what splits have
occurred between the date the data is known to be adjusted through
(adjustment date) and the current date.  To accomplish this, Vision
tracks splits for each security in a time series called
<i>rawSplitFactor</i>.  The actual factors are stored in this time series
as of their ex-date.  For example, if a 2-for-1 split in XYZ
Corporation occurred on January 15, 1997, the value 2 would be stored
in XYZ's <i>rawSplitFactor</i> as of this date.  If XYZ's earnings per share
on December 31, 1996 is 10 then the adjusted value of <i>eps</i> on or after
January 15 is 5 (i.e., 10 / 2 ).  If a 3-for-1 split occurred on
March 15, then the value 3 would be stored in XYZ's <i>rawSplitFactor</i> as
of this date and XYZ's adjusted value of <i>eps</i> on or after March 15
would be 1.67 ( i.e., 10 / 2 / 3 ).  
<p>
Vision tracks a second time series called <i>adjustmentFactor</i> that
represents the running product of these raw factors.  This variable has
an initial value of 1.  Each time a split occurs, a new point
representing the product of the new raw factor and the last
adjustment factor is stored in the adjustment factor as of the
ex-date.  The data from the previous example is illustrated below:<pre><tt><b>
                          0       1/15/97     3/15/97
<hr width="40%" align=center>
     rawSplitFactor                  2          3
     adjustmentFactor     1          2          6
</b></tt></pre>
<p>
To properly use the adjustment factor data, you actually need to
access values as of the two dates involved, the adjustment
date and the current date.  The ratio of these factors gives you
the correct adjustment.  Therefore the correct way to adjust per share
data that has been adjusted through December 31 for analysis on May
31 is:<pre><tt><b>
     adjustment factor ratio =   adjustment factor on May 31     =  6
                              --------------------------------     ---
                              adjustment factor on December 31      1

      per share
    adjusted value =         unadjusted value / adjustment factor ratio

    XYZ's adjusted eps =        10  / 6   =  1.67
</b></tt></pre>
<p>
The correct way to adjust share outstanding values is to multiply
the unadjusted value by the adjustment factor ratio.
<p>
The message <i>adjustmentRelativeTo: </i> is used to access the 
current adjustment
factor relative to the date that your data item is known to be
adjusted through.  If you know that XYZ's <i>eps</i> is adjusted through
January 31, then the expression:<pre><tt><b>
     Named Security XYZ adjustmentRelativeTo: 9701
</b></tt></pre>
accesses the value needed to adjust the <i>eps</i> value relative to the
current analysis date.  To adjust the <i>eps</i>, divide the unadjusted
value by this adjustment value:<pre><tt><b>
     Named Security XYZ send: [ _eps  / # unadjusted
                                (^self adjustmentRelativeTo: 9701)
                             ] 
</b></tt></pre>
The previous example assumes that you know the exact date the data
has been adjusted through.  You may not always know this explicitly;
however, many data items are adjusted as of the date they become
effective (i.e., the "as of" date).
In this case, the following methodology can be used to access
the adjusted value:<pre><tt><b>
     Named Security XYZ getAdjustedDataFor: Named Security XYZ :_eps
</b></tt></pre>
<p>
In general, methods have been created that automatically return
adjusted values by default.  For example, the 
<a href="#prices">pricing</a> and <a href="#divs">dividend</a>
data described later in this section are adjusted by default.  The
message <i>_price</i> is defined to return a <b>PriceRecord's</b> unadjusted
price (i.e., the original value) and the message <i>price</i> is defined
to return a <b>PriceRecord's</b> adjusted price.  The message <i>sharesOut</i>
is defined at <b>Security</b> to return the split-adjusted value of the
<i>_sharesOut</i> property.
<p>
Different data sources have different rules for determining the
adjustment date of the data. 
To address the varying requirements, the message <i>adjustmentFactor</i>
is normally defined as needed for each class that manages data that
can be adjusted.
<p>
The message
<i>addSplitFactorOf: onExDate:</i> is used to add a new  split factor
for a security.  This message
stores the value of the factor into <i>rawSplitFactor</i> as of the ex-date
provided.  The new value of <i>adjustmentFactor</i> is then computed and
stored on this date as well.
For example, if XYZ has a 2-for-1 split on April 15, 1997 the
procedure to add this factor is:<pre><tt><b>
     Named Security XYZ addSplitFactorOf: 2 onExDate: 970415 asDate
</b></tt></pre>
Raw split information is normally updated during the nightly
production cycle.  It should never be necessary to use this message
directly; however, it can be used to update splits that have not
been included in the daily updates or to correct problems during your
session.  If you insert new dates into the time series, you should
also execute the message <i>rebuildAdjustmentFactor</i> to recompute all
the adjustment factors for the security.

<p>
<hr>
<h3><a name="prices">Prices</a></h3>
<p>

The message <i>price</i> returns the split-adjusted, currency-adjusted
price for a specific security.  The price is
accessed as of the current date by default.  The value is split adjusted
through the current date and is in the base currency of the security by
default.  For example:  <pre><tt><b>
     Named Security XYZ price
</b></tt></pre>
returns XYZ's latest price value in XYZ's base currency,<pre><tt><b>
     Named Security XYZ :price asOf: 9702 .
</b>or<b>
     9702 evaluate: [ Named Security XYZ price ] 
</b></tt></pre>
returns the latest price as of Feb 1997 in the base currency , and<pre><tt><b>
    "CAN" asCurrency evaluate: [ Named Security XYZ  price ]
</b></tt></pre>
returns the latest price in Canadian dollars.  All values
are split-adjusted through the current date.  The message <i>_price</i>
returns the unadjusted price as of the current evaluation date.
<p>
The message <i>priceChangeFrom:to:</i> returns the price percentage change
value between two dates.  For example:<pre><tt><b>
     Named Security XYZ priceChangeFrom: 970201 to: 970331
</b></tt></pre>
returns the percentage change in price between these two dates.
<p>
The actual time series of prices and volumes is stored in the time
series property <i>pricingSeries</i>.  The values in this time series
are instances of the class <b>PriceRecord</b>, which has been created to
store the information needed to fully describe the prices and 
volume for a date.  In
addition to the price and volume values, instances of this class maintain the
currency and date of the price so that proper split and currency
adjustments can happen.  
To access a full price record for a security, use the message
<i>getPriceRecord</i>.  For example, the expression:<pre><tt><b>
     Named Security XYZ getPriceRecord high
</b></tt></pre>
returns the latest high price for security XYZ.
<p>
The following messages are defined for the class <b>PriceRecord</b>:
<p>
<Center><table WIDTH=85% TABLE BORDER="1" CELLSPACING="2" CELLPADDING="2">
<tr><th>Message <th>Description
<tr><td>_price<td>actual closing price value provided
<tr><td>price<td>split/currency adjusted closing price value 
<tr><td>_high<td>actual high value provided
<tr><td>high<td>split/currency adjusted high value
<tr><td>_low<td>actual low value provided
<tr><td>low<td>split/currency adjusted low value
<tr><td>_open<td>actual open value provided
<tr><td>open<td>split/currency adjusted open value
<tr><td>_volume<td>actual volume value provided
<tr><td>volume<td>split adjusted volume value 
<tr><td>recordDate (date)<td>date of price record
<tr><td>adjustmentDate <td>date through which stored price was adjusted
(default is recordDate)
<tr><td>adjustmentFactor <td>split adjustment factor based on adjustmentDate
<tr><td>currencyFactor<td>currency adjustment relative to price date
<tr><td>baseCurrency<td>actual currency of unadjusted price
<tr><td>currency<td>current currency (security's by default)
<tr><td>security <td>actual security instance
</table></Center>
<p>
For example, to display the latest adjusted and unadjusted prices
and volumes XYZ, use:<pre><tt><b>
     Named Security XYZ getPriceRecord
     do: [ recordDate print: 12 ;  
           price print ;           #-- adjusted value
           _price print ;          #-- unadjusted value
           volume print ;          #-- adjusted value
           _volume print ;         #-- unadjusted value
           adjustmentFactor print ;
           currencyFactor print ;
           newLine print ;
         ] ;
</b></tt></pre>
To access a full price record as of a specific date, use 
the expression:<pre><tt><b>
     Named Security XYZ :getPriceRecord asOf: 9711 .
       do: [ price print ; _price print ] ;
</b></tt></pre>
or<pre><tt><b>
     9711 evaluate: 
       [ Named Security XYZ getPriceRecord
             do: [ price print ; _price print ] ;
       ] ;
</b></tt></pre>
Both return the full price record as of Nov 30, 1997 from which you
can access the adjusted and unadjusted prices.
<p>
The method <i>prices</i>
has been defined to return the full time series of prices.  
For example, to display the adjusted and unadjusted prices
and volumes for all points in XYZ's time series
in 1997, you could use:<pre><tt><b>
     Named Security XYZ prices from: 970101 to: 9712 .
     do: [ ^date print: 12 ;       #-- date in time series
           recordDate print: 12 ;  #-- date in record - should match
           price print ;           #-- adjusted value
           _price print ;          #-- unadjusted value
           volume print ;          #-- adjusted value
           _volume print ;         #-- unadjusted value
           adjustmentFactor print ;
           currencyFactor print ;
           newLine print ;
         ] ;
</b></tt></pre>
Note that the <i>prices</i> message returns an actual time series
object so you need not prepend the ":"  to the message name.  
<p>
Prices and volumes are normally updated as part of the daily cycle.  Permanent
corrections to any incorrect data are also made using a
database administration procedure.  If you need to temporarily fix 
a value for your working session, you can use the
<a href="pma_PriceFeed.htm"><b>PriceFeed</b></a> class.

<p>
<h4><a name="upprices">Updating Prices</a></h4>
<p>
Normally you will use the 
<a href="pma_PriceFeed.htm"><b>PriceFeed</b></a> class
to update your pricing data.  This section describes some of the
"behind-the-scenes" protocol that supports the pricing structures.
Note that this material is for the truly curious and is not needed
in order to use or update pricing data.
<p>
To efficiently track daily pricing information for a large universe
of securities, a special set of pricing structures have been defined.
These structures organize pricing into separate objects spaces by
year.  Within a year, a separate physical price store is created for
each quarter.  In addition, a separate object space and store are used
to track end-of-month prices so that month-end prices are physically 
clustered near one another.
<p>
Vision databases that include the Portfolio Management Application Layer
are created with a separate object space to hold prices for eom,
the last 5 years, the current year, and the next two years.
The script
<i>InstallPriceSpaces.inv</i>, located in the <i>/localvision/bootstrap</i>
directory, was used to set up these spaces.
<p>
To create a space for a new year, execute and save the following
code without specifying an object space:<pre><tt><b>
   PriceTools setupYear: YYYYMMDD ;
   Utility updateNetworkWithAnnotation: "Price Space Setup" ;

</b></tt></pre>
This will create a new object space to hold pricing data associated
with the year implied by the full date supplied as a parameter.  You
need to run this for each year separately.
<p>
In addition to creating a new object space, the <i>setupYear:</i>  message
creates four new <b>PriceRecord</b> stores, one for each quarter in the
year.  Each <b>PriceRecord</b> store holds daily prices for one quarter.
The individual <b>PriceRecord</b> stores can be accessed via the time
series property <i>dailyStoreXRef</i> defined at <b>PriceTools</b>.  The dates
in this time series correspond to the first date of the quarter
associated with the store.  To determine the number of instances
in each store use:<pre><tt><b>
     PriceTools :dailyStoreXRef
     do: [ "The store beginning on " print ; ^date print ;
           " contains " print ; ^self instanceList count print ;
           " PriceRecord instances and is stored in object space" print ;
           ^self objectSpace printNL ;
          ] ;

</b></tt></pre>
A separate space and price store have been created to hold all
EOM price records.  Since the number of month-end records is
significantly smaller than the number of daily records, it is
often sufficient to create a single price store for all eom price
records.  This store is created as part of the initial database.
<p>
You can create additional EOM stores if desired by executing and
saving the following code without specifying an object space:<pre><tt><b>
   PriceTools setupEOMFrom: YYYYMMDD ;
   Utility updateNetworkWithAnnotation: "EOM Price Space Setup" ;

</b></tt></pre>
The individual eom <b>PriceRecord</b> stores can be accessed via the time
series property <i>eomStoreXRef</i> defined at <b>PriceTools</b>.  The dates in
this time series correspond to the first date for which eom records
are collected in this store.  To determine the number of instances in
each eom store use:  <pre><tt><b>
     PriceTools :eomStoreXRef
     do: [ "The store beginning on " print ; ^date print ;
           " contains " print ; ^self instanceList count print ;
           " PriceRecord instances and is stored in object space" print ;
           ^self objectSpace printNL ;
          ] ;

</b></tt></pre>
Prices are connected to securities using a two-level time series
structure.  The time series property <i>pricingSeries</i> is defined
at <b>Security</b> to track the pricing data associated with a security
by year.  The time points in <i>pricingSeries</i> represent the
start of each year for which the security has pricing data.  The
value as each point is a time series of the daily price records
for the security for the year.  In other words, the expression:<pre><tt><b>
     Named Security IBM :pricingSeries asOf: 96 .
</b></tt></pre>
returns a time series whose dates represent days in 1996 and whose
values represents IBM's <b>PriceRecord</b> instance for the associated date.
To retrieve and display all price records for IBM in 1996, you can
use the expression:<pre><tt><b>
     Named Security IBM :pricingSeries asOf: 96 .
     do: [ ^date print: 15 ; price printNL ] ;

</b></tt></pre>
The method <i>prices</i> has been defined to collapse this
mutli-level time series into a single flat time series containing all
pricing records for the security.  For example:<pre><tt><b>
     Named Security IBM prices from: 960101 to: 961231 .
     do: [ ^date print: 15 ; price printNL ] ;

</b></tt></pre>
In general, you do not need to have knowledge of this two-level time
series structure.  Unless you are explicitly writing methods that
need to make use of the two-level time series structure, you should
use the <i>prices</i> message to access your data.    
<p>
A number of messages have been defined to encapsulate the price
update process.
The message <i>getOrCreateRecordIn: security asOf: date</i> has been
defined at the class PriceTools to create and modify PriceRecord
information.  The method will create a new PriceRecord for the 
supplied security/date combination if it does not exist and returns
the existing or newly created PriceRecord which can be updated using
one or more of the following messages in succession:<pre><tt><b>
    PriceTools getOrCreateRecordIn: Named Security IBM asOf: 971015 .
       setPriceTo: number .
       setVolumeTo: number .
       setHighTo: number .
       setLowTo: number .
       setOpenTo: number .
       setBidTo: number .
       setAskTo: number .
       setAdjustmentDateTo: date .
       setBaseCurrencyTo: currency .
       ;
</b></tt></pre>
If you are creating the <b>PriceRecord</b>, you will minimally want to set
the price (i.e., the closing price) and the base currency.  By
default, the adjustment date is the same as the record date.  If
the pricing data is adjusted through a date that is different from
the date of the price, you should set the adjustment date to this date.
The volume, high, low, open, bid, and ask values can be set or
modified as appropriate.  The base currency applies to all data
values except for volume.  The adjustment date is used to access
all data values.
<p>
A basic methodology for updating prices is outlined below:<pre><tt><b>
   Security defineMethod: [ | loadPricesFromFile: file | 
     !recs <- file asFileContents asLines
       extendBy:
       [ !fields <- ^self breakOn: ",	" ;
       ] .
     select: [ fields count >= 2 ] .
       extendBy:
       [ !sec <- fields at: 1 . stripBoundingBlanks ;
         !security <- ^global Named Security uniformAt: sec ;
         !price <- fields at: 2 . asNumber ; 
         !date <- fields at: 3 . asNumber asInteger asDate else: ^date ;
         !curr <- fields at: 4 . stripBoundingBlanks ;
         !currency <- ^global Named Currency at: curr . 
              else: ^global Named Currency USD ;
       ] ;

     recs select: [ security isntNA && price > 0 ] .
     do: [ ^global PriceTools getOrCreateRecordIn: security asOf: date .
               setPriceTo: price .
               setBaseCurrencyTo: currency ;
         ] ;
   ] ;

</b></tt></pre>
This approach is fine for small pricing universes and for updates
that process a single day of prices at a time.  If you are planning
to update multiple days of prices within a single feed and you are
storing information for a large universe of daily securities, you
will want to include an additional step that correctly allocates
some underlying pricing components.  This modification is outlined
below:<pre><tt><b>
   Security defineMethod: [ | loadPricesFromFile: file | 
     !recs <- file asFileContents asLines
       extendBy:
       [ !fields <- ^self breakOn: ",	" ;
       ] .
     select: [ fields count >= 2 ] .
       extendBy:
       [ !sec <- fields at: 1 . stripBoundingBlanks ;
         !security <- ^global Named Security uniformAt: sec ;
         !price <- fields at: 2 . asNumber ; 
         !date <- fields at: 3 . asNumber asInteger asDate else: ^date ;
         !curr <- fields at: 4 . stripBoundingBlanks ;
         !currency <- ^global Named Currency at: curr . 
              else: ^global Named Currency USD ;
       ] ;

     !valid <- recs select: [ security isntNA && price > 0 ] ;

     #--  preallocate dates for all valid records
     valid groupedBy: [ security ] .
     do: [ !dateList <- groupList send: [ date ] ;
           ^global PriceTools 
              preallocateDatesIn: dateList forSecurity: ^self ;
         ] ;

     #--  process valid records
     valid
     do: [ ^global PriceTools getOrCreateRecordIn: security asOf: date .
               setPriceTo: price .
               setBaseCurrencyTo: currency ;
         ] ;
   ] ;

</b></tt></pre>



<p>
<hr>
<h3><a name="divs">Dividends</a></h3>
<p>
The message <i>dividend</i> returns the split-adjusted, currency-adjusted
dividend value for a specific security.  The dividend value is
accessed as of the current date by default.  The data is adjusted
through the current date in the base currency of the security by
default.  For example:  <pre><tt><b>
     Named Security XYZ dividend
</b></tt></pre>
returns XYZ's latest dividend value in US dollars,<pre><tt><b>
     Named Security XYZ :dividend asOf: 9702 .
</b>or<b>
     9702 evaluate: [ Named Security XYZ dividend ] 
</b></tt></pre>
returns XYZ's latest dividend value as of Feb 1997 in US dollars, 
and<pre><tt><b>
     "CAN" asCurrency evaluate: [ Named Security XYZ dividend ] 
</b></tt></pre>
returns XYZ's latest dividend value in Canadian dollars.  All values
are split-adjusted through the current date.  
The message <i>getDivsFrom:to:</i>
returns the total dividends paid by the security between the two
dates supplied.  For example:<pre><tt><b>
     Named Security XYZ getDivsFrom: 970201 to: 970331
</b></tt></pre>
returns the total dividends paid between the two dates.
The message <i>totalReturnFrom:to:</i> returns the total
return between the two dates supplied.  For example, 
to access the total return for the same period use:<pre><tt><b>
     Named Security XYZ totalReturnFrom: 970201 to: 970331
</b></tt></pre>
The actual time series of dividend values is stored in the time
series property <i>dividendSeries</i>.  The values in this time series
are instances of the class <b>DivRecord</b>, which has been created to
store the information needed to fully describe a dividend.  In
addition to the dividend value, instances of this class maintain the
currency and date of the dividend so that proper split and currency
adjustments can happen.  
<p>
The following key messages are defined for the class <b>DivRecord</b>:
<p>
<Center><table WIDTH="85%" TABLE BORDER="1" CELLSPACING="2" CELLPADDING="2">
<tr><th>Message <th>Description
<tr><td>_div<td>actual dividend value provided
<tr><td>div<td>fully adjusted dividend value
<tr><td>recordDate (date)<td>dividend date
<tr><td>adjustmentDate <td>date through which stored dividend was adjusted
(default is recordDate)
<tr><td>adjustmentFactor <td>split adjustment factor based on adjustmentDate
<tr><td>currencyFactor<td>currency adjustment relative to price date
<tr><td>baseCurrency<td>actual currency of unadjusted dividend
<tr><td>currency<td>current currency (security's by default)
<tr><td>security <td>actual security instance
</table></Center>
<p>
To support the possibility of future reorganization of this data
structure for performance and storage reasons, the method <i>dividends</i>
has been defined to return this time series.  Unless you are
explicitly writing methods that update the time series, you should
use the <i>dividends</i> message to access your data.  In this way, your
code will be immune to any changes that may be made to the
underlying data structure that manages the actual time series.
<p>
For example, to display the adjusted and unadjusted dividend values
for each of XYZ's dividends, you could use:<pre><tt><b>
     Named Security XYZ dividends
     do: [ ^date print: 12 ;       #-- date in time series
           date print: 12 ;        #-- date in record - should match
           div print ;             #-- adjusted value
           _div print ;            #-- unadjusted value
           adjustmentFactor print ;
           currencyFactor print ;
           newLine print ;
         ] ;
</b></tt></pre>
Note that the <i>dividends</i> message returns an actual time series
object so you need not prepend the ":"  to the message name.  
<p>
Dividends are normally updated as part of the daily cycle.  Permanent
corrections to any incorrect dividends are also made using a
database administration procedure.  If you need to temporarily fix 
a value for your working session, you can use the
<a href="pma_DivFeed.htm"><b>DivFeed</b></a> class.

<p>
<hr>
<p>
<h3><a name="ids">Security and Company Identification</a></h3>
<p>

<p>
<hr>
<h3><a name="holdings">Holdings</a></h3>
<p>

<p>
<hr>
<table border=0 width="100%">
<tr>
<td align=left><font size=-1>Copyright &copy 1998 Innovative Systems Techniques, Inc.</font>
<td align=right><font size=-1>Updated August 28, 1998</font>
</table>

</body>
</html>

