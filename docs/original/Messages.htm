---
title: Vision Messages

related_topics:
  - url: "Fund.htm#class"
    title: General Concepts
  - url: "tkSchema.htm"
    title: Schema
  - url: "mXRef.htm"
    title: Cross Reference

---
<!DOCTYPE html>
<html>
<body>
<p>
The basic rules for message definition are presented in the
document <a href="Fund.htm#message"><i>Vision Fundamentals.</i></a>  
This document presents a much more detailed description of message
definition and management.
<hr>
<h3 id="review">Review</h3>
<p>
<b>Messages</b> provide the basic mechanism for interacting with objects.
<p>
Four types of message can be defined:
<p>
<ul type="disc">
<li><a href="Fund.htm#fixed">Fixed Properties</a>
<li><a href="Fund.htm#ts">Time Varying Properties</a>
<li><a href="Fund.htm#constant">Class Constants</a>
<li><a href="Fund.htm#method">Methods</a>
</ul>
<p>
A message is a request for an object to return the value of one of
its properties or execute one of its methods.
You do not need to know what type of message has been defined in
order to use the message.  In all cases, the form:<pre><b>
     object messageName 
</b></pre>
is used to request that the recipient object carry out the specific
function indicated by the message.
<p>
To view a method, you prepend the : character to the message:<pre><b>
     Number :absoluteValue
</b></pre>
This 
displays the definition of the method <i>absoluteValue</i>
instead of evaluating
it.  If you wish to display the definition of a method that has
multiple parameters, you must supply "dummy" values for each
parameter.  For example, the expression:<pre><b>
     Number :log: 0
</b></pre>
displays the definition of the <i>log:</i> method.  If the
method has several parameters, you only need to place the ":"  in
front of the first one to display its contents, but you must supply a
value for each parameter.  
<p id="primitive">
There is a special type of message known as a 
<b>Primitive</b>.
Primitive messages are defined as part of the process
of bootstrapping a Vision database.  The implementation for a Primitive
cannot be viewed.  Instead you will see the name of the primitive as
illustrated below:<pre><b>
     Object :do: 0

</b>displays:<b>

     &ltSendForExecution&gt
</b></pre>
<p>
The message <i>selectorList</i> can be sent to any object and returns
a list of <i>String</i> objects representing the messages that have
been defined directly at the recipient object's class.  For example,
the expression:<pre><b>
     Number selectorList do: [ printNL ] ;
</b></pre>
returns and prints a list that includes the strings "absoluteValue" and "log:".
The list does not include messages that are defined at the object's
super classes.
<p>
<hr>
<h3 id="mid">Message Descriptors</h3>
<p>
The class <a href="tkSchema.htm">
<i>Schema MessageImplementationDescriptor</i></a>
is used to maintain information about the
messages in your Vision database.  Each instance of
<i>Schema MessageImplementationDescriptor</i>
corresponds to a specific message in the Vision database.
These instances track
information about the message itself including its type, function, and
description, as well as tracking changes to methods over time.
<p>
New instances of the <i>Schema MessageImplementationDescriptor</i>
class are NOT
created automatically.  Each time you use one of the <i>define</i>
messages, the class is flagged to indicate
that new messages are pending.  To process and refresh all messages,
execute the expression:<pre><b>
     Schema processAllMessages
</b></pre>
This process creates and refreshes message descriptors in the
Schema database as needed.
Depending on the number of messages that have been defined since the
last time this processing was run, the update time will range from a
few seconds to a few minutes.  In general, you will probably want to
incorporate this procedure into a standard nightly update.
<p>
The expression:<pre><b>
     object getMessage: "message"
</b></pre>
is used to access the descriptor associated with a specific
implementation of a message.  This message
returns an instance of the class <i>Schema
MessageImplementationDescriptor</i>.
The messages <i>displayInfo</i> and <i>describe</i> display
useful information about this message in a short and long format.
For example, the expression:<pre><b>
     Number getMessage: "absoluteValue" . describe
</b></pre>
displays a report in the form:<pre><b>
     Message:                 absoluteValue
     Class:                   Number
     Created:                 10/30/1992
     Updated:                 10/30/1992
     Function Type:                 NA 
     Returns:                 Object
     Implementation Type:     Method
     {|absoluteValue|
     ^self < 0 ifTrue: [^self negated]
     ifFalse: [^self]}
</b></pre>
<p>
<hr>
<h3 id="access">Access Techniques</h3>
<p>
The expression:<pre><b>
     object showMessages
</b></pre>
can be used to display all the messages defined for the object
directly.  
If the recipient object contains extensions, messages defined at each
extension are displayed first.
Messages that have been created or changed since the last Schema 
database update are flagged.
<p>
For example, the expression:<pre><b>
     Number showMessages
</b></pre>
produces:<pre><b>
     Messages Defined At Class: Number
     !=                            Method
     >                             Method
     >=                            Method
     absoluteValue                 Method
     arcCosine                     Method
     arcSine                       Method
     arcTangent                    Method
     asAPowerOf:                   Method
     asDate                        Method
</b></pre>
The expression:<pre><b>
     Object showMessagesX
</b></pre>
can be used to display all the messages defined for the object and
any of its super classes excluding Object.
Messages that have not been posted to the Schema database are also excluded.
For example, the expression:<pre><b>
     Number showMessagesX
</b></pre>
produces:<pre><b>
     Messages Defined In Class Hierarchy Of: Number
       --> Excludes Messages Defined At Object 
     
     Message                            Type         Defined At
     -----------------------------------------------------------
     !=                                 Method       Number
     <                                  Method       Ordinal
     <=                                 Method       Ordinal
     >                                  Method       Ordinal
     >                                  Method       Number
     >=                                 Method       Ordinal
     >=                                 Method       Number
     absoluteValue                      Method       Number
     . . . 
     whatAmI                            Constant     Ordinal
     whatAmI                            Constant     Number
     within:percentOf:                  Method       Number

</b></pre>
The expression:<pre><b>
     object showProperties
</b></pre>
can be used to display all the fixed and time series properties
defined for the object and any of its super classes.  Messages that
have not been posted are excluded from this report.  For example,
the expression:<pre><b>
     Object showProperties
</b></pre>
produces:<pre><b>
     Properties Defined In Class Hierarchy Of: Object
       --> Excludes New Messages Not In Schema
     
     Message                            Type         Defined At
     -----------------------------------------------------------
     baseObject                         Fixed        Object
     code                               Fixed        Object
     creationDate                       Fixed        Object
     defaultFlag                        Fixed        Object
</b></pre>
The expression:<pre><b>
    object showMessagesDefining: "message"
</b></pre>
displays a list of all implementations of the supplied message
defined for the object or any of its super or sub classes.
For example, the expression:<pre><b>
    Object showMessagesDefining: "="
</b></pre>
shows all the classes that have re-defined the "=" messages as
illustrated below:<pre><b>
     Message                            Type         Defined At
     -----------------------------------------------------------
     =                                  Method       Date
     =                                  Primitive    Double
     =                                  Primitive    Float
     =                                  Primitive    Integer
     =                                  Primitive    Object
     =                                  Primitive    String
     =                                  Method       Utility UnixSeconds
</b></pre>
The expression:<pre><b>
     Number showMessagesDefining: "="
</b></pre>
shows only the classes related to <i>Number</i> that have redefined this
message:<pre><b>
     Message                            Type         Defined At
     -----------------------------------------------------------
     =                                  Primitive    Double
     =                                  Primitive    Float
     =                                  Primitive    Integer
     =                                  Primitive    Object

</b></pre>
The expression:<pre><b>
    object showMessageNamesContaining: "substring"
</b></pre>
displays a list of all messages
defined for the object or any of its super or sub classes
that contain the supplied substring as part of their message name.
For example, the expression:<pre><b>
     Object showMessageNamesContaining: "showM"
</b></pre>
lists all the message names that contain the string "showM" as
illustrated below:<pre><b>
     Message                            Type         Defined At
     -----------------------------------------------------------
     showMessageNamesContaining:        Method       Object
     showMessageSummaryFor:             Method       Object
     showMessages                       Method       Object
     showMessagesDefining:              Method       Object
     showMessagesUsing:                 Method       Object
     showMessagesX                      Method       Object
     showMethodsUsing:                  Method       Object
</b></pre>
The substring argument can contain wild-card characters suitable for your
machine.  For example, on Unix machines you can restrict the search to
messages beginning with the string "show" by using the substring "^show".
<p>
The expression:<pre><b>
     object showMessagesUsing: "string"
</b></pre>
displays a list of all implementations 
defined for the object or any of its super or sub classes
that contain the supplied
substring as part of its method definition.
For example, the expression:<pre><b>
     Object showMessagesUsing: "asDate"
</b></pre>
lists all methods that use the message <i>asDate</i> as illustrated
below: <pre><b>
     Message                            Type         Defined At
     -----------------------------------------------------------
     *                                  Method       DateOffset
     +                                  Method       DateOffset
     asCurrentYearMMDD                  Method       Date
     asDate                             Method       DateOffset
     asDate                             Method       Number
     asDate                             Method       Integer
     asDateFromMMDD                     Method       Integer
     asDateFromMMDDYY                   Method       Integer
     . . . 
</b></pre>
The expression:<pre><b>
     Object showMethodsUsing: "asDate"
</b></pre>
displays the actual method for each implementation found.
<p>
Most of the "show" messages have a "get" equivalent which returns
a list of <i>Schema MessageImplementationDescriptor</i> instances
instead of displaying them.  You can use any of the list messages on
this result.  For example:<pre><b>
     Object getMessagesUsing: "asDate" .
     do: [ displayInfo ] ;
</b></pre>
<p>
The following messages have been defined to return a list of
<i>Schema MessageImplementationDescriptor</i> instances:
<p>
<ul>
<li><i>getMessages</i>
<li><i>getMessagesX </i>
<li><i>getMessagesInInheritancePath </i>
<li><i>getMessagesDefining: string</i>
<li><i>getMessageNamesContaining: string</i>
<li><i>getMessagesUsing: string</i>
</ul>
<p>
<hr>
<h3 id="history">Viewing Method History</h3>
<p>
The expression:<pre><b>
     Schema processAllMessages
</b></pre>
is used to update the Schema classes with all new and changed methods.
To find the last time a message was updated use:<pre><b>
     Number getMessage: "absoluteValue" . updateDate
</b></pre>
To display all the messages defined at the class <i>Number</i> that
have changed since 3 months ago, use:<pre><b>
     Number getMessages select: [ updateDate > ^today - 3 months ] .
     do: [ displayInfo ] ;
</b></pre>
Prior versions of methods are preserved in the time series property
<i>implementationSource.</i>  To display the implementation history for a 
particular method use:<pre><b>
     Number getMessage: "absoluteValue" .
     :implementationSource     #- returns time series of strings
     do: [ "Implementation As Of: " print; ^date printNL ;
           printNL ;           #- displays implementation
           "-" fill: 50 . printNL ;
         ] ;
</b></pre>
<p>
<hr>
<h3 id="format">Preserving Method Format</h3>
<p>
The expression:<pre><b>
     class defineMethod:
     "[ | selector |
      #--  Code follows this line
      #--  End of code
     ]"
</b></pre>
is identical to the <i>defineMethod:</i> message except that the 
parameter is provided as a string.   In this form, the Schema tools
are able to preserve all comments and formatting defined within the
method.  For example, the expression:<pre><b>
     Number  defineMethod:
     "[ | absoluteValue |
     #--  this version has comments and indentation
       ^self < 0    # do the test
         ifTrue: [ ^self negated ]
        ifFalse: [ ^self ]
     ] " ;
</b></pre>
can be used to redefine the <i>absoluteValue</i>
message at <i>Number</i> to include comments.  To confirm the new
implementation, describe it again:<pre><b>
     Number getMessage: "absoluteValue" . describe

     Message:                 absoluteValue
     Class:                   Number
     Created:                 10/30/1992
     Updated:                 10/30/1992
     Function Type:           Calc
     Returns the absolute value of the recipient
     Returns:                 Number
     Implementation Type:     Method
     [ | absoluteValue |
     #--  this version has comments and indentation
       ^self < 0    # do the test
         ifTrue: [ ^self negated ]
        ifFalse: [ ^self ]
     ] 
</b></pre>
Notice that the method's comments and format have been preserved.
<p>
If your method includes the quote (") character, you must
precede it with the backslash character (\) if you define your
method as a string.  For example:<pre><b>
     Entity defineMethod:
     "[ | describe |
        #--  print label in quotes; the " must be preceded by \
        \"Code: \" print: 15 ; code printNL ; 
        \"Name: \" print: 15 ; name printNL ;
      ] " ;
</b></pre>
The quotes used within the method must be preceded by the \
character so that they can be distinguished from the quote used to
end the method definition.
<p>
<hr>
<h3 id="default">Setting Default Property Values</h3>
<p>
When a property is defined for a class using the 
<i>defineFixedProperty:</i> or <i>define:</i> message,
the initial value of the property is <a href="clNA.htm"><i>NA</i></a>
for all instances of the class and for any new instance when it is
created.  The expression:<pre><b>
     class defineFixedProperty: 'name' withDefault: object
</b>or<b>
     class define: 'name' withDefault: object
</b></pre>
runs the <i>defineFixedProperty:</i> or <i>define:</i>
message and sets the default value in
the associated message implementation descriptor to the supplied
object.  All existing instances are initialized to have this value.
In addition, this property will be set to this default value as part
of the execution of the 
<a href="Classes.htm#instance"><i>createInstance</i></a>
method.  For example:<pre><b>
     !NewClass <- Object createSubclass ;
     NewClass defineFixedProperty: 'p' withDefault: 10 ;
     !NewInstance <- NewClass createInstance ;
     NewInstance p print ;
</b></pre>
displays the value <i>10</i>.
<p>
<hr>
<h3 id="descriptive">Adding Descriptive Information</h3>
<p>
Several messages are available for updating descriptive information
about a message including:
<p>
<ul>
<li><i>setDescriptionTo: string </i>
<li><i>setReturnObjectTypeTo: class</i>
<li><i>setDefaultValueTo: object</i>
<li><i>clearDefaultValue</i>
<li><i>setFunctionTypeTo: string</i>
</ul>
<p>
The message <i>setDescriptionTo:</i> is used to store a text string that
describes the purpose of the message.  This string can contain new
line characters.  The message <i>setReturnObjectTypeTo:</i> is used to
define the type of object returned by this message.  By default this
value is set to <i>Object</i>.  The
<i>setDefaultValueTo:</i> message is used to provide a default value for
a property that is used to initialize new instances.
The <i>clearDefaultValue</i> message is used to remove the default value.
Values in existing instances are not changed by these messages.
The <i>setFunctionTypeTo:</i> message is used to provide an
additional level of classification for cross-referencing messages.  
<p>
All of these messages return the current message implementation
descriptor and can therefore be streamed together.  
For example, to add descriptive information to the <i>absoluteValue</i>
message defined at <i>Number</i>:<pre><b>
     Number getMessage: "absoluteValue" .
        setDescriptionTo: "Returns the absolute value of the recipient" .
        setReturnObjectTypeTo: Number .
        setFunctionTypeTo: "Calc" .
        describe ;
</b></pre>
producing:<pre><b>
     Message:                 absoluteValue
     Class:                   Number
     Created:                 10/30/1992
     Updated:                 10/30/1992
     Function Type:           Calc
     Returns the absolute value of the recipient
     Returns:                 Number
     Implementation Type:     Method
     {|absoluteValue|
     ^self < 0 ifTrue: [^self negated]
     ifFalse: [^self]}
</b></pre>
<p>
<hr>
<h3 id="delete">Deleting Messages</h3>
<p>
The <i>deleteMessage:</i> message is used to delete a message from a class.
The general form for message deletion is:<pre><b>
       object deleteMessage: "message"
</b></pre>
<p>

{% include doc-footer.htm copydates="1997" %}

</body>
</html>
