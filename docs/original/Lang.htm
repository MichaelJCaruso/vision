<!DOCTYPE html>
<html>
<head>
<title>Vision Language Basics </title>
</head>
<body bgcolor = white>

<h2>Vision Language Basics</h2>
<p>
     | <a href="FHome.htm">Home</a> | <a href="Syntax.htm">Syntax</a> | <a href="Program.htm">Programs</a> | <a href="Execution.htm">Program Execution</a> | <a href="Running.htm">Running Vision</a> | <a href="Error.htm">Errors</a> |
<hr>
<h3>Topics Covered:</h3>
<ul type="square">
<li><a href="#overview">Overview</a>
<li><a href="#message">Messages</a>
<li><a href="#names">Names, Variables, and Assignment</a>
<li><a href="#expression">Expressions </a>
<li><a href="#printing">Printing</a>
<li><a href="#list">Defining Lists</a>
</ul>
<hr>
<h3><a name="overview">Overview</a></h3>
<p>
The Vision language is designed around the concept of communicating
objects.  Objects interact with one another via a process known as
<a href="Fund.htm#message">"sending a message".</a>
A message is a request for an object to carry out
one of its operations.  In the example:<pre><tt><b>
     universe select: [ score > 10] 
</b></tt></pre>
the message <i>select:</i> is sent to the object named
<i>universe</i>.  Some messages require parameters.  For example, to
send the <i>select:</i> message, you provide a parameter that represents
your selection criteria.  In the example, the <i>select:</i> parameter is
<i>[score > 10]</i>.  
<p>
<a name="messExpress"> </a>
All requests in Vision conform to this object/message pattern known
as a <b>Message Expression</b>.  Message expressions always produce an
object as a result.  In the preceding example, the expression
produces a new object which represents the list of companies that
satisfied the criteria.  
<p>
The general form for a message expression is:<pre><tt>
     object message 
</tt></pre>
<p>
A message expression includes a recipient object, a selector, and possibly
some parameters.  The <b>Recipient</b> is the object to which the message is
sent.  The <b>Selector</b> is the name of the message.  A <b>Parameter</b> or
<b>Argument</b> is an extra piece of information needed to execute the
message.  Messages can have any number of parameters (including none).
<p>
<hr>
<h3><a name="message">Messages</a></h3>
<p>
There are three types of messages:
<ul type="disc">
<li><a href="#unary">Unary Messages</a> (no parameters)
<li><a href="#keyword">Keyword Messages</a> (one or more parameters)
<li><a href="#binary">Binary Messages</a> (special form of single parameter message)
</ul>
<p>
<h4><a name="unary">Unary Messages</a></h4>
<p>
Messages without arguments are called <b>Unary Messages</b>.  These messages
are called unary because only one object, the recipient, is involved
in the expression.  The general form for a unary message expression
is:<pre><tt>
     recipient unaryMessageSelector 
</tt></pre>
<p>
Examples of unary message expressions are:
<p>
<ul type="disc">
<i>
<li>gm sales</li>
<li>gm industry</li>
<li>portfolio totalValue</li>
<li>quantity sqrt</li>
<li>myCompanyList count</li>
<li>account7 manager</li>
</i>
</ul>
<p>
<h4><a name="keyword">Keyword Messages</a></h4>
<p>
The general type of message with one or more parameters is the <b>Keyword
Message</b>.  The selector of a keyword message is composed of one or
more <b>Keywords</b>, one preceding each parameter.  A keyword is a name
followed by the : character.  Each keyword is followed by a parameter value.
The general form for a keyword message is:  <pre><tt>
     recipient keyword1: parameter1 keyword2: parameter2   ... 
</tt></pre>
Examples of single keyword message expressions are:
<p>
<ul type="disc">
<i>
<li>universe select: [score > 20]   </li>
<li> mylist union: yourlist 	    </li>
<li> gm :sales changeLag: 1 years   </li>
<li> gm :earnings asOf: 8705 	    </li>
</i>
</ul>
<p>
The parameter of the <i>select:</i> message is the criteria to be used to
choose companies from your universe.  The parameter of the <i>union:</i>
message is the list you wish to combine with an initial list.  
The parameter of the <i>changeLag:</i>
message is the offset you wish to use to compute the absolute change
in value.  The parameter of the <i>asOf:</i>  message is the date for which
you wish to retrieve data.  
<p>
A message with two parameters will have a selector with two keywords.
Each keyword is followed by a parameter value.  Examples of
expressions using double keyword messages are:
<p>
<ul type="disc">
<i>
<li>value within: x percentOf: y     </li>
<li>:earnings asOf: 8705 put: 17.3   </li> 
</i>
</ul>
<p>
When the selector of a multiple keyword message is referred to
independently, the keywords are concatenated; therefore, the names of
the last two messages are <i>within:percentOf:</i>, and 
<i>asOf:put:</i>.  There 
can be any number of keywords in a message.  For example, the
expression:  <pre><tt><b>
     sales > 1000
         ifTrue: [ "Large Sales" ] 
        ifFalse: [ "Small Sales" ] 
           else: [ "No Sales" ] 
</b></tt></pre>
uses a message containing three keywords.  This message is referred
to as the <i>ifTrue:ifFalse:else:</i> message.
<p>
<h4><a name="binary">Binary Messages</a></h4>
<p>
The <b>Binary Message</b> is a special type of message expression
that takes a single parameter.  The general form for a binary message
is:<pre><tt>
     recipient binaryMessage parameter
</tt></pre>
Binary messages differ from other messages in that there is a
pre-defined, fixed set of these messages that are built into the
system.  
<p>
The valid binary messages are:<pre><tt>
     +     addition
     -     subtraction
     *	   multiply
     /     divide
     =     equal
     ==    identical to
     <     less than
     <=    less than or equal to
     >     greater than
     >=    greater than or equal to
     !=    not equal to
     !==   not identical to
     &&    and
     ||    or
     ,     append
     <-    left assignment
     ->    right assignment
</tt></pre>
<p>
As with single parameter keyword messages, the binary messages work
with two objects, the recipient and a single parameter.  The binary
messages do not require a ':' character to separate the selector from the
parameter.  Examples of binary messages are:  
<p>
<ul type="disc">
<i>
<li>3 + 4 
<li>score > 20 
<li>price / earnings
<li>gm sales + ford sales
</i>
</ul>
<p>
The library of messages available in Vision is constantly expanding.
In addition, you may create and redefine unary and keyword messages
as often as needed.  You cannot directly add new binary messages;
however, you can interactively redefine how a binary message operates
in a specific situation.  More detailed information on 
<a href="Fund.htm#message">defining messages</a> is available.
<p>
<hr>
<h3><a name="names">Names, Variables, and Assignment</a></h3>
<p>
<b>Selectors</b>
are objects that represent the strings used to name objects and
messages in the system.  Selectors are also referred to as 
<b>Message Names</b> or <b>Names</b>.
Names appear throughout the examples in this document.  For example,
the name <i>gm</i> has been used to refer to the object representing the
company General Motors, the name <i>eps</i> has been used to refer to a time
series of gm's earnings per share values, and the name <i>select:</i> has
been used to refer to a message that applies a selection
criteria to a list.  
<p>
The literal representation of a name is a sequence of letters, digits
and the character '_'.  A name can contain any number of these
characters, but cannot begin with a digit.  Upper and lower case
letters can be used and are considered to be distinct characters.
The following names are valid:  
<p>
<ul type="disc">
<li>x</li>
<li>myVariable</li>
<li>variableName1</li>
<li>variable_name</li>
<li>__tmp</li>
</ul>
The names:
<p>
<ul type="disc">
<li>1x</li>
<li>abc$</li>
<li>3rd variable</li>
</ul>
<p>
are not valid.  <i>1x</i> is invalid because it begins with a digit.
<i>abc$</i> is not valid because it contains an illegal character.  
<p>
Any character (including spaces) can be included in a name if it
"escaped" using the '\' character.  The following variations on the
previous examples are valid names:  
<p>
<ul type="disc">
<li>\1x</li>
<li>abc\$</li>
<li>\3rd \variable</li>
</ul>
<p>
As the third example illustrates,
any number of "escaped" characters can be included in a name.
<p>
Names are used throughout the Vision environment in a number of
forms.  When you define 
<a href="Fund.htm#fixed">fixed</a> and
<a href="Fund.htm#ts">time series</a> properties,
you supply a selector as the argument to the
<i>defineFixedProperty:</i> and <i>define:</i> messages.
When you define a 
<a href="Fund.htm#constant">class constant</a>, you supply
a selector as the first argument to the <i>define:toBe:</i> message.
When you define a
<a href="Fund.htm#method">method</a>, you supply
a selector to define the name of the method.
For example:<pre><tt><b>
     myClass defineFixedProperty: 'fixed' ;

     yourClass define: 'ts' ;

     ourClass defineMethod: [ | runReport  | ... ] ; 
</b></tt></pre>
defines the name <i>fixed</i> as a fixed property of the class
<i>myClass</i>, defines the name <i>ts</i> as a time series property
of the class <i>yourClass</i>, and defines the name <i>runReport</i>
as a method of the class <i>ourClass</i>.  
<p><a name="quote"> </a>
Notice that the names used to define
properties and constants are enclosed in single quotes.  
The single quotes identify that the name is a selector and not a string.
Enclosing the name in double quotes would work as well; however, if you
provide the single quote (i.e., the selector) version, your name will be
checked to make sure it is a valid name.  For example:<pre><tt><b>
     Object define: 'variable name' ;
</b></tt></pre>
produces a <a href="Error.htm#syn">syntax error</a> whereas:<pre><tt><b>
     Object define: "variable name" ;
</b></tt></pre>
does not.
<p>
<a name="variable"> </a>
Names used to store values are often referred to as <b>Variable Names</b> or
<b>Variables</b>.  The result of any Vision expression can be saved into a
variable.  For example, in the expression:  <pre><tt><b>
     !x <- 2 + 2 
</b></tt></pre>
the name <i>x</i> is used to store the result of evaluating the
expression 2 + 2.  If you then execute the expression:  <pre><tt><b>
      x + 1 
</b></tt></pre>
Vision will use the stored value of <i>x</i> (4) to evaluate the expression
and return the result 5.  
<p>
To create a variable, type <i>!</i> followed by a valid name.  
<a name="assign">The <i><-</i> and <i>-></i></a>
messages are used to assign a value into this variable.  Note that the
assignment messages are formed using the two characters '<' and '-'
or '-' and '>'.  For example:  <pre><tt><b>
     !x <- 2 ; 
     !y <- 3 ; 
     4 -> !z ; 
</b></tt></pre>
Variables can be used to store values other than numbers.  You can
save the results of any Vision expression by assigning the expression
to a variable name.  For example:
<p>
<ul type="disc">
<i>
<li>!autoSales <- gm sales + ford sales
<li>!universe <- mylist union: yourlist
<li>!optimalList <- universe select: [score > 20]
</i>
</ul>
<p>
You can create as many variables as you need during the
course of your session.  You have complete discretion over the names
you use.  Names can contain any number of characters.  You should
choose names that are easy to remember and somewhat descriptive.  Any
information that you save into a variable is available for the
remainder of your session or until you redefine the variable.  
<p>
<a name="update"> </a>
One additional fact is needed to complete this  discussion of
variable assignment.  
If you want to assign a new value to a name that already
is in use, you should prefix the name by the '<i>:</i>' character instead of
the '<i>!</i>' character as shown below:  <pre><tt><b>
      :x <- 17 ; 
</b></tt></pre>
The '<i>!</i>' character tells Vision to create a new variable using the
name provided.  A variable name
prefixed by the '<i>:</i>' character tells Vision to
change the value of an existing variable.  In many cases, you can use
the two forms interchangeably.  
Note that updating a variable is identical to 
<a href="Fund.htm#update">updating a fixed property</a>.
In fact, a variable really is a fixed property of the
environment in which it is defined.  More detailed information
about <a href="Execution.htm#layers">environment layers</a> is available.
<p>
When you place the '<i>:</i>' character in front of a name, you are
requesting the <b>Intensional Form</b> of the value.  The
intensional form of a property is used to update its value.
The intensional form of a method is used to display its definition.
<p>
<hr>
<h3><a name="expression">Expressions</a></h3>
<p>
The act of "sending a message" to an object always produces
another object as a result.  For example the expression:<pre><tt><b>
     gm sales 
</b></tt></pre>
returns a numeric value, the expression:<pre><tt><b>
     gm industry 
</b></tt></pre>
returns an industry, and the expression:<pre><tt><b>
     universe select: [score > 20] 
</b></tt></pre>
returns a list of companies.  
This resultant object can act as the recipient for another message.
<p>
An <b>Expression</b> in Vision consist of a series of messages
applied in succession.  
For example, the expression <i>gm industry</i> returns an object
representing GM's industry.  The message <i>sales</i> could be sent to this
industry to return the total sales for the industry. 
The expression:<pre><tt><b>
     gm industry sales 
</b></tt></pre>
would therefore return the total sales for gm's industry.  In this
example, the expression <i>gm industry</i> produces an object representing
GM's industry.  Sending the message <i>sales</i> to this object produces a
new object representing the total auto industry sales as illustrated
below:  
<p>
<pre>
<ul>
      <img src="lang1.gif" lowsrc="lang1.gif" alt="Sending Messages (Sample)" ></ul>
</pre>
<p>
Expressions provide a simple way to
<a name="navigate"><b>Navigate</b></a> from one object to another.
Expanding on the earlier definition, the
general form for a Vision expression is:  <pre><tt>
     recipient message1 message2 message3 ... 
</tt></pre>
Each message is sent to the resultant object of the previous message
expression as shown below:  
<p>
<pre>
<ul>
      <img src="lang2.gif" lowsrc="lang2.gif" alt="Sending Messages (General)" ></ul>
</pre>
<p>
For example, the expression:<pre><tt><b>
     gm sales + ford sales 
</b></tt></pre>
could be used to add the sales figures for the two companies.  The
expressions <i>gm sales</i> and <i>ford sales</i> each returns an object
representing a numeric sales value.  Sending the message <i>+</i> to GM's
sales instructs it to add Ford's sales to it, producing a new value.
<p>
The expression:<pre><tt><b>
     gm :eps asOf: 8705 
</b></tt></pre>
could be used to access a specific data point from GM's time series
of earnings values.  The expression <i>gm :eps</i> returns an object that is
a time series representing GM's earnings.  The keyword message
<i>asOf:8705</i>
could be sent to this time series to access the earnings value as of May.  
<p>
The expression:<pre><tt><b>
     universe select: [score > 20] . count 
</b></tt></pre>
could be used to find out how many companies in <i>universe</i> passed the
screen.  The keyword message expression <i>universe select:  [score >
20]</i> returns an object which is a list of those companies that met the
criteria.  Sending the message <i>count</i> to this new list will return the
number of companies in the list.  
<p>
<a name="parameter"> </a>
A <b>Parameter</b> is really just an expression that is supplied as
an argument to a binary or keyword message.  Parameter values can
be as simple as an explicit number or string or a named object.
Any expression can
also be used as a parameter.  For example, you could add GM's industry
sales to 100 using the expression:<pre><tt><b>
     100 + gm industry sales
</b></tt></pre>
This expression computes the sales value and adds it to 100.
<p>
<a name="literal"> </a>
Expressions must begin with a selector (i.e., the name of any object)
or a literal.  A <b>Literal</b> is a Number, a String, 
a <a href="Program.htm#block">Block</a>, or 
a <a href="Execution.htm#magic">Magic Word</a>.  Expressions cannot start with
binary or keyword messages.  The following examples are NOT valid
expressions:<pre><tt><b>
     + 3                         <i>(incorrect expression)</i>
     define: 'newProperty'       <i>(incorrect expression)</i>
</b></tt></pre>
Since the <i>+</i> and <i>define:</i> messages must be sent to a
named object or a literal, both of these expressions would generate
a <a href="Error.htm#syn">syntax error</a>.
<p>
A literal can only be the first object in an expression.  For example,
you cannot send the message <i>100</i> to <i>gm</i>:<pre><tt><b>
     gm 100                      <i>(incorrect expression)</i>
</b></tt></pre>
This request would generate a <a href="Error.htm#syn">syntax error</a>
as well.
<p>
<hr>
<h3><a name="printing">Printing</a></h3>
<p>
When you execute an expression, Vision automatically sends the
message <i>print</i> to the final result.  In other words, when you submit
the request:  <pre><tt><b>
     3 
</b></tt></pre>
Vision actually evaluates the expression:<pre><tt><b>
     3 print 
</b></tt></pre>
and therefore prints the value 3 when it is done.  If you submit the 
request:<pre><tt><b>
     3 print 
</b></tt></pre>
you will see the result, 3, printed twice.  The first 3 is the one
you explicitly requested; the second is Vision automatically sending
the print message to the result.  All objects in the system have a
default way in which they print.  For example, integers are right
justified in a nine character field and print with no decimal places
and decimal numbers are right justified in a nine character field and
print with two decimal places.  Strings are left justified when they
are printed.  You can redefined the behavior of the <i>print</i> message by
class as needed.  In addition, 
<a href="Output.htm#print">many variations</a>
on the <i>print</i> message
have been defined to allow you to specify output widths, commas in
numeric fields, and justification.  
<p>
For example, the <i>print:</i>  message requires a single parameter that
supplies a print format.  The format can be an integer or decimal
number.  The integer portion of the format specifies the total width
of the output.  If a decimal value is provided, the decimal portion
indicates the number of decimal places to print if appropriate.  For
example, the expression:  <pre><tt><b>
     10.123 print: 7.2 ; 
</b></tt></pre>
displays the number in 7 total character positions with 2 decimal
places.  The number is right-justified by default.  The expression
generates the output:  <pre><tt><b>
     ##10.12 
</b></tt></pre>
where the # character indicates a blank space.  The messages 
<i>printNL</i>
and <i>printNL:</i>are identical to the 
<i>print</i> and <i>print:</i>  messages, except
they automatically print a new line character after printing.  
<p>
More detailed examples of <a href="Output.htm#print">printing and
formatting</a> techniques are available.
<p>
<hr>
<h3><a name="list">Defining Lists</a></h3>
<p>
Instances of the class <i>List</i> represent collections of objects
that are used as a unit or referenced positionally.  A list is updated
by appending objects to its end.
<p>
One way to create a list is to use the '<i>,</i>' binary message to 
append objects together.  For example, the expression:<pre><tt><b>
     !sampleList <- 10, -3, 20, 132 ;
</b></tt></pre>
creates a list of four integers and saves the list as the variable
named <i>sampleList</i>.  Any type of object can be included in a
list and the list can contain objects from multiple classes.  For
example, the expression:<pre><tt><b>
     !mixedList <- 1, "xyz", TRUE, NA, -3.45 ;
</b></tt></pre>
creates a list of five objects representing five distinct classes
(<i>Integer, String, TRUE, NA, </i>and <i>Double</i>).  
<p>
The binary message '<i>,</i>' changes the recipient list directly.
For example:<pre><tt><b>
     sampleList , 100 
</b></tt></pre>
modifies the list in <i>sampleList</i> by appending the
object <i>100</i> to the end of the list.  
<p>
More <a href="clList.htm">detailed information</a> about creating and
operating on lists is available.
<p>
<hr>

<table border=0 width="100%">
<tr>
<td align=left><font size=-1>Copyright &copy 1997 Innovative Systems Techniques, Inc.</font>
<td align=right><font size=-1>Updated June 19, 1997</font>

</table>

</body>
</html>
