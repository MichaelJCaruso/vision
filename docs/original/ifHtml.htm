<!DOCTYPE html>
<html>
<head>
<title>Vision Interfaces: Sample Html Access</title>
</head>
<body bgcolor=white>
<h2>Vision Interfaces: Sample Html Access</h2>

<p>
     | <a href="FHome.htm">Home</a> 
     | <a href="vifaces.htm">Interfaces</a>
     | <a href="tkInterface.htm">Interface ToolKit</a>
     | <a href="ifDownload.htm#ifVQuery">Download Scripts</a> 
     |
<hr>
<h3>Topics Covered:</h3>
<ul type=square>
<li><a href="ifHtml.htm#overview">Overview</a>
<li><a href="ifHtml.htm#io">Basic Handshaking</a>
<li><a href="ifHtml.htm#access">The <b>Interface HtmlAccess</b> Class</a>
<li><a href="ifHtml.htm#format">The <b>FormatTools Html</b> Class</a>
<li><a href="ifHtml.htm#execution">Putting the Pieces Together</a>
<li><a href="ifHtml.htm#vquery">The <i>vquery</i> Program</a>
</ul>
<hr>
<h3><a name="overview">Overview</a></h3>
<p>
Web browsers such as Netscape and Internet Explorer offer an
excellent mechanism for delivering documents that can be dynamically
generated by Vision.  The 
<a href="tkInterface.htm"><b>Interface</b> and <b>FormatTools</b></a>
ToolKits provide a means for standardizing your requests for
information and returning the results in a form that can be
displayed by a browser.
<p>
In general, you can use Html and its numerous extensions such
as <i>JavaScript</i> and <i>Java</i> applets to design interfaces
that request specific inputs from a user.  These inputs can be
submitted to Vision via a <i>cgi</i> or alternative interface
program to access the appropriate 
information from Vision, dynamically generated
based on the inputs supplied and formatted
correctly for the browser.  The returned documents can have embedded
links to other documents, including requests for additional
information from your Vision database.
<p>
The basic mechanism for navigating from one Html document to another is
by embedding the URL of a target document in the source document.  In 
addition to referencing specific pre-formatted documents, this URL
can be used to specify a program that communicates inputs from the
document to Vision and returns a new document to the browser.  The
URL can be associated with the <i>HREF</i> attribute of an anchor.
It can also be used as the value of the <i>ACTION</i> attribute of a form.
In the latter case, the values of the controls in the form are also
shipped.
<p>
The server indicated in either of these cases can reference a program
sitting between your Web server and Vision which passes the inputs
to Vision and returns the result to the browser.
The <a href="#vquery"><i>vquery</i> program</a> is designed to
perform this function.  It is included as part of the
<i>/vision/tools</i> directory with standard Vision releases.
The actual mechanisms for creating and using this program 
<a href="#vquery">are described below</a>.  You can use this program
to perform the bridging operation or create your own program or script,
customized to the requirements of your environment.  
Whether you use
<i>vquery</i> or your own bridging program, you can take advantage of
the functionality offered by the Vision toolkits
<a href="tkInterface.htm"><b>Interface</b> and <b>FormatTools</b></a>.
<p>
<hr>
<h3><a name="io">Basic Handshaking</a></h3>
<p>
When Web servers call CGI programs, they supply information
including the full path referenced.
The <a href="#vquery"><i>vquery</i> program</a>
removes the first part of the path to identify a Vision
session.  The remainder of the path is passed as an input to this
session.  For example, if your server's name is <i>www.myserver.com</i>
and you are using the <i>vquery</i> program to talk to the default
Vision session, the URL in your <i>HREF</i> statement could 
contain:<pre><tt><b>
     http://www.myserver.com/cgi-bin/vquery/default/report1@param1@param2
</b></tt></pre>
The <i>vquery</i> program strips the path through <i>default</i>
to determine which Vision session to use,
then passes the remaining string to the Vision session for parsing and
execution.
<p>
If your Web document contains an <i>ACTION</i> statement that
references a CGI program, the inputs from the form are passed
to this program as a string of name/value pairs in the form:<pre><tt>
     control1=value1&control2=value2&control3=value3
</tt></pre>
All explicit and hidden control values are shipped.  The CGI
program must arrange to pass these inputs to Vision.  The
<i>vquery</i> program supplies this string directly to Vision,
allowing Vision to handle all aspects of parameter validation and
document preparation.
<p>
Path and query strings may exist.  The <i>vquery</i> program will
ship both strings to a Vision session which will interpret these
inputs, execute the request, and prepare a document that can be 
read by an Html browser.  The document is returned to <i>vquery</i>
which then returns it to the browser.
<p>
<hr>
<h3><a name="access">The <b>Interface HtmlAccess</b> Class</a></h3>
<p>
The class <b>Interface HtmlAccess</b> supplies the protocol needed
to parse inputs from Html forms and links and produce a document
that can be interpretted by an Html browser.  
<p>
After stripping the session information from the supplied path,
the <a href="#vquery"><i>vquery</i> program</a> passes the
remainder of the path, the query string associated
with a form, the remote host, and remote address of the
client to the appropriate Vision session using the 
expression:  <pre><tt><b>
	Interface HtmlAccess
           get: "PATH_INFO"
           usingQuery: "QUERY_STRING"
           for: "REMOTE_HOST"
           at: "REMOTE_ADDR" ;
</b></tt></pre>
<p>
The method <i>get:usingQuery:for:at:</i> 
parses the PATH_INFO and QUERY_STRING strings and generates an HTTP
response containing an HTML document as its content.  The following
steps are executed:
<p>
<ol type="1">
<li>Parse the PATH_INFO and QUERY_STRING parameters to determine the
name of the application to run and any parameter values.
<li>Set the application name and parameter values in the 
<a href="tkInterface.htm#apps"><b>ApplicationWS</b></a>
associated with this Vision session.
<li>Display Html page header information.
<li>Run the requested application with the supplied inputs and
display the results.  
<li>Display Html page footer information.
</ol>
<p>
<h4><a name="parsing">Parsing the Strings</a></h4>
<p>
The <i>get:usingQuery:for:at:</i> 
method assumes that the PATH_INFO string is supplied in the
format:<pre><tt>
     ApplicationName@Parameter1@Parameter2@...@ParameterN
</tt></pre>
where any number of parameters can be supplied, separated by the @
character.  For example, if the URL in your <i>HREF</i> statement 
contains:<pre><tt>
     http://www.myserver.com/cgi-bin/vquery/default/Profile@Company@IBM
</tt></pre>
the PATH_INFO would contain: <i>/Profile@Company@IBM</i>.  The
method strips off the leading "/",
then breaks this string into substrings using the @ character as
its delimiter.  The first substring (i.e., <i>Profile</i> )
represents the name of the application to run.  The remaining strings
represent the parameter list for this application.  The
messages <i>setApplicationTo:</i> and <i>setParameterListTo:</i>
are executed to store these values in the current
<a href="tkInterface.htm#apps"><b>ApplicationWS</b></a>.
<p>
The <i>get:usingQuery:for:at:</i> 
method assumes that the QUERY_STRING string is supplied in the
format:<pre><tt>
     control1=value1&control2=value2&control3=value3&...
</tt></pre>
where the <i>control</i> strings represent the names of controls
on the Html form submitted and the <i>value</i> strings are the
corresponding values supplied for these controls.  For example,
the submitted form could supply the following name/value pairs:
<p>
<Center><table width="45%" border="1" cellspacing="2" cellpadding="8">
<tr>
<th>Name<th>Value
<tr>
<td>appName
<td>Profile
<tr>
<td>classId
<td>Company
<tr>
<td>id
<td>IBM
</tr></table></Center>
<p>
This information would be supplied to Vision as the string
<i>appName=Profile&classId=Company&id=IBM</i>.
The <i>get:usingQuery:for:at:</i> method breaks this string into
name/value pairs.  The input named <i>appName</i> is assumed to
be the application to run.  The remaining inputs represent parameter
values for this application.  The
messages <i>setApplicationTo:</i> and <i>set:to:</i>
are executed to stored these values in the current
<a href="tkInterface.htm#apps"><b>ApplicationWS</b></a>.
If the query string includes a control id named <i>globalDate</i>,
its value is used to 
<a href="tkInterface.htm#globals">set the value of the global date</a>
for the <b>Interface</b> class.
If the query string includes a control id named <i>globalCurrency</i>,
its value is used to 
<a href="tkInterface.htm#globals">set the value of the global currency</a>
for the <b>Interface</b> class.
<p>
If both the PATH_INFO and QUERY_STRING are present, the application
associated with the PATH_INFO string is the one that is executed.
<p>
<h4><a name="output">Preparing the Output</a></h4>
<p>
When the application is run, a document in the following format is 
generated:<pre><tt><b>
     Content-Type: text/html

     &ltHTML&gt
     &ltHEAD&gt
     &ltTITLE&gt title based on inputs goes here &lt/TITLE&gt
     &lt/HEAD&gt
     &ltBODY&gt
     &ltH2&gt standard title goes here &lt/H2&gt&ltHR&gt

         output from ApplicationWS formatted with HTML tags

     &lt/BODY&gt&lt/HTML&gt
</b></tt></pre>
An appropriate Html header and footer is created to surround the
output from the application.  The application itself is executed
within a 
<a href="#format"><i>FormatTools Html evaluate:</i> block</a>
so that any display tags are generated for Html.
<p>
<h4><a name="conventions">Passing Information to Vision: Summary</a></h4>
<p>
<p>
<ol type="1">
<li>
<i>HREFs</i> used with anchors should be formed using:<pre><tt>
   http://servername/cgi-bin/vquery/default/appName@p1@p2@p3...

</tt></pre>
<li>To ship inputs from a form, the <i>ACTION</i> statement should
be formed using:<pre><tt>
   http://servername/cgi-bin/vquery/
</tt></pre>
The form should contain a control (hidden or visible) named
<i>appName</i> that specifies the name of the application to run.
<p>
<li>If the query string includes the name
<i>globalDate</i>, it is used to set the value of the Global date
for the <b>Interface</b> class.
<p>
<li>If the query string includes the name
<i>globalCurrency</i>, it is used to set the value of the Global
currency for the <b>Interface</b> class.
</ol>

<p>
<hr>
<h3><a name="format">The <b>FormatTools Html</b> Class</a></h3>
<p>
The class
<b>FormatTools Html</b> redefines various
<a href="tkInterface.htm#format">formatting messages</a> to 
include the appropriate Html tags.  Recall that the
<b>FormatTools</b> class can be used to provide a modular approach 
to output generation.  The various formatting messages have 
a default mode and an Html version.  For example the expression:<pre><tt><b>
     FormatTools bold: "this string" . print ;
</b></tt></pre>
displays the supplied string with no special formatting.  The 
expression: <pre><tt><b>
     FormatTools Html
          evaluate: [ FormatTools bold: "this string" . print ] ;
</b></tt></pre>
displays the supplied string within <i>&ltb&gt</i> and <i>&lt/b&gt</i> tags.
A description of the various <b>FormatTools</b> messages and their
default and Html behavior is presented in the document
<a href="tkInterface.htm#format"><i>Vision ToolKit Class: Interface</i></a>.

<p>
<h4><a name="links">Embedding Links in Vision Documents</a></h4>
<p>
The general format for an Html link is:<pre><tt><b>
     &lta HREF=URL&gt label &lt/a&gt
</b></tt></pre>
where URL is the name of the server that connects to Vision plus any
additional information you wish to send.  This is the format 
<a href="#io">described earlier</a> that is used to run <i>vquery</i>
and pass a string containing the application name and parameters to
a running Vision session.  For example:<pre><tt>
     http://www.myserver.com/cgi-bin/vquery/default/Profile@Company@IBM
</tt></pre>
In this case the server runs the CGI program <i>vquery</i> which
submits the string <i>/Profile@Company@IBM</i> to the default
session.  If you want to define a link within the <i>Profile</i>
method that runs <i>Profile2</i>, you could include the following
print statements in your Vision code:<pre><tt><b>
   "&lta HREF='http://myserver/cgi-bin/vquery/default/" print ;
   "Profile2@IBM'&gt" print ;
   "IBM Profile 2 Link" print ;
   "&lt/a&gt" printNL ;
</b></tt></pre>
When this report is displayed in your Web Browser, the text 
<b><i>IBM Profile 2 Link</i></b> will be represented as an anchor.  If you
click on this link, <i>vquery</i> will ship the string
<i>Profile2@IBM</i> to Vision .  When Vision receives this
information, it sets the current application to <i>Profile2</i> with
the parameter <i>IBM</i> and returns the document created.  The
<i>Profile2</i> method must be defined at the <b>ApplicationWS</b>
class.  For example:<pre><tt><b>
     Interface ApplicationWS defineMethod: [ | Profile2 | 
          !id <- parameterList at: 1 ;     #- IBM
          id as: ^global Company .
          do: [ "This is Profile 2 for: " print ; 
                displayInfo ;
              ] ;
     ] ;
</b></tt></pre>
<p>
<h4><a name="linkMessages">FormatTools: Link Creation Messages</a></h4>
<p>
A number of messages have been defined for the
<b>FormatTools</b> class that aid in producing the links:
<p>
<hr size=1>
<i>buildLinkForApp: app withLabel: label andParams: plist</i>
<p>
This message creates an Html anchor.  The server URL is formed using current 
<a href="#settings">session settings</a> followed by the application
name and any parameters, separated by the @ character.
This message formats an Html anchor statement in the form:<pre><tt>
   &lta href=
      "http://server/cgi-bin/vquery/SESSION/app@p1@p2@p3/?globalDate=yyyymmdd"
   &gtlabel&lt/a&gt
</tt></pre>
<p>
<hr size=1>
<i>buildLinkForApp: app withLabel: label </i>
<p>
This message creates an Html anchor.  The server URL is formed using current 
<a href="#settings">session settings</a> followed by the application
name.
This message formats an Html anchor statement in the form:<pre><tt>
   &lta href=
      "http://server/cgi-bin/vquery/SESSION/app/?globalDate=yyyymmdd"
   &gtlabel&lt/a&gt
</tt></pre>
<p>
<hr size=1>
<i>buildLink: link withLabel: label </i>
<p>
This message creates an Html anchor.  The <i>link</i> parameter is 
displayed as the URL of the <i>HRef</i> attribute.  This string is
displayed inside double quotes.  
This message formats an Html anchor statement in the form:<pre><tt>
   &lta href="link"&gtlabel&lt/a&gt
</tt></pre>
<p>
<hr size=1>
<i>buildLink: link withPath: path withLabel: label</i>
<p>
This message creates an Html anchor.  The <i>path</i> and
<i>link</i> values are used to generate the URL for the <i>HRef</i>
attribute.
<p>
<hr size=1>
<i>buildImage: file withPath: path withAlt: alt</i>
<p>
This message creates an Html image statement in the form:<pre><tt>
   &ltimg src="imageFile" alt="alt" &gt
</tt></pre>
where the string <i>imageFile</i> is generated using the <i>file</i>
and <i>path</i> parameters.
</tt></pre>

<p>
<hr>
<h3><a name="execution">Putting the Pieces Together</a></h3>
<p>
If you use <a href="#vquery"><i>vquery</i></a> as your bridging program,
the assumption is that you have one or more Vision sessions running
listening for inputs on known sockets.  This information is recorded
in <i>vquery</i>'s <a href="#config">configuration file</a>.  Any
Vision session can open a unique listener socket for this purpose.
In addition, there are a number of session parameters you can set that 
control the URL links created and other aspects of the document generated.
<p>
A typical Vision script used to start one of these sessions is
displayed below:<pre><tt><b>
     ####################
     #   Vision Script for a Session referenced by vquery
     ####################

     #--------------------
     #  Establish a known channel - edit for each session started
     #--------------------
     !listener <- "inet/stream,p:7001" asOpenVisionChannel;
     listener enableHandler;
     listener displayInfo;

     #--------------------
     #  set various session attributes that control flow
     #--------------------
     Interface HtmlAccess
       setServerTo: "http://www.myserver.com" .
       setPathTo: "default/" .
       setHomePathTo: "http://www.myserver.com/VFReport.htm" .
       setResourcePathTo: "http://www.myserver.com/Misc" .
       setTitleTo: "Vision Demo" .
     ;

</b></tt></pre>
The first part of this script establishes socket 7001 on this machine
as the handle for this session.  The second part of this script
sets various parameters which control some of the output preparation.
These attribute setting messages are described below.  There should
be an entry in the <i>vquery.cfg</i> file that 
contains:<pre><tt>     server default fred:7001
</tt></pre>
assuming that this session is running on host <i>fred</i>.
<p>
<hr size=1>
<i>setServerTo:</i>
<p>
This message sets the name of the server used in forming the URL
generated by the <i>buildLinkForApp:</i> message variations.
<p>
<hr size=1>
<i>setCgiExeTo:</i>
<p>
This message sets the name of the cgi-bin program to run.  By default,
this value is "/cgi-bin/vquery/" in the server's directory.
<p>
<hr size=1>
<i>setPathTo:</i>
<p>
This message sets the name of the session to display following the
server name when forming the URL generated by the
<i>buildLinkForApp:</i> message variations,
and represents the symbolic name used by <i>vquery</i> 
to determine which session to connect to for the link.
By default, the path is "default/".
<p>
<hr size=1>
<i>setVisionPathTo:</i>
<p>
This message is used to create the full URL of the bridging program
to run and can be set explicitly for the session.  It is
automatically run whenever the server or path is reset.
<p>
<hr size=1>
<i>setHomePathTo:</i>
<p>
This message is used to set the URL that represents the home page
link displayed at the end of every document generate via this
interface.
<p>
<hr size=1>
<i>setResourcePathTo:</i>
<p>
This message sets the name of the directory from which to load
image and other files, referenced within you documents.
<p>
<hr size=1>
<i>setTitleTo:</i>
<p>
This message is used to set the title displayed at the start of each
document.
<p>
<hr size=1>
<i>setApplicationWSTo:</i>
<p>
This message is used to redefine the <a href="tkInterface.htm#apps">
<b>ApplicationWS</b></a> used for locating application methods
and caching parameter values.  By
default, <b>Interface ApplicationWS</b> is used.  You can use this 
message to reset the workspace to any 
<a href="tkInterface.htm#appMulti">named subclass or instance</a> of
<b>ApplicationWS</b>.
<p>
<hr size=1>
<i>setTopLogoTo:</i>
<p>
This message is used to define the name of an image file that will
appear at the top of every document.  By default, no logo is displayed.
<p>
<hr size=1>
<i>setTopBarTo:</i>
<p>
This message is used to define the name of an image file that will
separate the document title from the rest of the document body.
By default, a standard horizontal line is drawn.
<p>
<hr size=1>
<i>setBottomBarTo:</i>
<p>
This message is used to define the name of an image file that will
separate the document footer from the rest of the document body.
By default, a standard horizontal line is drawn.
<p>
<hr>
<h3><a name="vquery">The <i>vquery</i> Program</a></h3>
<p>
<i>vquery</i> is a CGI (Common Gateway Interface) program used to access
Vision databases from any Web Server that can call a CGI compatible
program.  As a CGI program, <i>vquery</i> sits between the Web server and
Vision.  When invoked by the server, <i>vquery</i> is passed a URL (Uniform
Resource Locator) for the document it is to return.  It uses that URL
to locate a Vision session capable of producing the Html
document addressed by that URL.  <i>vquery</i> passes the
part of the URL it does not use to the Vision session along with the
name and address of the client making the request.  It returns the
output from Vision as the document.  
<p>
<h4>How <i>vquery</i> Calls Vision</h4>
<p>

When Web servers call CGI programs, they pass a URL along with a
number of additional parameters that supply information about the
server and the client.  Five of the many parameters passed from the
server are examined by <i>vquery</i> -- PATH_INFO, QUERY_STRING,
REQUEST_METHOD, REMOTE_HOST, and REMOTE_ADDR.  The first component of
the path contained in PATH_INFO is removed by <i>vquery</i> and is used
to identify a Vision session.  <i>vquery</i>'s logic for doing that
is described later in this section.  The part of the path not used
by <i>vquery</i>, the parameters passed as part of the URL, and the
symbolic name (REMOTE_HOST) and address (REMOTE_ADDR) of the client
making the request are passed to the Vision session using the
request:  <pre><tt><b>
	Interface HtmlAccess
           get: "PATH_INFO"
           usingQuery: "QUERY_STRING"
           for: "REMOTE_HOST"
           at: "REMOTE_ADDR" ;
</b></tt></pre>
<p>
The default implementation of the <i>get:usingQuery:for:at:</i> method
parses the PATH_INFO and QUERY_STRING strings and generates an HTTP
response containing an HTML document
as its content.  The current implementation of this method does not
use either the REMOTE_HOST or REMOTE_ADDR strings.  These strings
identify the name and IP address of the host originating the request
and could be used for simple response customization, query logging,
or data filtering.  
<p>
<h4>How <i>vquery</i> finds a Vision session to call</h4>
<p>
To service a request, <i>vquery</i> does not start a Vision session.
It expects one or more Vision sessions to be running already.  Each
of those sessions must be listening for requests at an address that
<i>vquery</i> can discover.  <i>vquery</i> discovers that address by
examining the first component of the URL's path and an optional
configuration file.  
<p>
In its simplest and least flexible form, the path component examined
by <i>vquery</i> can simply be the name of a host combined with the
number or name of a port on that host:  <pre><tt>
	/fred:7001/VReport/xyz
or
	/fred:vqueryport/VReport/xyz
</tt></pre>
<p>
The first example above attempts to find a Vision session listening
at port 7001 on host <i>fred</i>; the second example assumes that a TCP port
named <i>vqueryport</i> has been added to the <i>/etc/services</i> file and
that a Vision session is listening at that port on host <i>fred</i>.  
<p>
<a name="config"> </a>
The absolute address form is the simplest to start using and the most
difficult to administer.  As more documents are created with these
absolute addresses 'wired-in', the task of changing the address of
the server goes from formidable to impossible.  To avoid this
problem, <i>vquery</i> supports the use of symbolic names resolved
with the help of a configuration file.  The first example above can
be restated using a symbolic name:  <pre><tt><b>
	/localvision/VReport/xyz
</b></tt></pre>
assuming that the configuration file <i>/vision/lib/vquery.cfg</i> exists
and contains a line that reads:  <pre><tt><b>
	server localvision fred:7001

</b></tt></pre>
Now only the name <i>localvision</i> is locked into the documents created to
access Vision.  Changing the server simply involves changing the
configuration file.  The configuration file can also be used to
declare multiple servers accessing multiple data bases and to direct
specific users to specific servers.  
<p>
Every configuration file can contain multiple server statements.
Each server statement associates a symbolic name with a server
address.  In the previous example, the symbolic name is
<i>localvision</i>; a server for <i>localvision</i> is <i>fred:7001</i>.  
The same symbolic name can be
used in a more than one server statement.  The configuration file:<pre><tt><b>
	server localvision fred:7001
	server localvision fester:7001
</b></tt></pre>
defines two servers for <i>localvision</i>.  When <i>vquery</i> encounters a
URL naming <i>localvision</i> as its session target, it picks one of these
servers at random.  If that server does not respond, <i>vquery</i>
will try the other.  Using this strategy, <i>vquery</i> can
distribute requests across multiple servers, potentially running on
multiple hosts.  
<p>
The configuration file can also be used to provide symbolic name
resolution for multiple data bases.  The following configuration file
defines three servers servicing two destinations:  </b></tt></pre>
	server localvision fred:7001
	server localvision fester:7001
	server testdata    fester:7002
</b></tt></pre>
<p>
Presumably, the servers for <i>localvision</i> are accessing one database
while the server for <i>testdata</i> is accessing another although that is
not strictly necessary.  
<p>
The configuration file can be used to direct specific users to
specific servers.  The following configuration file directs requests
based on the host from which they came.  In this example, requests
originating from <i>pc995</i> are sent to either <i>server1</i> or 
<i>server2</i> at random; 
all other requests are sent to either <i>fred</i> or <i>fester</i>:<pre><tt><b>
	server localvision server1:7001 pc995
	server localvision server2:7001 pc995
	server localvision fred:7001
	server localvision fester:7001
</b></tt></pre>
<p>
In this example, requests from <i>pc995</i> are the only requests
that can go to <i>server1</i> or <i>server2</i>.  Furthermore, if
either <i>server1</i> or <i>server2</i> is available to service a
request from <i>pc995</i>, it will get the request.  If neither
<i>server1</i> nor <i>server2</i> is available, however, a request
from <i>pc995</i> will be sent to either <i>fred</i> or
<i>fester</i>.  
<p>
Finally, <i>vquery</i> can be used to prioritize access to servers
based on subnet addresses.  The following configuration file creates
a prioritized server for each of three 24 bit subnets of a class B
network along with a server that backs up the subnet servers and acts
as a server for all other users:  <pre><tt><b>
	server localvision subserver1:7001 129.1.1 24
	server localvision subserver2:7001 129.1.2 24
	server localvision subserver3:7001 129.1.3 24
	server localvision baseserver:7001 129.1   16
</b></tt></pre>
<p>
Note that only users running on hosts with a network address that
begins with <i>129.1</i> can access a server using the symbolic name
localvision.  Users with other network addresses who specify the
localvision session target will not be connected to any of these
servers.  Note, however, that this is not a security mechanism since
<i>vquery</i> will continue to forward requests that use host:port
formatted URLs to the server designated by the URL.  
<p>
<h4>Where <i>vquery</i> and its configuration file belong</h4>
<p>
By default, <i>vquery</i> is shipped in the /vision/tools directory.
It should be installed in whatever directory the Web server expects
to find its CGI programs.  By default, the configuration file for
<i>vquery</i> is <i>/vision/lib/vquery.cfg</i>.  That file can be relocated
to a different directory provided that the environment variable
<i>VQueryConfig</i> is set to the path name of the configuration file.  If
<i>VQueryConfig</i> is used to relocate the configuration file, it must be
set either as a configuration option of a Web server that can set
additional environment variables for its CGI programs or before the
Web server is started.  
<p>
<h4>Customizing the configuration file</h4>
<p>
You have the ability to override the default class in the <i>vquery.cfg</i>
file.  The recipient Vision class can be overridden for all 
destinations in a configuration file using the <i>default class</i> 
directive.  The recipient Vision class can be overridden for a 
specific destination using the <i>class &ltdest&gt</i> directive.  The 
following example illustrates both:<pre><tt><b>
           default class   UserInterface HyperWS

           server default  pugsley:7001
           server test     pugsley:8010

           server demo     pugsley:7200
           class  demo     Interface HtmlAccess

</b></tt></pre>
As expected, when both a <i>class &ltdest&gt</i> directive and a 
<i>default class</i>
directive are present in the same file, the <i>class &ltdest&gt</i> directive
overrides the <i>default class</i> directive for the destination to which it
applies. When multiple servers are created to handle a destination, the
same class specification applies to all of the them.  For example, the
<i>class analyzer</i> statement in the following example:<pre><tt><b>
           server analyzer pugsley:7010
           server analyzer lurch:7010
           class  analyzer UserInterface HyperWS
</b></tt></pre>
applies to both <i>analyzer</i> servers.
<p>
The default expression sent to Vision can now be specified as an
option in the <i>vquery.cfg</i> file.  The syntax used to specify that
expression includes the ability to substitute the values of any or
all environment variables as well as certain other information.  
<p>
Two new commands have been added to the set of commands recognized in a
<i>vquery.cfg</i> file.  The command:<pre><tt><b>
           default expression aVisionExpressionSpecification
</b></tt></pre>
establishes a Vision expression to use by default for any service
destination that does not supply its own specification.  Any service
that requires a different expression can override the default expression
using the directive:<pre><tt><b>
           expression aServiceName aVisionExpressionSpecification

</b></tt></pre>
Both the <i>default expression</i> and <i>expression</i> directives must be
included on a single input line.  <b>Note that there
 is no provision for escaping a long expression across multiple lines</b>.
<p>
If a <i>default expression</i> directive does not appear in a <i>vquery.cfg</i>
file, vquery behaves as if the following default expression were
supplied:<pre><tt><b>
          default expression $$class get: $$path usingQuery: $$query for:
              $REMOTE_HOST at: $REMOTE_ADDR

</b></tt></pre>
This default <i>default expression</i> specifies the expression that vquery
has historically generated.  In particular, it specifies that the
message <i>get:usingQuery:for:at:</i> be sent to the class specified by the
<i>class</i> directive for the service.  The parameters to that message are
obtained by substituting data available from vquery's environment.
<p>
The substitution rules are straightforward.  Except for the <i>$$class</i>
substitution, all substitutions are formatted as Vision strings with
embedded " and \ characters suitably quoted to keep Vision happy.  All
substitutions begin with a '$' followed by a symbol that names an
environment variable or special substitution.   A substitution that
begins with a single '$' is assumed to name an environment variable.  
If the environment variable exists, its value is substituted as a string
into the expression generated and sent to Vision.  The <i>$REMOTE_HOST</i>
and <i>$REMOTE_ADDR</i> substitutions above are examples of environment
variable substitutions.  If the environment variable does not exist, an
empty string is substituted.  As vquery is currently implemented, there
is no way to distinguish between a non-existent environment variable and
one that is defined to have an empty value.
<p>
In addition to environment variable substitution, vquery recognizes four
special substitutions:
<p><Center><table width="90%" border="1" cellspacing="2" cellpadding="8">
<tr>
<td><b>Variable</b>
<td><b>Definition</b>
</tr>

<tr>
<td><i>$$class</i>
<td>substitute the class specified by the <i>default class</i> or
<i>class</i> directive applicable to the service.  In the absence
of either, <i>Interface HtmlAccess</i> is assumed.  The <i>$$class</i>
substitution is the only substitution that is NOT formatted 
as a string in the expression generated and sent to Vision.
<tr>
<td><i>$$path</i>
<td>substitute the part of the URL path left after vquery has
stripped it of its service name and/or address component.
<tr>
<td><i>$$query</i>
<td>substitute the form input data supplied as part of the
request.  Because different form request methods use different 
mechanisms for passing form data, this substitution should be 
used instead of the $QUERY_STRING environment variable substitution
to obtain form input data.
<tr>
<td><i>$$environment</i>
<td>substitute the entire set of environment variable
bindings available to vquery.  Each environment variable is 
supplied one per line in the form <i>name=value</i>.
</tr></table></Center>
<p>
The <i>vquery</i> source code is provided as part of the 
<a href="ifDownload.htm#ifVQuery"> vquery download module</a> 
for users who wish to modify it for their own purposes.
Instructions for compiling it on different systems are supplied at
the top of <i>vquery.cpp</i>.
<p>
<hr>
<table border=0 width="100%">
<tr>
<td align=left><font size=-1>Copyright &copy 1997 Innovative Systems Techniques, Inc.</font>
<td align=right><font size=-1>Updated September 20, 1997</font>

</table>

</body>
</html>
