---
title: "Vision Interfaces: Sample Html Access"

sidebar:
  nav: "sb_UsingVision"
---

<h2 id="overview">Overview</h2>
<p>
Web browsers such as Netscape and Internet Explorer offer an
excellent mechanism for delivering documents that can be dynamically
generated by Vision.  The 
<a href="tkInterface.htm"><b>Interface</b> and <b>FormatTools</b></a>
ToolKits provide a means for standardizing your requests for
information and returning the results in a form that can be
displayed by a browser.
<p>
In general, you can use Html and its numerous extensions such
as <i>JavaScript</i> and <i>Java</i> applets to design interfaces
that request specific inputs from a user.  These inputs can be
submitted to Vision via a <i>cgi</i> or alternative interface
program to access the appropriate 
information from Vision, dynamically generated
based on the inputs supplied and formatted
correctly for the browser.  The returned documents can have embedded
links to other documents, including requests for additional
information from your Vision database.
<p>
The basic mechanism for navigating from one Html document to another is
by embedding the URL of a target document in the source document.  In 
addition to referencing specific pre-formatted documents, this URL
can be used to specify a program that communicates inputs from the
document to Vision and returns a new document to the browser.  The
URL can be associated with the <i>HREF</i> attribute of an anchor.
It can also be used as the value of the <i>ACTION</i> attribute of a form.
In the latter case, the values of the controls in the form are also
shipped.
<p>
<hr>
<h2 id="access">The <b>Interface HtmlAccess</b> Class</h2>
<p>
The class <b>Interface HtmlAccess</b> supplies the protocol needed
to parse inputs from Html forms and links and produce a document
that can be interpretted by an Html browser:
<pre>
  Interface HtmlAccess
     get: "PATH_INFO"
     usingQuery: "QUERY_STRING"
     for: "REMOTE_HOST"
     at: "REMOTE_ADDR" ;
</pre>
<p>
The method <i>get:usingQuery:for:at:</i> 
parses the PATH_INFO and QUERY_STRING strings and generates an HTTP
response containing an HTML document as its content.  The following
steps are executed:
<p>
<ol type="1">
<li>Parse the PATH_INFO and QUERY_STRING parameters to determine the
name of the application to run and any parameter values.
<li>Set the application name and parameter values in the 
<a href="tkInterface.htm#apps"><b>ApplicationWS</b></a>
associated with this Vision session.
<li>Display Html page header information.
<li>Run the requested application with the supplied inputs and
display the results.  
<li>Display Html page footer information.
</ol>
<p>
<h3 id="parsing">Parsing the Strings</h3>
<p>
The <i>get:usingQuery:for:at:</i> 
method assumes that the PATH_INFO string is supplied in the
format:
<pre>
  ApplicationName@Parameter1@Parameter2@...@ParameterN
</pre>
where any number of parameters can be supplied, separated by the @
character.  For example, if the URL in your <i>HREF</i> statement 
contains:
<pre>
  http://www.myserver.com/.../Profile@Company@IBM
</pre>
the PATH_INFO would contain: <i>/Profile@Company@IBM</i>.  The
method strips off the leading "/",
then breaks this string into substrings using the @ character as
its delimiter.  The first substring (i.e., <i>Profile</i> )
represents the name of the application to run.  The remaining strings
represent the parameter list for this application.  The
messages <i>setApplicationTo:</i> and <i>setParameterListTo:</i>
are executed to store these values in the current
<a href="tkInterface.htm#apps"><b>ApplicationWS</b></a>.
<p>
The <i>get:usingQuery:for:at:</i> 
method assumes that the QUERY_STRING string is supplied in the
format:
<pre>
  control1=value1&control2=value2&control3=value3&...
</pre>
where the <i>control</i> strings represent the names of controls
on the Html form submitted and the <i>value</i> strings are the
corresponding values supplied for these controls.  For example,
the submitted form could supply the following name/value pairs:
<p>
<Center><table width="45%" border="1" cellspacing="2" cellpadding="8">
<tr>
<th>Name<th>Value
<tr>
<td>appName
<td>Profile
<tr>
<td>classId
<td>Company
<tr>
<td>id
<td>IBM
</tr></table></Center>
<p>
This information would be supplied to Vision as the string
<i>appName=Profile&classId=Company&id=IBM</i>.
The <i>get:usingQuery:for:at:</i> method breaks this string into
name/value pairs.  The input named <i>appName</i> is assumed to
be the application to run.  The remaining inputs represent parameter
values for this application.  The
messages <i>setApplicationTo:</i> and <i>set:to:</i>
are executed to stored these values in the current
<a href="tkInterface.htm#apps"><b>ApplicationWS</b></a>.
If the query string includes a control id named <i>globalDate</i>,
its value is used to 
<a href="tkInterface.htm#globals">set the value of the global date</a>
for the <b>Interface</b> class.
If the query string includes a control id named <i>globalCurrency</i>,
its value is used to 
<a href="tkInterface.htm#globals">set the value of the global currency</a>
for the <b>Interface</b> class.
<p>
If both the PATH_INFO and QUERY_STRING are present, the application
associated with the PATH_INFO string is the one that is executed.
<p>
<h3 id="output">Preparing the Output</h3>
<p>
When the application is run, a document in the following format is 
generated:
<pre>
  Content-Type: text/html

  &ltHTML&gt
  &ltHEAD&gt
  &ltTITLE&gt title based on inputs goes here &lt/TITLE&gt
  &lt/HEAD&gt
  &ltBODY&gt
  &ltH2&gt standard title goes here &lt/H2&gt&ltHR&gt

      output from ApplicationWS formatted with HTML tags

  &lt/BODY&gt&lt/HTML&gt
</pre>
An appropriate Html header and footer is created to surround the
output from the application.  The application itself is executed
within a 
<a href="#format"><i>FormatTools Html evaluate:</i> block</a>
so that any display tags are generated for Html.
<p>
<h3 id="conventions">Passing Information to Vision: Summary</h3>
<p>
<p>
<ol type="1">
<li>
<i>HREFs</i> used with anchors should be formed using:
<pre>
  http://servername/.../appName@p1@p2@p3...
</pre>
The form should contain a control (hidden or visible) named
<i>appName</i> that specifies the name of the application to run.
<p>
<li>If the query string includes the name
<i>globalDate</i>, it is used to set the value of the Global date
for the <b>Interface</b> class.
<p>
<li>If the query string includes the name
<i>globalCurrency</i>, it is used to set the value of the Global
currency for the <b>Interface</b> class.
</ol>

<p>
<hr>
<h2 id="format">The <b>FormatTools Html</b> Class</h2>
<p>
The class
<b>FormatTools Html</b> redefines various
<a href="tkInterface.htm#format">formatting messages</a> to 
include the appropriate Html tags.  Recall that the
<b>FormatTools</b> class can be used to provide a modular approach 
to output generation.  The various formatting messages have 
a default mode and an Html version.  For example the expression:
<pre>
  FormatTools bold: "this string" . print ;
</pre>
displays the supplied string with no special formatting.  The 
expression:
<pre>
  FormatTools Html
       evaluate: [ FormatTools bold: "this string" . print ] ;
</pre>
displays the supplied string within <i>&ltb&gt</i> and <i>&lt/b&gt</i> tags.
A description of the various <b>FormatTools</b> messages and their
default and Html behavior is presented in the document
<a href="tkInterface.htm#format"><i>Vision ToolKit Class: Interface</i></a>.

<p>
<h3 id="links">Embedding Links in Vision Documents</h3>
<p>
The general format for an Html link is:
<pre>
  &lta HREF=URL&gt label &lt/a&gt
</pre>
where URL is the name of the server that connects to Vision plus any
additional information you wish to send.  For example:
<pre>
  http://www.myserver.com/.../Profile@Company@IBM
</pre>
If you want to define a link within the <i>Profile</i>
method that runs <i>Profile2</i>, you could include the following
print statements in your Vision code:
<pre>
  "&lta HREF='http://myserver/.../" print ;
  "Profile2@IBM'&gt" print ;
  "IBM Profile 2 Link" print ;
  "&lt/a&gt" printNL ;
</pre>
When this report is displayed in your Web Browser, the text 
<b><i>IBM Profile 2 Link</i></b> will be represented as an anchor.  If you
click on this link, your server should ship the string
<i>Profile2@IBM</i> to Vision .  When Vision receives this
information, it sets the current application to <i>Profile2</i> with
the parameter <i>IBM</i> and returns the document created.  The
<i>Profile2</i> method must be defined at the <b>ApplicationWS</b>
class.  For example:
<pre>
  Interface ApplicationWS defineMethod: [ | Profile2 | 
       !id <- parameterList at: 1 ;     #- IBM
       id as: ^global Company .
       do: [ "This is Profile 2 for: " print ; 
             displayInfo ;
           ] ;
  ] ;
</pre>
<p>
<h3 id="linkMessages">FormatTools: Link Creation Messages</h3>
<p>
A number of messages have been defined for the
<b>FormatTools</b> class that aid in producing the links:
<p>
<hr size=1>
<i>buildLinkForApp: app withLabel: label andParams: plist</i>
<p>
This message creates an Html anchor.  The server URL is formed using current 
<a href="#settings">session settings</a> followed by the application
name and any parameters, separated by the @ character.
This message formats an Html anchor statement in the form:
<pre>
  &lta href=
     "http://server/.../app@p1@p2@p3/?globalDate=yyyymmdd"
  &gtlabel&lt/a&gt
</pre>
<p>
<hr size=1>
<i>buildLinkForApp: app withLabel: label </i>
<p>
This message creates an Html anchor.  The server URL is formed using current 
<a href="#settings">session settings</a> followed by the application
name.
This message formats an Html anchor statement in the form:
<pre>
  &lta href=
     "http://server/.../app/?globalDate=yyyymmdd"
  &gtlabel&lt/a&gt
</pre>
<p>
<hr size=1>
<i>buildLink: link withLabel: label </i>
<p>
This message creates an Html anchor.  The <i>link</i> parameter is 
displayed as the URL of the <i>HRef</i> attribute.  This string is
displayed inside double quotes.  
This message formats an Html anchor statement in the form:
<pre>
  &lta href="link"&gtlabel&lt/a&gt
</pre>
<p>
<hr size=1>
<i>buildLink: link withPath: path withLabel: label</i>
<p>
This message creates an Html anchor.  The <i>path</i> and
<i>link</i> values are used to generate the URL for the <i>HRef</i>
attribute.
<p>
<hr size=1>
<i>buildImage: file withPath: path withAlt: alt</i>
<p>
This message creates an Html image statement in the form:
<pre>
  &ltimg src="imageFile" alt="alt" &gt
</pre>
where the string <i>imageFile</i> is generated using the <i>file</i>
and <i>path</i> parameters.
</pre>

{% include doc-footer.htm copydates="1997" %}
