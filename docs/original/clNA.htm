<!DOCTYPE html>
<html>
<head>
<title>Vision Class: Undefined (NA) </title>
</head>
<body bgcolor = white>
<h2>Vision Class: Undefined (NA)</h2>

<p>
     | <a href="FHome.htm">Home</a> | <a href="clXRef.htm">Class XRef</a> | <a href="clBoolean.htm">The Boolean Class</a> |
<hr> 
<h3>Topics Covered:</h3> 
<ul type=square> 
<li><a href="#overview">Overview</a>
<li><a href="#creation">Generating NA Values</a>
<li><a href="#message">NA Messages</a>
<li><a href="#conditional">NAs and Conditional Tests</a>
<li><a href="#subclass">Creating NA Subclasses</a>
<li><a href="#novalue">The <i>NoValue</i> Value</a>
<li><a href="#other">Related Topics</a>
</ul>
<p>
<hr>
<h3><a name="overview">Overview</a></h3> 
<p> 
The <b>Undefined</b> class has a single instance
that represents a value that is not available.  This
instance is named <i>NA</i>.  Any object can be compared to 
the <i>NA</i> object using the messages <i>isNA</i> and <i>isntNA</i>.
For example:
<p>
<ul>
<li><i>"x" isntNA print</i> ;
<li><i>NA isNA print</i> ;
<li><i>3 isNA print</i> ; 
<li><i>NA isntNA print</i> ;
</ul>
<p>
The first two examples return and print the value <i>TRUE</i>.
The last two examples return and print the value <i>FALSE</i>.
<p>
You cannot directly create new instances of the <i>Undefined</i> class.
You can, however, 
<a href="#subclass">create subclasses</a> of the <i>Undefined</i> class
which  have any number of instances.
<p>
The Undefined class is a direct subclass of Object:
<font size=+1><pre>
          <a href="clObject.htm">Object</a>
             |
             <b>Undefined</b>
                |
                |-- <a href="#novalue">NoValue</a>

</pre></font>

<p>
<hr>
<h3><a name="creation">Generating NA Values</a></h3>
<p>
The message <i>NA</i> is defined at the class <i>Object</i> to
return the object representing the <i>NA</i>
value.  <i>NA</i> values can be generated in a number of ways:
<p>
<ol type="1">
<li><a href="#init">All property values are initially <i>NA</i></a>
<li><a href="#assign">
The <i>NA</i> value can be assigned into a variable or property</a>
<li><a href="#return">A method or class constant can return an <i>NA</i></a>
</ol>
<p>
<a name="init"> </a>
When you define a 
<a href="Lang.htm#variable">variable</a>, a
<a href="Fund.htm#fixed">fixed property</a>, or a
<a href="Fund.htm#ts">time series property</a>,
its initial value is <i>NA</i>.  For example: <pre><tt><b>
     !variable ;
     variable print ;

</b>and<b>

     Currency defineFixedProperty: 'fixed' ;
     Named Currency USD fixed print ;

</b>and<b>

     Currency define: 'ts' ;
     Named Currency USD ts print ;
</b></tt></pre>
all return and print the value <i>NA</i>.
<p>
<a name="assign"> </a>
Since <i>NA</i> is just an object, it can be assigned as the value of
a property.  For example:<pre><tt><b>
     !variable <- 10 ;                     #- assign value
     variable print ;                      #- print it
     :variable <- NA ;                     #- assign NA
     variable print ;                      #- print it

</b>and<b>

     Named Currency USD :fixed <- 10 ;     #- assign value
     Named Currency USD fixed print ;      #- print it
     Named Currency USD :fixed <- NA ;     #- assign NA
     Named Currency USD fixed print ;      #- print it

</b>and<b>

     Named Currency USD :ts 
                asOf: 93 put: 10 ;         #- assign value
     Named Currency USD ts print ;         #- print it
     Named Currency USD :ts 
                asOf: 94 put: NA ;         #- assign NA
     Named Currency USD ts print ;         #- print it
</b></tt></pre>
<p>
<a name="return"> </a>
Many methods return <i>NA</i> values.  For example, the
<i>asDate</i> message defined at the class <i>Integer</i> returns
<i>NA</i> if the recipient integer cannot be converted to a valid
date:<pre><tt><b>
     9513 asDate whatAmI print ;
</b></tt></pre>
The arithmetic messages return <i>NA</i> if the recipient or parameter
value is <i>NA</i>.  For example:<pre><tt><b>
     9513 asDate asInteger + 5
</b></tt></pre>
returns the <i>NA</i> value because the expression <i>9513 asDate asInteger</i>
returns <i>NA</i> and adding <i>5</i> to <i>NA</i> returns <i>NA</i>.
<p>
You can define a class constant to return the <i>NA</i> value if
you want all instances of the class to return <i>NA</i> independent
of the instance.  For example: <pre><tt><b>
     String define: 'returnNA' toBe: NA ;
     "abc" returnNA print ;
</b></tt></pre>
returns and prints the value <i>NA</i>.
<p>
<hr>
<h3><a name="message">NA Messages</a></h3>
<p>
Most of the <a href="clNumber.htm#compute">numeric computation</a>
and <a href="clNumber.htm#convert">various conversion</a> messages have
been defined at the <i>NA</i> class to return the <i>NA</i> value.  
If you perform any calculation using <i>NA</i> as
the recipient or parameter, the <i>NA</i> value is returned.
For example the following calculations will all return
and print the <i>NA</i> value:<pre><tt><b>
     (3 + NA) print ;
     (NA * 5) print ;
     3 min: NA . print ;
     NA max: 5 . print ;
</b></tt></pre>
<p>
Many of the messages that convert objects from one class to another
are also defined at <i>NA</i> to return the <i>NA</i> value.
For example:<pre><tt><b>
     NA asInteger
</b></tt></pre>
returns the value <i>NA</i>.
<p>
<i>NA</i> is used as a value for many properties that contain
numeric data.  Therefore, when you define messages at one of the <i>Number</i>
classes, it is often useful to define the same message at the <i>NA</i>
class.  Normally the message returns the value <i>NA</i>.  For 
example:<pre><tt><b>
     Number defineMethod: [ | double | ^self * 2 ] ;
     NA define: 'double' toBe: NA ;
</b></tt></pre>
You can define the <i>double</i> message as a
<a href="Fund.htm#constant">class constant</a>
for the <i>NA</i> class since it always returns the <i>NA</i> value.
If you want to define a parameterized selector as a class constant,
use:<pre><tt><b>
     NA define: 'within:percentOf:' toBe: NA ;
</b></tt></pre>
Note that the message name must be a 
<a href="Lang.htm#names">valid selector</a>
with the ':' character following each parameter and no blank spaces
between the single quotes.

<p>
<hr>
<h3><a name="conditional">NAs and Conditional Tests</a></h3>
<p>
Several messages that perform conditional tests can be sent
to <i>NA</i>:
<p>
<ul type="disc">
<li><a href="mObject.htm#ifTrue:else:"><i>ifTrue:else:</i></a>
<li><a href="mObject.htm#ifFalse:else:"><i>ifFalse:else:</i></a>
<li><a href="mObject.htm#ifTrue:ifFalse:else:"><i>ifTrue:ifFalse:else:</i></a>
<li><a href="mNA.htm#elseIf:then:"><i>elseIf:then:</i></a>
<li><a href="mNA.htm#else:"><i>else:</i></a>
</ul>
<p>
If any of the first three of these messages is sent to <i>NA</i>,
the <i>else:</i> clause will be evaluated.  For example:<pre><tt><b>
     "10" asNumber > 5      # case 1
         ifTrue: [ " passes test " printNL ] 
           else: [ " fails test" printNL ] ;
     "abc" asNumber > 5     # case 2
         ifTrue: [ " passes test " printNL ] 
           else: [ " fails test" printNL ] ;
</b></tt></pre>
In case 1, the string <i>"10"</i> converts to a number greater than
5 so the <i>ifTrue:</i> clause is executed and the "passes test" message
is displayed.  In case 2, the string <i>"abc"</i> cannot be converted
to a number so the value <i>NA</i> is returned.  The test <i>NA > 5</i>
returns <i>NA</i>.  Since the value is not <i>TRUE</i>, the <i>else:</i>
clause is executed and the "fails test" message is displayed.
<p>
The messages <i>ifFalse:else:</i> and <i>ifTrue:ifFalse:else:</i>
work in a similar manner.  Note that the messages 
<i>ifTrue:</i>, <i>ifFalse:</i>, and <i>ifTrue:ifFalse:</i> 
are only defined for the 
<a href="clBoolean.htm#control"><i>Boolean</i> classes</a>.
If you send any of these messages to the <i>NA</i> object,
you will generate a <a href="Error.htm#snf"><i>Selector Not Found</i></a>
error.
<p>
<a name="else"> </a>
The messages <a href="mNA.htm#else:"><i>else:</i></a> and
<a href="mNA.htm#elseIf:then:"><i>elseIf:then:</i></a>
can be sent to any object.  When either message is sent to a
non-NA object, that object is returned.  
When the <i>else:</i> message is sent to an <i>NA</i>,
the parameter is returned.  If the parameter is a block, it
is evaluated before it is returned.  
When the <i>elseIf:then:</i> message is sent to an <i>NA</i>,
the first parameter is evaluated.  If it returns <i>TRUE</i>,
the second parameter is evaluated and returned, otherwise <i>NA</i> is
returned.  These two messages are often used in unison to
perform a series of conditional tests.  For example:<pre><tt><b>
   v isNumber
     ifTrue: [ "it's a number" ] else: [ NA ] .
     elseIf: [ v isString ] then: [ "it's a string"  ] .
     else: [ "Unknown object type" ] . 
     print ;
</b></tt></pre>
<p>
If the variable <i>v</i> is a number, the <i>ifTrue:</i> clause
will be evaluated.  This message returns the string <i>"it's a number"</i>
if it is evaluated; otherwise, the value <i>NA</i>
is returned.  If the string is returned,
the <i>elseIf:then:</i> and <i>else:</i> messages will return
the same object.  If an <i>NA</i> is returned, the <i>elseIf:then:</i>
message will evaluate the <i>v isString</i> clause.  If it returns
<i>TRUE</i>, the <i>then:</i> clause will be evaluated and will return
the string <i>"it's a string"</i>; otherwise, the value <i>NA</i>
is returned.  The <i>else:</i> message will return the string
<i>"Unknown object type"</i> if it is sent to an <i>NA</i>.
The final <i>print</i> will display the actual string returned.



<p>
<hr>
<h3><a name="subclass">Creating NA Subclasses</a></h3>
<p>
You can create subclasses of the <i>Undefined</i> class using
the <a href="Fund.htm#class">standard procedures</a>.  Although
you cannot create new instances of the <i>Undefined</i> class
directly, you can create new instances of any subclasses you
create.  For example, you might want to create a subclass to
store different types of <i>NA</i> values.
<p>
<blockquote><hr>
<center><a name="naSubclass.warn"><b>Warning!! </b> </a></center>
Because the <i>Undefined</i> class is a built-in class that is
created primitively as part of the Vision database bootstrap,
its subclasses do not inherit a place to store fixed property
values defined at parent classes.  As a result, you cannot set values
for the properties defined at <i>Object</i> in objects that
are subclasses of <i>Undefined</i>.  If you want to use
these properties, you must redefine them at your subclass.
Also, you should use the <a href="Classes.htm#cluster"><i>clusterNew</i></a>
version of the <i>new</i> message to instantiate this class
if you want to be able to access the instances with the
<i>instanceList</i> message.
<p>
For example:<pre><tt><b>
     Undefined createSubclass: "MyNA" ;    #- create subclass
     MyNA defineFixedProperty: 'code' ;    #- redefine property
     MyNA defineFixedProperty: 'name' ;    #- new property
     MyNA clusterNew                       #- new instance
     do: [ :code <- "NM" ;
           :name <- "Not Meaningful" ;    
         ] ;
     MyNA clusterNew                       #- new instance
     do: [ :code <- "NS" ;
           :name <- "Not Significant" ;    
         ] ;
     MyNA instanceList                     #- get all instances
     do: [code print: 5 ; name printNL ] ;
</b></tt></pre>
<hr></blockquote>

<p>
<hr>
<h3><a name="novalue">The <i>NoValue</i> Value</a></h3>
<p>
To distinguish between programs that return no value and the
<i>NA</i> value, the built-in class <b>NoValue</b> has been defined
as a subclass of the <i>Undefined</i> class.  This class has a
single instance which is returned when a block returns
"nothing".  In the expression:<pre><tt><b>
     !x <- 3 < 5 ifTrue: [ 2 ; ]
</b></tt></pre>
the value of the variable <i>x</i> is set to the value returned by
the <i>ifTrue:</i> block.  Since this block ends with the <i>';'</i>
character, it is returning "nothing".  The <i>NoValue</i> object
is defined not to print anything when it is returned.
If you send the <i>showInheritance</i> message to this object, you will
see the class hierarchy:<pre><tt><b>
     Object
       |
     Undefined
       |
     NoValue
</b></tt></pre>
Because the <i>NoValue</i> object is a subclass of <i>Undefined</i>,
it responds to the <i>isNA</i> and <i>isntNA</i> messages with the
values <i>TRUE</i> and <i>FALSE</i>.
<p>
<hr>
<h3><a name="other">Related Topics</a></h3>
<p>
<p>
For additional information see:
<p>
<ul type=square>
<li><a href="Output.htm#printNA">Printing NAs</a>
<li><a href="Fund.htm#default">Assigning Property Values</a>
<li><a href="Classes.htm#sampleNAvsDefault">NAs and Default Values</a>
<li><a href="Messages.htm#default">Assigning Default Values</a>
<li><a href="Navigate.htm#message">General Message Information</a>
</ul>
<p>
<p>
<hr>

<table border=0 width="100%">
<tr>
<td align=left><font size=-1>Copyright &copy 1996 Innovative Systems Techniques, Inc.</font>
<td align=right><font size=-1>Created August 19, 1996</font>
</tr>
</table>

</body>
</html>
