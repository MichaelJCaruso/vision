<!DOCTYPE html>
<html>
<head>
<title>The VLink OLE Server</title>
</head>

<body bgcolor=white>
<h2>The VLink OLE Server</h2>

<p>
| <a href="FHome.htm">Home</a> | <a href="vifaces.htm">Interfaces</a> | <a href="ifDownload.htm#ifVLink">Download Scripts</a> |
<hr>
<p>
<h3>Topics Covered:</h3>
<ul type="square">
<li><a href="#concepts">VLink Concepts</a>
<li><a href="#agent">Getting An Agent</a>
<li><a href="#Making Connections">Making Connections</a>
<li><a href="#Creating a Connection">Creating a Connection</a>
<li><a href="#Using a Parameter List">Using a Parameter List</a>
<li><a href="#Using a Connection Template">Using a Connection Template</a>
<li><a href="#Using a Stored Template">Using a Stored Template</a>
<li><a href="#Waiting for a Connection">Waiting for a Connection</a>
<li><a href="#Submitting Requests">Submitting Requests</a>
<li><a href="#Accessing Replies">Accessing Replies</a>
<li><a href="#Using Text Methods">Using Text Methods</a>
<li><a href="#Using Text Buffers">Using Text Buffers</a>
<li><a href="#Using Text Cursors">Using Text Cursors</a>
<li><a href="#Cleaning Up">Cleaning Up</a>
<li><a href="#Handling Errors">Handling Errors</a>
</ul>
<hr>

<a name="concepts"><h3>VLink Concepts</h3></a>
VLink is an OLE Automation Server that provides access to Vision data from Visual Basic 3.0<sup>TM</sup>, 
Visual Basic For Applications, and any other language or package capable of using OLE Automation objects or calling a DLL. 
OLE Automation is a new facility in Microsoft Windows and Windows/NT which permits an application to create objects that can be used by other applications.  
VLink defines objects that model connections to Vision sessions, the operations and requests made in those sessions, and the output returned by those requests.
<p>

The sections that follow describe these objects in greater detail.  
The examples are Visual Basic examples that work equally well in Visual Basic 3.0 and Visual Basic For Applications.

<a name="agent"><h4>Getting An Agent</h4></a>

You use VLink by using the objects it creates.  To do that, you need to obtain your first VLink object.  
That first object is always a VLink Agent.  The OLE Automation libraries can create a VLink Agent for any program that asks for one. 
The following Visual Basic code creates a VLink Agent:

<ul>
<pre><b>
Dim MyAgent As Object
Set MyAgent = CreateObject("VLink.Agent")
</b></pre>
</ul>

Once you have your agent, you can use it to create and access other VLink objects.

<a name="Making Connections"><h4>Making Connections</h4></a>

Now that you have your Agent, you need to make connections.  
To make a connection, you supply the information needed to start a Vision session.  
What you get back is a VLink Connection object that you use to submit requests to Vision.
<p>

There are several ways to make a connection.  Which one you use depends on the number of options you need to supply, 
whether you have already saved one or more connection templates in your VLink initialization file, and whether you 
want to share your connection with other Windows applications running on your computer.
<p>

Making a connection is a two step process - first you create or access a connection object, then you wait for it to be ready.  
The following sections describe the process.
<p>

<a name="Creating a Connection"><b>Creating a Connection</b></a>
<p>

<a name="Using a Parameter List">Using a Parameter List</a>
<p>

To create a connection using a parameter list, you must supply five pieces of information:
<ul type=disc>
<li>a string containing the name of the system where your Vision session will run
<li>a string containing your user code on that system
<li>a string containing your password
<li>a string containing the path name of the NDF for the Vision database you want to access.
<li>an integer containing the object space number of the session object space you want to access.
</ul>

The NDF path name can be left blank to use your default Vision data base.  
The object space number can be zero to request your default object space.
<p>

If the variable <i>MyAgent</i> references a VLink Agent and the variables <i>host</i>, <i>user</i>, <i>password</i>, <i>database</i> and <i>objectSpace</i> 
hold values for the five parameters described above, you would write:

<ul>
<pre><b>
Dim MyConnection As Object
Set MyConnection = MyAgent.CreateConnection (host, user, password, database, objectSpace)
</b></pre>
</ul>

to create a new connection.  To use an existing connection, you would write:

<ul>
<pre><b>
Dim MyConnection As Object
Set MyConnection = MyAgent.GetConnection (host, user, password, database, objectSpace)
</b></pre>
</ul>

Using an existing connection you to share Vision data among applications.  
For example, you can use the Vision Editor to create a new application, the Vision Browser to execute that application, and Microsoft Excel to access its results. 
All properties of the connection - including those that can only be set using a ConnectionTemplate - must match for <i>GetConnection</i> to return it as a matching connection. 
If a matching connection is not found, <i>GetConnection</i> creates it.
<p>

When VLink creates a connection, it logs you on to the system named by the <i>host</i> argument, starts your default login shell, sets up whatever default environment 
is defined in the startup scripts for that shell, and starts a Vision session attached to the database and object space you requested.
<p>

<a name="Using a Connection Template">Using a Connection Template</a>
<p>
The <i>CreateConnection</i> and <i>GetConnection</i> methods allow you to specify the five required and most commonly varied values needed to start a Vision session. 
ConnectionTemplates allow you to define objects that store commonly used combinations of these values.  
In addition, ConnectionTemplate provide several additional properties that you cannot specify if you use one of the methods described in the section <a href="#Using a Parameter List">Using a Parameter List</a>. 
You use a ConnectionTemplate by creating it, setting the values of the properties you need to specify, and then asking the ConnectionTemplate to create or access a Connection.  For example:

<ul>
<pre><b>
Dim MyConnectionTemplate As Object, MyConnection As Object

Set MyConnectionTemplate = MyAgent.CreateConnectionTemplate()
MyConnectionTemplate.Hostname = host
MyConnectionTemplate.Username = user
MyConnectionTemplate.Password = password
MyConnectionTemplate.Database = database
MyConnectionTemplate.ObjectSpace = objectSpace
Set MyConnection = MyConnectionTemplate.CreateConnection()
</b></pre>
</ul>

is equivalent to the <i>CreateConnection</i> method call described in section <a href="#Using a Parameter List">Using a Parameter List</a> while:

<ul>
<pre><b>
Dim MyConnectionTemplate As Object, MyConnection As Object

Set MyConnectionTemplate = MyAgent.CreateConnectionTemplate()
MyConnectionTemplate.Hostname = host
MyConnectionTemplate.Username = user
MyConnectionTemplate.Password = password
MyConnectionTemplate.Database = database
MyConnectionTemplate.ObjectSpace = objectSpace
Set MyConnection = MyConnectionTemplate.GetConnection()
</b></pre>
</ul>

is equivalent to the <i>GetConnection</i> method call of that section.  
The complete set of properties that can be set using a ConnectionTemplate are described in Table 1.
<p>
<center><b>Table 1</b></center>
<p>
<center><table border>
<th>Property Name<th>Data Type<th>Description
<tr>
<td valign=top><i>Hostname</>
<td valign=top>String
<td>The name of the system where you want to run your Vision session.  
This property is required and has no default value.
<tr>
<td valign=top><i>Username</i>
<td valign=top>String
<td>Your user code on the system named by the <i>Hostname</i> property.  
This property is required and has no default value.
<tr>
<td valign=top><i>Password</i>
<td valign=top>String
<td>Your password The default value for this property is the empty string.
<tr>
<td valign=top>Database
<td valign=top>String
<td>The path name of the NDF for the Vision database you want to access. 
The default value for this property is the empty string. 
The default value instructs VLink to access the database identified by your <i>NDFPathName</i> 
UNIX environment variable if it is set and <i>/vision/network/NDF</i> if it is not.
<tr>
<td valign=top><i>ObjectSpace</i>
<td valign=top>Integer
<td>The object space number you want to access as your session's root object space.  
The default value for this property is zero. If the value of this property is greater than or equal to 2, 
it is interpreted as the number of the Vision object space to use as the root of your Vision session.  
If this value is less than 2, your default object space will be used.
<tr>
<td valign=top><i>Executable</i>
<td valign=top>String
<td>The path name of the version of <i>batchvision</i> you want to run. 
The default value for this property is <i>/vision/bin/batchvision</i>. 
This property needs to be set explicitly only if you are testing a different version of <i>batchvision</i> or have moved the Vision executables to a non-standard directory.
<tr>
<td valign=top><i>Options</i>
<td valign=top>String
<td>The text of any additional command line options you want to pass to Vision.  
The default value for this property is the empty string.  
If you set this property, the options should be formatted exactly as they would appear on the command line.
<tr>
<td valign=top><i>Timeout</i>
<td valign=top>Long
<td>The default timeout in seconds for this connection. The default value for this property is -1.  
The default value instructs VLink to use its internal defaults. 
This property is not checked by the <i>Get...Connection</i> methods when looking for an existing connection. 
Timeouts are discussed in more detail in the sections <a href="#Waiting for a Connection">Waiting for a Connection</a> 
and again in <a href="#Submitting Requests">Submitting Requests</a>.
</table></center>
<p>

<center><b>Table 1.  Connection Template Properties</b></center>
<p>

<a name="Using a Stored Template">Using a Stored Template</a>
<p>

The methods described so far require that you supply all the parameters of a connection from every program that connects to VLink. 
Using a stored template, you can create or access a connection by simply supplying its name.  
To create a stored template, you first create a Connection or ConnectionTemplate object and then store it with the <i>StoreTemplate</i> method.  
<i>StoreTemplate</i> takes a single string argument containing the name of the stored template you are saving.  
It returns True if the template was successfully saved and False otherwise.  
For example, the Visual Basic code:

<ul>
<pre><b>
If MyConnectionOrConnectionTemplate.StoreTemplate ("My Stored Template") Then
	MsgBox "'My Stored Template 1' saved successfully"
End If
</b></pre>
</ul>

creates a stored connection template named "My Stored Template" from the Connection or ConnectionTemplate object referenced by <i>My ConnectionOrConnectionTemplate</i>.
<p>

If you supply an empty string to the <i>StoreTemplate</i> method, the template is stored as the default template.  
You can also save the default template using the <i>StoreDefaultTemplate</i> method. 
Both:
<ul>
<pre><b>
If MyConnectionOrConnectionTemplate.StoreTemplate ("") Then
	MsgBox "Default connection template saved successfully"
End If
</b></pre>
</ul>

and:

<ul>
<pre><b>
If MyConnectionOrConnectionTemplate.StoreDefaultTemplate () Then
	MsgBox "Default connection template saved successfully"
End If
</b></pre>
</ul>

save the values of the parameters used to create <i>MyConnectionOrConnectionTemplate</i> as the default stored template.
<p>

Because stored templates are saved in your VLink configuration file, it can be recalled and used at any time, not just in your current session.  
There are two ways to use a stored template.  You can use a stored template to create or access a connection. 
The following statements all create or access a Connection object:

<ul>
<pre><b>
Set MyConnection = MyAgent.CreateStoredConnection ("My Stored Template")
Set MyConnection = MyAgent.CreateStoredConnection ("")
Set MyConnection = MyAgent.CreateDefaultConnection ()

Set MyConnection = MyAgent.GetStoredConnection ("My Stored Template")
Set MyConnection = MyAgent.GetStoredConnection ("")
Set MyConnection = MyAgent.GetDefaultConnection ()
</b></pre>
</ul>

Like the <i>StoreTemplate</i> method, supplying an empty string for the template name instructs VLink to use the default stored template.  
If a stored template does not exist, these methods return the Visual Basic constant <i>Nothing</i>. 
It's a good idea for you to check that the method actually succeeded:

<ul>
<pre><b>
If MyConnection Is Nothing Then
	MsgBox "Stored Template Not Found"
End If
</b></pre>
</ul>

You can also use a stored template to supply the initial values of a ConnectionTemplate which you customize by updating the template properties you need to change:

<ul>
<pre><b>
Set MyConnectionTemplate = MyAgent.CreateConnectionTemplate ()
If MyConnectionTemplate.LoadTemplate ("My Stored Template") Then
	MyConnectionTemplate.Executable = "/vision/bin/test/batchvision"
	Set MyConnection = MyConnectionTemplate.GetConnection ()
Else
	MsgBox "'My Stored Template' Not Found"
End If
</b></pre>
</ul>

<i>LoadTemplate</i> returns True if the stored template was successfully read and False otherwise.  
The default stored template can be loaded by either passing the empty string to the <i>LoadTemplate</i> method or using the <i>LoadDefaultTemplate</i> method.
<p>

<a name="Waiting for a Connection"><b>Waiting for a Connection</b></a>
<p>

Making a connection involves access to remote systems over a network.  
When your Agent returns a Connection object to you, the remote system may not have finished its setup work
or its reply may not have reached your computer over the network.  
While you can use the connection to submit requests, those requests won't be answered until the remote system has completed its part of the setup. 
You can assume that the connection will eventually by <i>up</i>.  
You can also check the connection and wait until it is ready.
<p>

Checking your connection is easy.  At any time, you can ask your Connection object if it is <i>up</i> or <i>down</i> by asking for the value of either the 
<i>IsUp</i> or <i>IsDown</i> property of the connection:

<ul>
<pre><b>
If MyConnection.IsUp Then
	MsgBox "My Connection Is Up!"
End If
</b></pre>
</ul>

You can also wait for your Connection to be <i>up</i> by using the <i>WaitForConnection</i> method.  
This method takes a single argument containing the maximum number of seconds to wait. 
When this method returns, one of three conditions is true:

<ul type=disc>
<li>the connection is up
<li>the connection is down
<li>the connection is incomplete at the end of the waiting time
</ul>

It is your responsibility to determine which of these conditions is true by examining the value of either the 
<i>IsUp</i> or <i>IsDown</i> property:

<ul>
<pre><b>
MyConnection.WaitForConnection MyTimeoutInSeconds
If MyConnection.IsUp Then ...
</b></pre>
</ul>

Because this sequence is so common, Connection objects implement a method which combines these calls. 
The <i>IsUpWithin</i> method takes a single argument of the maximum number of seconds to wait and returns the value of the <i>IsUp</i> property at the end of the wait.
<p>

When you call either of these methods, you should choose a reasonable timeout. 
Your application cannot be interrupted until <i>WaitForConnection</i> or <i>IsUpWithin</i> returns. 
The following example shows how you can wait for a connection while still giving yourself a chance to recover if the connection doesn't come up:

<ul>
<pre><b>
Const YesNoMsgBox = 36
Const No = 7
Dim MyTimeoutInSeconds As Long, RetryingWait As Integer
MyTimeoutInSeconds = 30
Do
    If MyConnection.IsUpWithin (MyTimeoutInSeconds) Then
        RetryingWait = False
    ElseIf MsgBox("Timeout Expired, Continue Waiting?", YesNoMsgBox) = No Then
        RetryingWait = False
    Else
        RetryingWait = True
    End If
Loop While RetryingWait
If MyConnection.IsUp Then
    MsgBox "My Connection Is Up!"
Else
    MsgBox "My Connection Is Down ;(, Try Again Later"
End If
</b></pre>
</ul>

The timeout argument passed to the <i>WaitForConnection</i> and <i>IsUpWithin</i> methods can be less than or equal to zero. 
Passing zero to <i>IsUpWithin</i> is the same as examining the <i>IsUp</i> property of the connection. 
Passing zero to <i>WaitForConnection</i> instructs the method to return immediately. 
Passing a negative timeout to either of these methods instructs the method to use the value of the connection's <i>Timeout</i> property.  
If the connection was created using a ConnectionTemplate, the initial value of this property is copied from the <i>Timeout</i> property of the ConnectionTemplate.  
If the connection was created from a stored template, the initial value of this property is copied from the stored template.  
If the connection was created using a parameter list, the default value of this property is -1.
<p>

The timeout property of a connection can be changed at any time simply by assigning a new value to it:

<ul>
<pre><b>
MyConnection.Timeout = 30
</b></pre>
</ul>

If the value of this property is greater than or equal to zero, it is used the default timeout for the connection.  
If the value is negative, VLink uses an internal default of 60 seconds when processing a <i>WaitForConnection</i> or <i>IsUpWithin</i> method call that specifies a negative timeout

<a name="Submitting Requests"><h4>Submitting Requests</h4></a>

Now that you've made a Connection, you can use it to submit requests to Vision.  
Submitting requests is straightforward.  Requests are submitted using the <i>Submit</i> method.  
For example:

<ul>
<pre><b>
Dim MyRequest As Object
Set MyRequest = MyConnection.Submit ("2 + 2")
</b></pre>
</ul>

asks the Vision session attached to <i>MyConnection</i> to compute 2 plus 2.
<p>

The single string argument to the <i>Submit</i> method contains the Vision expression to execute.  
The <i>Submit</i> method returns a Request object that can be interrogated for its status, the text of the request you made, and, ultimately, the reply received from Vision.
<p>

Vision's response to your request is not necessarily immediately available to you.  
The connection may not be up at the time you submit the request or there may be other requests already waiting to be processed. 
The requests already waiting will be processed first - your request will be added to the end of the queue.  
Once your request reaches Vision, Vision must still process it and return a reply across the network.  
When <i>Submit</i> returns a Request object to you, none of these things are guaranteed to have happened - you must wait for them to happen before you ask the request for its reply.
<p>

You can check the status of a request at any time by examining one of four read-only properties defined for all Request objects. 
Table 2 summarizes these properties:
<p>

<center><b>Table 2</b></center>
<p>

<center><table border>
<th>Property<th>Description
<tr>
<td valign=top><i>InProgress</i>
<td>True if the request is still being processed.
<tr>
<td valign=top><i>Completed</i>
<td>True if the request has completed.  If the value of this property is True, either the <i>Succeeded</i> or <i>Failed</i> property - but not both - will be True.
<tr>
<td valign=top><i>Succeeded</i>
<td>True if the request succeeded. If <i>InProgress</i> is True, this property will be False. 
If <i>Succeeded</i> is True, a complete reply was received from Vision.  
VLink doesn't attempt to interpret the reply.  You need to examine the reply to determine if the request did what you expected it to do.
<tr>
<td valign=top><i>Failed</i>
<td>True if the request failed. If <i>InProgress</i> is True, this property will be False. 
If <i>Failed</i> is True, a complete reply could not be received from Vision because of a detectable problem with the remote Vision session or network.
</table></center>
<p>
<center><b>Table 2.  Request Status Properties</b></center>
<p>

Request objects also implement methods that allow you to wait for a reply.  
You wait for the reply by calling the <i>WaitForReply</i> method.  
Like the <i>WaitForConnection</i> method  of connection objects, <i>WaitForReply</i> takes a single argument whose value is the maximumn number of seconds to wait.  
Like <i>WaitForConnection</i>, when <i>WaitForReply</i> returns, one of  three conditions is known to be true:

<ul type=disc>
<li>the request has succeeded
<li>the request has failed
<li>the request is in progress at the end of the waiting time
</ul>

You need to determine which of these conditions is true by examining the status properties of the Request object.  
Typically, you need to check the <i>Completed</i> property.  
For that reason, Request objects support the <i>CompletedWithin</i> method. 
This method takes the maximum number of seconds to wait as its single argument and returns the value of the <i>Completed</i> property at the end of the wait.  
As is the case with connection timeouts, passing a negative timeout instructs the method to use the <i>Timeout</i> property of the connection.  
If both the argument and the connection <i>Timeout</i> are negative, VLink uses an internal default of 300 seconds.  
This is longer than the default used when waiting for a connection because VLink expects requests to take longer to process than connections.
<p>

You don't have to wait for a connection to be up before you use it, even though you should.  
Unlike connections, you can't do much with a request without first waiting for its reply.  
When you do wait for a reply, you should choose a reasonable timeout.  
Your application cannot be interrupted until the call to <i>WaitForReply</i> or <i>CompletedWithin</i> returns.
<p>

The following example shows how you can wait for a reply and still give yourself a chance to regain control of your application if a reply doesn't arrive in a reasonable time:

<ul>
<pre><b>
Const YesNoMsgBox = 36
Const No = 7
Dim MyTimeoutInSeconds As Long, RetryingWait
MyTimeoutInSeconds = 30
Do
    If MyRequest.CompletedWithin (MyTimeoutInSeconds) Then
        RetryingWait = False
    ElseIf MsgBox("Timeout Expired, Continue Waiting?", YesNoMsgBox) = No Then
        RetryingWait = False
    Else
        RetryingWait = True
    End If
Loop While RetryingWait
If MyRequest.InProgress Then
    MsgBox "My Request Is Still In Progress!"
ElseIf MyRequest.Succeeded  Then
    MsgBox "My Request Has Succeeded!"
Else
    MsgBox "My Request Failed!!!"
End If
</b></pre>
</ul>

<a name="Accessing Replies"><h4>Accessing Replies</h4></a>

Every Request object contains two text objects - the text of your request and the text of Vision's reply to it.  
You have four ways to access the text in these objects:
<ul type = disc>

<li>as a string formatted with DOS style 'CR-LF' line separators.  
This style is appropriate if you plan to pass the text to a Windows control such as a Text Box, save the text in a file, or copy the text to the clipboard.

<li>as a string formatted with UNIX style 'NL' line separators.  
This style is appropriate if you plan to use the text in your own program or pass it to an another program that expects this format.

<li>as a TextBuffer object that supports methods for searching, parsing, and retrieval of the text.  
The Section <a href="#Using Text Buffers">Using Text Buffers</a> shows you how to use TextBuffers.

<li>as a TextCursor object that supports methods for sequential searching, parsing, and retrieval of the text.  
The Section <a href="#Using Text Cursors">Using Text Cursors</a> shows you how to use TextCursors.
</ul>

<a name="Using Text Methods"><b>Using Text Methods</b></a>
<p>

The easiest and least flexible way to access the text contained in a Request is to simply ask for as a string.  
The following code defines the string variables <i>DosRequestText</i> and <i>DosReplyText</i> and initializes them to the text of a request and Vision reply to it:
<ul>
<pre><b>
Dim DosRequestText As String, DosReplyText As String
DosRequestText = MyRequest.RequestText
DosReplyText = MyRequest.ReplyText
</b></pre>
</ul>

The <i>RequestText</i> and <i>ReplyText</i> Request properties return multi-line strings with consecutive lines separated by a CR-LF sequence (i.e., CHR$(13) & CHR$(10)).  
To access the same strings with UNIX, C, and C++ style line separators, use the properties <i>UnixRequestText</i> and <i>UnixReplyText</i>:

<ul>
<pre><b>
Dim UnixRequestText As String, UnixReplyText As String
DosRequestText = MyRequest.UnixRequestText
DosReplyText = MyRequest.UnixReplyText
</b></pre>
</ul>

While these methods are the easiest to use, they may not always be the most appropriate, especially if the amount text you 
are accessing exceeds the capacity of a Visual Basic string or Windows Text or List Box.  
When it's inconvenient, impossible, or inefficient to access an entire request or reply string, you can use a TextBuffer or TextCursor object instead.
<p>

<a name="Using Text Buffers"><b>Using Text Buffers</b></a>
<p>

A <i>TextBuffer</i> is an object that resides in VLink and supports operations similar to those available for Visual Basic strings. 
Every request contains two <i>TextBuffer</i> objects - one containing the Vision code you passed to the <i>Submit</i> method and the other containing the output produced by Vision when it executed that code.  
You access these buffers via the <i>RequestBuffer</i> and <i>ReplyBuffer</i> properties of your <i>Request</i> object:

<ul>
<pre><b>
Dim ReplyTextBuffer As Object, RequestTextBuffer As Object
Set ReplyTextBuffer = MyRequest.ReplyBuffer
Set RequestTextBuffer = MyRequest.RequestBuffer
</b></pre>
</ul>

The RequestBuffer objects returned by these properties are owned by the Request object and are read-only. 
You can only access their contents, you cannot change them.
<p>

You can ask a TextBuffer for the length of the text it contains:
<pre><b>
	ReplyTextBuffer.Length
</b></pre>

and for its contents as a DOS style multi-line string:

<pre><b>
        ReplyTextBuffer.Text
</b></pre>

and as a UNIX style multi-line string:

<pre><b>
        ReplyTextBuffer.UnixText
</b></pre>

You can ask for its leftmost characters:

<pre><b>
	Dim CharacterCount As Long
	CharacterCount = 32
        Substring = ReplyTextBuffer.Left (CharacterCount)
</b></pre>

rightmost characters:

<pre><b>
        Dim CharacterCount As Long, Substring As String
        CharacterCount = 32
        Substring = ReplyTextBuffer.Right (CharacterCount)
</b></pre>

and middle characters using either the <i>Mid</i>:

<pre><b>
        Dim StartingPosition As Long, CharacterCount as Long, Substring As String
        StartingPosition = 32
        CharacterCount = 19
        Substring = ReplyTextBuffer.Mid (StartingPosition, CharacterCount)
</b></pre>

or 'Get'(<i>Mid</i> and <i>Get</i> do exactly the same thing):

<pre><b>
        Substring = ReplyTextBuffer.Get (StartingPosition, CharacterCount)
</b></pre>

methods. You can retrieve a substring using a search criterion.  
You can retrieve the substring that begins at an arbitrary position and includes the characters up to but not 
including the first character matched from a set of characters:

<pre><b>
        Dim CharacterSet As String, Substring As String
        CharacterSet = "+-*/"
        Substring = ReplyTextBuffer.GetUntil (StartingPosition, CharacterSet)
</b></pre>

You can determine the number of characters in that substring without retrieving it:

<pre><b>

        Dim SubstringLength As Long
        SubstringLength = ReplyTextBuffer.DistanceUntil (StartingPosition, CharacterSet)
</b></pre>

You can retrieve a substring that begins at an arbitrary position and includes only those characters that match one of the characters in a set of characters:

<pre><b>
        CharacterSet = "abcdefghijklmnopqrstuvwxyz"
        Substring = ReplyTextBuffer.GetWhile (StartingPosition, CharacterSet)
</b></pre>

or just determine the length of that substring:

<pre><b>
        SubstringLength = ReplyTextBuffer. DistanceWhile (StartingPosition, CharacterSet)
</b></pre>

You can retrieve the text and length of a substring that begins at an arbitrary position and extends up to but 
not including the first occurrence of a target string:

<pre><b>
        Substring = ReplyTextBuffer.GetTo (StartingPosition, "Earnings")
        SubstringLength = ReplyTextBuffer. DistanceTo (StartingPosition, "Earnings")
</b></pre>

or to the end of the TextBuffer:

<pre><b>
        Substring = ReplyTextBuffer.GetToEnd (StartingPosition)
        SubstringLength = ReplyTextBuffer.DistanceToEnd (StartingPosition)
</b></pre>

You can retrieve the text of the substring that extends to the next newline:

<pre><b>
        Dim ThisLine As String
        ThisLine = ReplyTextBuffer.GetLine (StartingPosition)
</b></pre>

or to the next Vision output delimiter:

<pre><b>
        Dim ThisCell As String
        ThisCell = ReplyTextBuffer.GetCell (StartingPosition)
</b></pre>

Finally, you can obtain a TextCursor that allows you to do the same operations through an interface suited to 
sequential processing of an entire text object:

<pre><b>
        Dim MyTextCursor = ReplyTextBuffer.Cursor
</b></pre>

<a name="Using Text Cursors"><b>Using Text Cursors</b></a>
<p>

A <i>TextCursor</i> is a VLink object that supports sequential access to a TextBuffer.  
A TextCursor remembers its place in the TextBuffer. 
It should be your interface of choice whenever you plan to process the text of a request or reply sequentially.
<p>

You obtain TextCursor objects from a Request with the methods <i>ReplyCursor</i> and <i>RequestCursor</i>:

<ul>
<pre><b>
Dim MyReplyCursor As Object,  MyRequestCursor As Object
Set MyReplyCursor = MyRequest.ReplyCursor
Set MyRequestCursor = MyRequest.RequestCursor
</b></pre>
</ul>

Unlike the <i>RequestBuffer</i> and <i>ReplyBuffer</i> properties which return the same TextBuffers every time they are accessed, 
the <i>RequestCursor</i> and <i>ReplyCursor</i> methods return a different TextCursor each time they are used. 
You can create as many TextCursors as you need. 
Each TextCursor maintains an independent pointer to its underlying TextBuffer. 
Multiple text cursors allows you to keep track of and read from different locations in the same TextBuffer obect.
<p>

With a TextCursor, you can determine your current position in the text:

<ul>
<pre><b>
MyReplyCursor.Position
</b></pre>
</ul>

or set it:

<ul>
<pre><b>
MyReplyCursor.Position = 32
</b></pre>
</ul>

You can determine whether the TextCursor does or does not point to the beginning:

<ul>
<pre><b>
If MyReplyCursor.IsAtBeginning Then ...
If MyReplyCursor.IsntAtBeginning Then ...
</b></pre>
</ul>

or end:

<ul>
<pre><b>
If MyReplyCursor.IsAtEnd Then ...
If MyReplyCursor.IsntAtEnd Then ...
</b></pre>
</ul>

of the TextBuffer.  You can determine the distance from the TextCursor's current position up to but not including 
the first character that matches one of the characters in a character set:

<ul>
<pre><b>
SubstringLength = MyReplyCursor.DistanceUntil (CharacterSet)
</b></pre>
</ul>

or from the current position through the last character that matches one of the characters in a character set:

<ul>
<pre><b>
SubstringLength = MyReplyCursor.DistanceWhile (CharacterSet)
</b></pre>
</ul>

or from the current position up to but not including the first occurrence of a target string:

<ul>
<pre><b>
SubstringLength = MyReplyCursor.DistanceTo ("Earnings")
</b></pre>
</ul>

or from the current position to the end of the text:

<ul>
<pre><b>
SubstringLength = MyReplyCursor.DistanceToEnd ()
</b></pre>
</ul>

You can get a substring that begins at the current position and leaves the current position at the end of the substring:

<ul>
<pre><b>
Substring = MyReplyCursor.Get (CharacterCount)
Substring = MyReplyCursor.GetUntil (CharacterSet)
Substring = MyReplyCursor.GetWhile (CharacterSet)
Substring = MyReplyCursor.GetTo ("Earnings")
Substring = MyReplyCursor.GetToEnd
Substring = MyReplyCursor.GetLine
Substring = MyReplyCursor.GetCell
</b></pre>
</ul>

or that leaves the current position unchanged:

<ul>
<pre><b>
Substring = MyReplyCursor.Peek (CharacterCount)
Substring = MyReplyCursor.PeekUntil (CharacterSet)
Substring = MyReplyCursor.PeekWhile (CharacterSet)
Substring = MyReplyCursor.PeekTo ("Earnings")
Substring = MyReplyCursor.PeekToEnd
Substring = MyReplyCursor.PeekLine
Substring = MyReplyCursor.PeekCell
</b></pre>
</ul>

You can also change the current position without accessing a substring:

<ul>
<pre><b>
MyReplyCursor.Skip CharacterCount
MyReplyCursor.SkipUntil CharacterSet
MyReplyCursor.SkipWhile CharacterSet
MyReplyCursor.SkipTo "Earnings"
</b></pre>
</ul>

Finally, you can access the TextBuffer to which this TextCursor points:

<ul>
<pre><b>
Dim MyTextBuffer As Object
Set MyTextBuffer = MyReplyCursor.Buffer
</b></pre>
</ul>

or you can create a copy of your TextCursor:

<ul>
<pre><b>
Dim MyClone As Object
Set MyClone = MyReplyCursor.Clone
</b></pre>
</ul>

<a name="Cleaning Up"><h4>Cleaning Up</h4></a>

All of the objects you create with VLink are kept until they are no longer referenced.  
When the final reference to an object is released, the object is deleted.  
For all objects, deleting an object releases the objects it references and frees the storage it occupies.  
Specific kinds of objects may do other things as well.  
Deleting a Connection closes the connection and stops its attached Vision session.
<p>

The bookkeeping of managing references is done for you by Visual Basic.  
Whenever you execute a Visual Basic <i>Set</i> statement, you create a reference to the variable's new value and release any reference to its old value.  
When you exit a procedure containing a local object variable, Visual Basic releases the object referenced by that variable.  
Whenever you exit a program normally, the objects referenced by that program are released. 
In general, the only time you need to worry about releasing objects is when you reference them through global variables.  
If you don't want to keep or no longer need an object referenced by a global variable, you should set it to the Visual Basic constant <i>Nothing</i>:

<ul>
<pre><b>
Set MyGlobalObjectVariable = Nothing
</b></pre>
</ul>

If no other reference exists to the object referenced by <i>MyGlobalObjectVariable</i>, either from another variable or another object, the object will be deleted.

<a name="Handling Errors"><h4>Handling Errors</h4></a>

There are two kinds of errors that you should be prepared to deal with:

<ul type = disc>
<li>resource allocation errors
<li>connection and communication errors
</ul>

In general, resource allocation failures occur when VLink cannot create an object on your behalf.  
When VLink can't create an object, it returns Visual Basic constant <i>Nothing</i> which you can test for:

<ul>
<pre><b>
Set MyRequest = MyConnection.Submit ("Named Company GM sales")
If MyRequest Is Nothing Then
    MsgBox "Request Could Not Be Created"
EndIf
</b></pre>
</ul>

Connection and communication errors occur when the network, remote host, or remote Vision session stop operating.  
In general, these conditions are detected by VLink and are reported back to you in the form of <i>down</i> connections and <i>failed</i> requests.  
Whenever a connection or request fails, you can obtain more information about the failure by examining 
the <i>LastErrorCode</i> and <i>LastErrorDescription</i> properties of the connection associated with the failure.
<hr>

<table border=0 width="100%">
<tr>
<td align=left><font size=-1>Copyright &copy 1997 Innovative Systems Techniques, Inc.</font>
<td align=right><font size=-1>Updated April 28, 1997</font>
</tr>
</table>

</body>
</html>




