---
title: "The Vision Technology"
---

<!DOCTYPE html>
<html>
  <head>
  </head>
<body>

<h2>
  Business Entity Applications
</h2>

<P>Once upon a time, most people assumed that business entities were simple
things easily handled using existing techniques and technologies.&nbsp;
That was before most people gave much thought to the matter.&nbsp; Our
experience working with financial, economic, and market research data,
entities and applications, particularly ad hoc, analytic, decision support
applications, has taught us otherwise.

<P>Business entity applications involve the integration of substantial
amounts of internal and external data. That data is almost universally
time varying and governed by non-trivial rules regarding its interrelationships
and use.&nbsp; While temporal dependencies are one source of those rules,
they are not the only source.

<P>Applications cannot be partitioned neatly into 'the bulk part the database does' and everything else.&nbsp; Applications are collection and query
intensive with collection and query operations interspersed throughout
an application and across levels of encapsulation and abstraction.

<P>Transactions are long running and ad hoc, with ad hoc explorations often
leading to new rules and building blocks.&nbsp; Explorations are conducted
and new applications developed by business knowledgeable users, not programmers
and 'database gurus'.&nbsp; Those rules and building blocks must be reusable
at all appropriate places in new applications.&nbsp; It is unreasonable
and undesirable to encumber the productivity of those users or the reuse
of their explorations simply because of technological limitations.

<P>At this point, the world has caught up, at least partially, by recognizing
that these issues are worth solving.
<BR>&nbsp;
<h2>
  Not An Incremental Technology
</h2>
The analytic decision support, data acquisition, and data distribution
applications we build for firms in the financial and other information
intensive industries are mission critical in their organizations. We built
Vision, a temporal, object-oriented, database management system, as a
vehicle for delivering those systems.&nbsp; Vision has been doing that
job successfully, reliably, and with no fundamental change to its architecture
or information model since its initial release in 1986.

<P>When we built Vision, we had three significant advantages -- a technological
concept based on our experience building data intensive applications and
analysis tools, real clients and their applications, and a clean slate.&nbsp;
The benefits of a clean slate are obvious. Our clients and their applications
provide a built-in validation suite for the technology.&nbsp; That validation
is multifaceted: immediate success of the technology's original applications;
low development and deployment costs for new applications; low maintenance
costs for existing applications; scalable exploitation of the hardware
improvements we've all seen over the past decade.

<P>There is no brief way to describe the scope and details of the Vision
technology.&nbsp; Vision borrows in many key ways from its database and
object-oriented heritage; however, Vision is not an incremental technology.&nbsp;
Vision is a database programming language hybrid that implements object-oriented
constructs and operations, defined naturally in terms of classes and individuals,
in a completely collection centric way.&nbsp;&nbsp; Objects, updates, and
computation structures are all represented using a common unifying infrastructure
of stateless, abstract objects connected by state and structure bearing
morphisms.&nbsp; Both collections of objects and collections of collections
are naturally represented and transformed within Vision. Because all operations
are implemented as algebraic transformations of underlying object structures
and execution state, they are implicitly parallel.&nbsp; This includes
all collection operations -- not just selection operations.

<P>Vision's temporal data model is a grouped temporal model, influenced
by Clifford and Warren's 1983 'Formal Semantics for Time In Databases'&nbsp;
TODS article (remember, Vision has been doing this stuff since 1986).&nbsp;
In Vision, temporal dependencies are modeled at the level of object properties.&nbsp;
Temporal properties can be used explicitly as the time series that they
are; however, they exhibit their modeling power when used to select, on
the basis of the temporal context of an expression, the property values
applicable in that temporal context.&nbsp; Temporal context can be freely
bound, rebound, nested, and multiply bound within an expression.&nbsp;
The algebra of the Vision execution engine easily parallelizes concurrent
temporal contexts so that it is common for one expression to be evaluated
for multiple individuals and temporal contexts simultaneously and without
restriction.&nbsp; Underlying this model are time series structures with
no intrinsic limits on their granularity or regularity and an extensive,
extensible collection of date and time classes and operations.

<P>In planting its flag at a new point in the technological spectrum, Vision
has questioned a number of assumptions and implemented some traditional
ideas in non-traditional ways.&nbsp; Physically, Vision objects are not
records, and Vision computation does not proceed an individual object at
a time.&nbsp; In the examples that follow, if you think you see concrete
structures like records and element at a time execution orders, it's all
in your mind.
<BR>&nbsp;
<h2>
  A Modest Example
</h2>

<pre><i>
   Account defineMethod: [ | correlatedAccounts |
      !lowerPct <- pctEq * 0.8; !upperPct <- ...;
      holdings
         select: [security type isEquity].
         collectListElementsFrom: [security holdings].
         groupedBy: [account].
         select: [pctEq >= ^my lowerPct &amp;&amp; pctEq <= ^my upperPct].
         extendBy: [ !correlation <- groupList correlate: [...] ... ].
         sortDown: [correlation]
    ];
</i></pre>

<P>This modest, but typical example, is taken from a mutual fund/portfolio
analysis system powered by Vision.&nbsp; It is a skeleton of a method used
to order the funds/portfolios in the database based on the degree their
holdings correlate with a specific mutual fund (the recipient of <i>correlatedAccounts</i>
message).&nbsp; It is typical of the sort of thing that an analyst might
need to do at 9 AM for an 11 AM presentation.

<P>While the specific details of the method do not matter, there are a number
of key features worth noting:
<OL>
<LI>
query and collection operations are embedded throughout the logic of this
method.&nbsp; Some of those operations are traditional database operations
like selection and grouping, others are non-traditional and user defined.</LI>

<LI>
New collections of information, complete with new properties, need to be
created, used, and returned dynamically.&nbsp; This method delivers a collection
of results to its caller.&nbsp; It is reasonable to expect that caller
to perform more collection operations on the result; it is unreasonable
to materialize that collection into an 'outside the database' world that
implements those operations in an ad hoc way.</LI>

<pre><i>
MyFunds do: [correlatedAccounts first: 5 . do: [ ... ] ]

^today to: ^today - 1 yearEnds by: 1 quarterEnds. evaluate: [
   MyFunds do: [correlatedAccounts first: 5. do: [...]]
]

Account defineMethod: [ | displayCorrelatedAccounts |
   ...
   correlatedAccounts select: [correlation >= ...] ...;
   ...
];

MyFunds do: [displayCorrelatedAccounts]</I>
</i></pre>
<LI>
collection level detail is just as important as summary information.&nbsp;
This is true  for both stored database state and dynamically derived
information.&nbsp; Here, for example, the <I>Account</I> class has a collection
valued <I>holdings</I> property and non-collection valued <I>pctEq</I>
property;&nbsp; the <I>groupedBy:</I> operation returns a collection of
new objects, each with a single valued reference to an <I>account</I> object
and a multi-valued <I>groupList</I> property referencing the elements of
the group.</LI>

<LI>
much complexity is encapsulated beneath this method.&nbsp; For example,
at the level of abstraction of this method, the time variability of both
the <I>holdings</I> and <I>pctEq</I> properties has already been properly
handled.</LI>
</OL>
&nbsp;
<h2>
  Applications Like These Work
</h2>
Vision applications like these are commonplace.&nbsp; They are routinely
developed by business knowledgeable users, not programmers or database
tuning experts.&nbsp; Vision's users take for granted their ability to
do so.&nbsp; They can because of Vision's underlying architecture and theory
of operation.

<P>Our white papers:

  <UL>
    <LI>
      <B><A HREF="tinats.htm">Time Is Not A Time-Series</A></B>
    </LI>
    <LI>
      <B><A HREF="sdmts.htm">Sets Do More Than <I>Select</I></A></B>
    </LI>
    <LI>
      <B><A HREF="download/vldb98.ppt.gz"><I>VLDB</I> Time Series Presentation</A></B>
    </LI>
  </UL>

<P>and <I><A HREF="vonline.htm">Vision Online</A></I> describes the Vision
technology and its applications extensively.

{% include legacy-footer.htm copydates="2000" %}

</body></html>
