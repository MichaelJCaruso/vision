<!DOCTYPE html>
<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="Michael J. Caruso">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; U) [Netscape]">
   <title>Using VAccess and COM to Access Vision</title>
</head>
<body>

<h2>
Using VAccess and COM to Access Vision</h2>
| <a href="FHome.htm">Home</a> | <a href="vifaces.htm">Interfaces</a> |
<a href="ifDownload.htm#ifVAccess">Download
Scripts</a> |
<hr>

<h3>

<hr WIDTH="100%"></h3>

<h3>
Topics Covered:</h3>

<ul TYPE=SQUARE>
<li>
<a href="#Installing VAccess">Installing VAccess</a></li>

<li>
<a href="#Using VAccess From Visual Basic">Using VAccess From Visual Basic</a></li>

<li>
<a href="#Making Connections">Making Connections</a></li>

<li>
<a href="#Handling Errors">Handling Errors</a></li>

<li>
<a href="#Running Vision Expressions">Running Vision Expressions</a></li>

<li>
<a href="#Getting Data Points">Getting Data Points</a></li>

<li>
<a href="#Getting Data Arrays">Getting Data Arrays</a></li>

<li>
<a href="#VAccess Reference">VAccess Reference</a></li>
</ul>

<h3>

<hr WIDTH="100%"></h3>

<h3>
Introduction</h3>
VAccess provides a COM compatible interface to Vision.&nbsp; Using VAccess,
you can execute Vision code and retrieve structured results using any programming
language capable of functioning as a COM client.&nbsp; Among the many examples
of such environments are Microsoft Visual Basic, VBScript, and MatLab.
<p>The classes, properties, and operations implemented by VAccess are based
on the C++ classes documented in <a href="ifCAccess.htm">Sample C++ Access
to Vision</a>, modified and updated to make them COM aware.&nbsp; The structured
query operations implemented in VAccess by <i><a href="#class ExtractWS">ExtractWS</a></i>
objects are built using the Vision <b><a href="tkInterface.htm#extract">Interface
ExtractWS</a></b> tool kit.
<p>VAccess is supplied in both executable and source code form.&nbsp; This
document describes the capabilities available in the standard executable
version.&nbsp; If you have the need and the skills to do so, you are free
to modify and recompile the source code to add custom capabilities; however,
that is beyond the scope of this description.
<h3>

<hr WIDTH="100%"></h3>

<h3>
<a NAME="Installing VAccess"></a>Installing VAccess</h3>
Before you can use VAccess, you need to install it on your system.&nbsp;
There are two steps to installing VAccess -- copying the files to your
system, and telling Windows where you put them.
<p>To develop and run VAccess applications, you need two files -- <i>VAccess.dll</i>
and <i>VAccess.tlb</i>. <i>VAccess.dll</i> contains the code that implements
the VAccess COM objects; <i>VAccess.tlb</i> contains the type library that
describes those objects.&nbsp; You can put these files in any directory
you choose, but you must put both of them in the same directory.
<p>Once you have copied these files to your computer, you must register
their location with the Windows operating system.&nbsp; You do that using
the <i>regsvr32</i> command and the <i><u>R</u>un...</i> choice on your
system's Start menu.&nbsp; For example, if you put your VAccess files in
the directory <i>c:\Program Files\VAccess</i>, enter:
<blockquote><i>regsvr32 c:\Program Files\VAccess\VAccess.dll</i></blockquote>
at the <i><u>O</u>pen:</i> prompt of the <i><u>R</u>un...</i> dialog box.&nbsp;
You should see an informational message box saying:
<blockquote><i>DLLRegisterServer in c:\Program Files\VAccess\VAccess.dll
succeeded.</i></blockquote>
At this point, the VAccess COM classes are installed and ready for use.&nbsp;
If you ever move the libraries you just registered, you must tell Windows
of the move by re-running this registration procedure.&nbsp; If you ever
remove the VAccess libraries, you should tell Windows that you've removed
them by running the <i>regsvr32</i> command:
<blockquote><i>regsvr32 /u c:\Program Files\VAccess\VAccess.dll</i></blockquote>

<h3>

<hr WIDTH="100%"></h3>

<h3>
<a NAME="Using VAccess From Visual Basic"></a>Using VAccess From Visual
Basic</h3>
This rest of this document discusses what VAccess does and how to make
it do it, using examples written and tested using Visual Basic 6.0. VAccess
can be used from any programming language or environment capable of using
COM objects.&nbsp; The mechanics of using creating and using COM objects
from programming environments such as Microsoft Visual C++, as well of
the basics of Visual Basic, are, however, beyond the scope of this document.
<p>Not every COM object installed on your system is automatically listed
and available in the interactive development environment of Visual Basic.&nbsp;
There are simply too many COM objects, with most of them un-needed in a
typical Visual Basic project anyway.&nbsp; The <i><u>P</u>roject</i> <i>Refere<u>n</u>ces...</i>
menu choice in the Visual Basic development environment lets you select
the libraries you plan to use.
<p>To tell Visual Basic that you need the objects VAccess provides, place
a check next to '<i>VAccess 1.0 Type Library</i>' in the dialog box displayed
by the <i><u>P</u>roject</i> <i>Refere<u>n</u>ces...</i> menu choice.&nbsp;
Once you've done that, the classes defined by VAccess will be available
as types you can use in your Visual Basic programs.&nbsp; Additionally,
the classes, methods, properties, and constants declared and implemented
by VAccess will be visible in the Visual Basic object browser and other
interactive development support tools.
<h3>

<hr WIDTH="100%"></h3>

<h3>
<a NAME="Making Connections"></a>Making Connections</h3>
Before you can do anything with VAccess, you need to make connections.&nbsp;
Actually, you just need to make one <i><a href="#class Connection">Connection</a></i>,
but you can have as many of them as you need.
<p>Making a <i>Connection</i> is actually a two step process -- creating
a <i>Connection</i> object, and attaching that object to a Vision session.&nbsp;
Making a <i>Connection</i> object is easy.&nbsp; Here is one way:
<blockquote><i>Dim myConnection As New Connection</i></blockquote>
This approach declares and initializes a Visual Basic object variable of
type <i>Connection</i>.&nbsp; That <i>Connection</i> object is available
to any Visual Basic code that can use the <i>myConnection</i> variable
without getting a Visual Basic error.
<p>There are other ways to create declare and create <i>Connection</i>
objects.&nbsp; Here's a way that separates the variable declaration and
object creation into separate steps:
<blockquote><i>Dim myConnection As Connection</i>
<p><i>' ... some intervening code</i>
<p><i>Set myConnection =&nbsp; New Connection</i></blockquote>
The details, choices, and Visual Basic style is up to you; however, the
strategy of declaring a single global variable of type <i>New Connection</i>
is well suited to any application that just needs a single connection to
Vision.&nbsp; For efficiency sake, however, it is not a good idea to add
the <i>New</i> modifier to the declaration of a local variable of a subroutine
or function.&nbsp; If you do, the overhead of creating and destroying the
connection will be paid with each call to the subroutine or function.
<p>Depending on what else you're doing with your Visual Basic program,
it is possible that some other library or control may have defined a type
named <i>Connection</i>.&nbsp; If that happens, you can always prefix the
VAccess type name with the name of the VAccess library:
<blockquote><i>Dim myConnection As New VACCESSLib.Connection</i></blockquote>
or:
<blockquote><i>Dim myConnection As VACCESSLib.Connection</i>
<p><i>' ... some intervening code</i>
<p><i>Set myConnection =&nbsp; New VACCESSLib.Connection</i></blockquote>
In the absence of conflicts, the choice is a matter of style.&nbsp; In
the presence of conflicts, this is how you tell Visual Basic what you mean.
<p>Just creating a <i>Connection</i> object by itself isn't enough to do
something useful.&nbsp; You still need a Vision session to do the work.&nbsp;
To obtain that session, you can use the <i><a href="#method Connection::Login">Login</a></i>
method:
<blockquote><i>myConnection.<a href="#method Connection::Login">Login</a>
Hostname, Username, Password</i></blockquote>
to start a new, personal, Vision session or you can use the <i><a href="#method Connection::Connect">Connect</a></i>
method:
<blockquote><i>myConnection.<a href="#method Connection::Connect">Connect</a>
Hostname, Port</i></blockquote>
to attach an existing, shared Vision session.
<p>In these examples, <i>Hostname</i>, <i>Username</i>, and <i>Password</i>
are strings and <i>Port</i> is an integer identifying the port at which
an existing Vision server is listening for connections.
<p>The <i>Login</i> method can also take an optional fourth <i>Command</i>
argument.&nbsp; If supplied, this argument must be of type string.&nbsp;
If you need to pass command line arguments to batchvision, such as an object
space number, or administrative session flag, you must use this parameter.&nbsp;
If you do need to use this parameter, it must include the name or path
of the <i>batchvision</i> executable:
<blockquote><i>Dim bvCommand As String</i>
<br><i>bvCommand = "batchvision -U3"</i>
<p><i>myConnection.Login Hostname, Username, Password, bvCommand</i></blockquote>

<h3>

<hr WIDTH="100%"></h3>

<h3>
<a NAME="Handling Errors"></a>Handling Errors</h3>
If you never make mistakes and your systems never fail, you can ignore
this section.&nbsp; If, however, your programs and the systems you use
to run them are more typical, occasionally things will not work as expected.&nbsp;
The <i>Login</i> and <i>Connect</i> methods just described are the first
place where things can go wrong.&nbsp; That makes this a good place to
discuss how VAccess handles and reports errors.
<p>VAccess is written to support and use the standard error handling interfaces
and features of COM.&nbsp; In particular, it supports the <i>ISupportErrorInfo</i>
COM interface used to make detailed error information available to applications.&nbsp;
What that means to you is that you should be prepared to capture and use
this information.&nbsp; In Visual Basic, that means using the <i>On Error</i>
statement.
<p>There are a number of ways to use the <i>On Error</i> statement.&nbsp;
The choice is largely a matter of style; however, the basics are the same.&nbsp;
Using <i>On Error</i>, you have a chance to learn when errors occur and
obtain more information about the errors that do occur.&nbsp; Here is one
style, used to wrap the <i>Login</i> call illustrated in the previous section:
<blockquote><i>Sub DoLogin ()</i>
<br><i>&nbsp;&nbsp; On Error GoTo HandleError</i>
<p><i>&nbsp;&nbsp;&nbsp; myConnection.Login Hostname, Username, Password</i>
<p><i>&nbsp;&nbsp;&nbsp; MsgBox "Logged into " &amp; Hostname &amp; " as
user " &amp; Username</i>
<p><i>&nbsp;&nbsp;&nbsp; Exit Sub</i>
<p><i>HandleError:</i>
<br><i>&nbsp;&nbsp;&nbsp; MsgBox "Error # " &amp; Hex$(Err.Number) &amp;
"&nbsp; From " &amp; Err.Source &amp; ": " &amp; Err.Description</i>
<br><i>End Sub</i></blockquote>
Because VAccess generates error information in response to invalid input,
failed connections, and un-runnable requests, you should get into the habit
of using an appropriate <i>On Error</i> style of error handling in any
routines that you are not absolutely certain will work every time.&nbsp;
If you don't, an error may cause your application to terminate when you
least expect it.
<h3>

<hr SIZE=4 WIDTH="100%"></h3>

<h3>
<a NAME="Running Vision Expressions"></a>Running Vision Expressions</h3>
Armed with a <i>Connection</i> object and a successful call to either the
<i>Login</i>
or <i>Connect</i> method, you can start to do things with Vision.&nbsp;
Among the simplest is capturing the output generated by a Vision expression:
<blockquote><i>Dim balanceSheet As String</i>
<br><i>balanceSheet = myConnection.<a href="#method Connection::Submit">Submit</a>
("Named Company IBM balanceSheet")</i></blockquote>
The <i>Submit</i> method takes several optional arguments.&nbsp; Two of
the most useful are <i>Date</i> and <i>Currency</i>.&nbsp; Using these
optional parameters, the following expression asks for IBM's balance sheet
as of December 31st, 1999, stated in Swiss Francs:
<blockquote><i>balanceSheet = myConnection.<a href="#method Connection::Submit">Submit</a>
("Named Company IBM balanceSheet", "19991231", "CHF")</i></blockquote>
If supplied, both <i>Date</i> and <i>Currency</i> should be strings.&nbsp;
If <i>Date</i> is supplied, it should be a string suitable for use with
Vision's <i>asDate</i> message.&nbsp; If <i>Currency</i> is supplied, it
should be an alias for one of the currencies stored in your Vision data
base.
<p>Other variations on the <i>Submit</i> method exist.&nbsp; These include
an <i><a href="#method Connection::Execute">Execute</a></i> method that
evaluates an expression, discarding the output, and an <i><a href="#method Connection::Include">Include</a></i>
method that loads and evaluates a server resident file of Vision code.
<p>The <i>Submit</i> method and its variants are all examples of unstructured
queries.&nbsp; They take arbitrary Vision expressions as input and, if
they return anything, simply return the output generated by the expressions
they've evaluated.&nbsp; There are methods that make structured, data oriented,
queries as well.
<h3>

<hr WIDTH="100%"></h3>

<h3>
<a NAME="Getting Data Points"></a>Getting Data Points</h3>
The simplest of the structured query operations are the <i>Get...</i> methods
of the <i>Connection</i> class.&nbsp; There are four <i>Get...</i> methods:
<i><a href="#method Connection::GetValue">GetValue</a></i>,
<i><a href="#method Connection::GetDouble">GetDouble</a></i>,
<i><a href="#method Connection::GetLong">GetLong</a></i>,
and <i><a href="#method Connection::GetString">GetString</a></i>.&nbsp;
These methods all retrieve a single data point for a single entity.&nbsp;
Here's how to use the <i>GetDouble</i> function to retrieve IBM's sales:
<blockquote><i>Dim ibmSales As Double</i>
<p><i>If myConnection.<a href="#method Connection::GetDouble">GetDouble</a>(ibmSales,
"Company", "IBM", "sales") Then</i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "IBM Sales = "
&amp; ibmSales</i>
<br><i>Else</i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "IBM Sales Not
Available."</i>
<br><i>End If</i></blockquote>
All of the <i>Get...</i> functions return a non zero value (i.e., <i>True</i>)
if the data point you requested could be retrieved and converted to the
type implied by the <i>Get...</i> function you called.&nbsp; All expect
four arguments:
<ol>
<li>
a variable of the appropriate type to receive the retrieved data point</li>

<li>
a string containing the name of one of Vision's entity classes</li>

<li>
a string containing a naming dictionary alias for an entity of that class</li>

<li>
a string containing the name of an item or Vision expression to be evaluated
for that entity.</li>
</ol>
In addition, all of these functions accept two optional parameters -- <i>Date</i>
and <i>Currency</i>.&nbsp; If supplied, they specify the as-of date of
the query and currency in which to express the result.&nbsp; Here's the
previous query, modified to return its result in <i>Swiss Francs</i>:
<blockquote><i>Dim ibmSales As Double</i>
<br><i>If myConnection.GetDouble(ibmSales, "Company", "IBM", "sales", Currency:="CHF")
Then</i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "IBM Sales = "
&amp; ibmSales</i>
<br><i>Else</i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "IBM Sales Not
Available"</i>
<br><i>End If</i></blockquote>
As with <i>Submit</i>, both <i>Date</i> and <i>Currency</i> should be strings.&nbsp;
If <i>Date</i> is supplied, it should be a string suitable for use with
Vision's <i>asDate</i> message.&nbsp; If <i>Currency</i> is supplied, it
should be an alias for one of the currencies stored in your Vision data
base.
<h3>

<hr WIDTH="100%"></h3>

<h3>
<a NAME="Getting Data Arrays"></a>Getting Data Arrays</h3>
The <i>Get...</i> functions described in the previous section provide a
simple, point at a time interface to Vision entity data.&nbsp; They are
an <b><i>inefficient</i></b> way to retrieve data for collections of entities
and time points.&nbsp; To retrieve data in bulk, you need to use the array
access capabilities of VAccess.
<p>Bulk queries are specified using instances of the VAccess <i><a href="#class ExtractWS">ExtractWS</a></i>
class.&nbsp; The ExtractWS class is based on and built using the <b><a href="tkInterface.htm#extract">Interface
ExtractWS</a></b> Vision ToolKit.&nbsp; You obtain instances of the <i>ExtractWS</i>
class by asking your <i>Connection</i> for them.&nbsp; You can also copy
an existing
<i>ExtractWS</i> instance, but, ultimately, you'll have to
ask your <i>Connection</i> for the first one:
<blockquote><i>Dim myFirstExtractWS As ExtractWS</i>
<br><i>Set myFirstExtractWS = myConnection.<a href="#method Connection::NewExtractWS">NewExtractWS</a></i></blockquote>

<p><br>You can create and use as many <i>ExtractWS</i> objects as you need.
<p>The <i>ExtractWS</i> class provides you with a means for returning two-dimensional
cross-sections of entity, item, and time varying data.&nbsp; The class
provides you with a number of properties and methods for controlling what
you retrieve.&nbsp; Here's an example that requests a array of entity by
item data for a collection of securities:
<blockquote><i>With myFirstExtractWS</i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .<a href="#method ExtractWS::SetOrientationTo">SetOrientationToEI</a></i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .<a href="#method ExtractWS::SetEntityTypeTo">SetEntityTypeTo</a>
"Security"</i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .<a href="#method ExtractWS::AddEntity">AddEntity</a>
"GM"</i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .AddEntity "IBM"</i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .AddEntity "HWP"</i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .AddEntity "MSFT"</i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .AddEntity "XON"</i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .<a href="#method ExtractWS::AddTypedItem">AddTypedItem</a>
"name", ItemType_String</i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .AddTypedItem "price",
ItemType_Real</i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .AddTypedItem "price@95",
ItemType_Real</i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .AddTypedItem "company
funDataA sales", ItemType_Real</i>
<br><i>End With</i></blockquote>
The preceeding code specifies a query.&nbsp; The following code runs it:
<blockquote><i>Dim myFirstDatumArray As <a href="#class DatumArray">DatumArray</a></i>
<br><i>Set myFirstDatumArray = myFirstExtractWS.<a href="#method ExtractWS::Run">Run</a></i></blockquote>
The <i>Run</i> method returns a <i>DatumArray</i> object that actually
holds the array of data.&nbsp; You can ask a <i>DatumArray</i> for information
about its dimensionality:
<blockquote><i>Debug.Print myFirstDatumArray.<a href="#property DatumArray::DimensionCount">DimensionCount</a></i></blockquote>
Of course, given that <i>ExtractWS</i> objects can specify only two dimensional
queries at the moment, the <i>DimensionCount</i> property will always return
two.
<p>You can also ask for the number of elements along each of axis of the
<i>DatumArray</i>:
<blockquote><i>Debug.Print myFirstDatumArray.<a href="#property DatumArray::ElementCount">ElementCount</a>(0)</i>
<br><i>Debug.Print myFirstDatumArray.<a href="#property DatumArray::ElementCount">ElementCount</a>(1)</i></blockquote>
In this example, <i>Debug.Print myFirstDatumArray.ElementCount(0)</i> displays
5, the number of entities in the request while <i>Debug.Print myFirstDatumArray.ElementCount(1)</i>
displays 4, the number of items.
<p>Asking about the number and order of the elements is interesting, and
there is a little bit more to say about the topic, but what you really
want is the array of data in a form you can use it.&nbsp; Depending on
the capabilities of the environment and programming language you're using,
you can choose to have the array of element values returned as the result
of a function:
<blockquote><i>Dim myArray()</i>
<br><i>myArray = myFirstDatumArray.<a href="#method DatumArray::AsVariantArray">AsVariantArray</a></i></blockquote>
or as the value of an argument to a subroutine:
<blockquote><i>Dim myArray()</i>
<br><i>myFirstDatumArray.<a href="#method DatumArray::GetVariantArray">GetVariantArray</a>
myArray</i></blockquote>
In Visual Basic 6.0, both approaches work.&nbsp; In other environments,
only one of these approaches may work.
<p>With your array in hand, it is finally time for you to examine its elements.&nbsp;
At this point, that little bit more to say about the number of elements
in the array needs to be said.&nbsp; The arrays returned by these methods
began life in a C++ program.&nbsp; Unfortunately, C++ and Visual Basic
have different ideas about how the elements of an array are organized.&nbsp;
As you probably noted above, the <i>first</i>, or <i>row</i>, dimension
of this result represents the entities and the <i>second</i>, or <i>column</i>,
dimension represents the items.&nbsp; The element counts reflect this --
<i>myFirstDatumArray.ElementCount(0)
= 5</i>, the number of entities you specified, and <i>myFirstDatumArray.ElementCount(1)
= 4</i>, the number of items you requested.&nbsp; If you are programming
in C or C++, you could traverse the array using a loop of the form:
<blockquote><i><tt>unsigned int rows = myFirstDatumArray.ElementCount(0);</tt></i>
<br><i><tt>unsigned int cols = myFirstDatumArray.ElementCount(1);</tt></i>
<br><i><tt>unsigned int row, col;</tt></i>
<br><i><tt>for (row = 0; row &lt; myFirstDatumArray.ElementCount(0); row++)</tt></i>
<br><i><tt>&nbsp;&nbsp;&nbsp; for (col = 0; col &lt; myFirstDatumArray.ElementCount(1);
col++)</tt></i>
<br><i><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoSomethingWith (myFirstDatumArray[<b>row,col</b>]);</tt></i></blockquote>
Visual Basic transposes this, reversing the interpretation of rows and
columns.&nbsp; Consequently, using this array from Visual Basic requires
that you reverse the order of the subscripts:
<blockquote><i>Dim myArrayValues()</i>
<br><i>myArrayValues = myDatumArray.AsVariantArray</i>
<p><i>Dim row As Integer, col As Integer</i></blockquote>

<blockquote><i>For row = 0 To myDatumArray.ElementCount(0) - 1</i>
<br><i>&nbsp;&nbsp;&nbsp; For col = 0 To myDatumArray.ElementCount(1) -
1</i>
<br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print row, col,
myArrayValues(<b>col, row</b>)</i>
<br><i>&nbsp;&nbsp;&nbsp; Next col</i>
<br><i>Next row</i></blockquote>
That said, the little bit more to say about element counts and ordering
has been said.
<p>So far, this example has illustrated how to obtain an array of <i>Variant</i>
values.&nbsp; A <i>Variant</i> can hold a value of any type.&nbsp; Because
this extract workspace returns an array containing both strings and numbers,
accessing its result as an array of <i>Variants</i> is appropriate .&nbsp;
If your extract workspace generates a homogeneous collection of values,
you can be more specific in your choice of array access methods.&nbsp;
For example, if your query was for a matrix of pricing data:
<blockquote><i>Dim myOtherExtractWS As ExtractWS</i>
<br><i>Set myOtherExtractWS = myConnection.NewExtractWS</i>
<p><i>With myOtherExtractWS</i>
<br><i>&nbsp;&nbsp;&nbsp; .<a href="#method ExtractWS::SetOrientationTo">SetOrientationToET</a></i>
<br><i>&nbsp;&nbsp;&nbsp; .SetEntityTypeTo "Security"</i>
<br><i>&nbsp;&nbsp;&nbsp; .SetTypedItemTo "price", ItemType_Real</i>
<br><i>&nbsp;&nbsp;&nbsp; .<a href="#method ExtractWS::SetEntityListTo">SetEntityListTo</a>
"GM, IBM, HWP, XON"</i>
<br><i>&nbsp;&nbsp;&nbsp; .<a href="#method ExtractWS::AddDate">AddDate</a>
"9612"</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddDate "9611"</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddDate "9610"</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddDate "9609"</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddDate "9608"</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddDate "9607"</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddDate "9606"</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddDate "9605"</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddDate "9604"</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddDate "9603"</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddDate "9602"</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddDate "9601"</i>
<br><i>End With</i></blockquote>
you could access your result directly as an array of <i>Double</i> values.&nbsp;
Again, two array access forms are available, one that returns the array
as the result of a function:
<blockquote><i>Dim myArray() As Double</i>
<br><i>myArray = myOtherExtractWS.Run.<a href="#method DatumArray::AsDoubleArray">AsDoubleArray</a></i></blockquote>
and one that modifies a parameter to a subroutine:
<blockquote><i>Dim myArray() As Double</i>
<br><i>myOtherExtractWS.Run.<a href="#method DatumArray::GetDoubleArray">GetDoubleArray</a>
myArray</i></blockquote>
By now, you're probably assuming that versions of these routines exist
that return integer and string arrays as well.&nbsp; You're right.&nbsp;
The additional methods are <i><a href="#method DatumArray::AsLongArray">AsLongArray</a></i>,
<i><a href="#method DatumArray::AsStringArray">AsStringArray</a></i>,
<i><a href="#method DatumArray::GetLongArray">GetLongArray</a></i>,
and
<i><a href="#method DatumArray::GetStringArray">GetStringArray</a></i>.
<p>Besides illustrating how to retrieve homogeneous arrays, the preceeding
example introduces an additional orientation (<i>SetOrientationToET</i>),
another way to specify an entity list (<i>SetEntityListTo</i>), a way to
build a date list (<i>AddDate</i>), and an opportunity to discuss more
efficient ways to specify lists programmatically.
<p>The query contained in <i>myOtherExtractWS</i> built its date list one
element at a time.&nbsp; Given that the date list is just a repeated pattern
of month end dates, Vision can do that just as easily.&nbsp; Here's how
to make Vision do the work:
<blockquote><i>With myOtherExtractWS</i>
<br><i>&nbsp;&nbsp;&nbsp; .SetOrientationToET</i>
<br><i>&nbsp;&nbsp;&nbsp; .SetEntityTypeTo "Security"</i>
<br><i>&nbsp;&nbsp;&nbsp; .SetTypedItemTo "price", ItemType_Real</i>
<br><i>&nbsp;&nbsp;&nbsp; .SetEntityListTo "GM, IBM, HWP, XON"</i>
<br><i>&nbsp;&nbsp;&nbsp; .<a href="#method ExtractWS::SetDateListExpressionTo">SetDateListExpressionTo</a>
"9612 to: 9601 by: 1 monthEnds. asDateList"</i>
<br><i>End With</i></blockquote>
The <i>SetDateListExpressionTo</i> method's single argument is a string
containing a Vision expression.&nbsp; The only constraint on that Vision
expression is that it must return a list of dates as its value.
<p>While derving a list of dates dynamically is useful, dynamically deriving
an entity list is even more useful and often necessary.&nbsp; While you
can always write your COM client to compute and add a list of dates to
your extract workspace, the same cannot be said for lists of entities.&nbsp;
In some cases, such as the list of accounts holding a particular security,
the list is already stored in the Vision database.&nbsp; In other cases,
such as the list of companies passing a particular screen, the list must
be derived using a Vision query.&nbsp; To illustrate, here's a query that
asks for data about the accounts that currently hold Microsoft:
<blockquote><i>Dim myHoldingsQuery As ExtractWS</i>
<br><i>Set myHoldingsQuery = myConnection.NewExtractWS</i>
<p><i>With myHoldingsQuery</i>
<br><i>&nbsp;&nbsp;&nbsp; .SetOrientationToEI</i>
<br><i>&nbsp;&nbsp;&nbsp; .<a href="#method ExtractWS::SetEntityTypeTo">SetEntityTypeTo</a>
"Security"</i>
<br><i>&nbsp;&nbsp;&nbsp; .<a href="#method ExtractWS::SetEntityTo">SetEntityTo</a>
"MSFT"</i>
<br><i>&nbsp;&nbsp;&nbsp; .<a href="#method ExtractWS::SetEntityListExpressionTo">SetEntityListExpressionTo</a>
"holdings"</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddTypedItem "account name", ItemType_String</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddTypedItem "shares", ItemType_Real</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddTypedItem "totalCost", ItemType_Real</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddTypedItem "totalMarketValue", ItemType_Real</i>
<br><i>&nbsp;&nbsp;&nbsp; .<a href="#method ExtractWS::SetRowLabelsOn">SetRowLabelsOn</a></i>
<br><i>End With</i></blockquote>
The list of entities actually returned using this extract workspace is
specified in two parts.&nbsp; The first part specifies an entity.&nbsp;
The <i><a href="#method ExtractWS::SetEntityTypeTo">SetEntityTypeTo</a>
"Security"</i> and <i><a href="#method ExtractWS::SetEntityTo">SetEntityTo</a>
"MSFT"</i> statements in this example specify that entity.&nbsp; The second
part of the specification supplies an expression that the entity will be
asked to evaluate.&nbsp; That expression is expected to return a list of
objects that will actually be asked to supply the data returned in the
data array.&nbsp; The <i><a href="#method ExtractWS::SetEntityListExpressionTo">SetEntityListExpressionTo</a>
"holdings"</i> statement specifies that expression in this example.&nbsp;
The objects returned (in this case, a list of <i>Holding</i> objects) are
then asked to supply the item data requested by the remainder of the extract
workspace query.
<p>Using some simple applications of Vision's conventions for organizing
data, entity list expressions can also be used to specify general queries.&nbsp;
For example, every entity class in Vision has a <i>default</i> instance.&nbsp;
Every instance of a class responds to a <i>masterList</i> message that
returns a list of the non-default, non-deleted, instances of that class.&nbsp;
Here's how to use that information to build an extract workspace that screens
and sorts the current universe of companies:
<blockquote><i>Dim myCompanyScreen As ExtractWS</i>
<br><i>Set myCompanyScreen = myConnection.NewExtractWS</i>
<p><i>With myCompanyScreen</i>
<br><i>&nbsp;&nbsp;&nbsp; .SetOrientationToEI</i>
<br><i>&nbsp;&nbsp;&nbsp; .SetEntityTypeTo "Company"</i>
<br><i>&nbsp;&nbsp;&nbsp; .SetEntityTo "Default"</i>
<br><i>&nbsp;&nbsp;&nbsp; .SetEntityListExpressionTo "masterList select:
[sales > 50000]. sortDown: [sales]"</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddTypedItem "name", ItemType_String</i>
<br><i>&nbsp;&nbsp;&nbsp; .AddTypedItem "sales", ItemType_Real</i>
<br><i>End With</i></blockquote>
Most of the examples you've seen so far create new extract workspace objects.&nbsp;
Extract workspace objects can also be reused.&nbsp; For example, you can
build an extract workspace that contains a standard list of items and other
settings, and re-run that workspace as often as you like, changing just
the parameters you need to change.&nbsp; For example, here's a way to reuse
the <i>myHoldingsQuery</i> extract workspace created above:
<blockquote><i>Dim msftHoldings as DatumArray</i>
<br><i>Set msftHoldings = myHoldingsQuery.Run</i>
<p><i>myHoldingsQuery.SetEntityTo "IBM"</i>
<p><i>Dim ibmHoldings as DatumArray</i>
<br><i>Set ibmHoldings = myHoldingsQuery.Run</i></blockquote>
When you reuse an extract workspace, you do not incur the overhead of creating
a new workspace.&nbsp; Further, only the settings you change are actually
sent to Vision when you run the query.
<p>At this point, you should have a basic understanding of how to use extract
workspaces to build and run structured data access queries.&nbsp; There
are <a href="#class ExtractWS">other extract workspace options and operations</a>
that should help you to build exactly the query you need.
<h3>

<hr SIZE=4 WIDTH="100%"></h3>

<h3>
<a NAME="VAccess Reference"></a>VAccess Reference</h3>

<h4>
Classes</h4>

<ul>
<li>
<a href="#class Connection">Connection</a></li>

<li>
<a href="#class DatumArray">DatumArray</a></li>

<li>
<a href="#class ExtractWS">ExtractWS</a></li>

<li>
<a href="#class FormatSettings">FormatSettings</a></li>
</ul>

<h4>
Constants</h4>

<ul>
<li>
<a href="#enum ExtractListType">ExtractListType</a></li>

<li>
<a href="#enum ExtractOrientation">ExtractOrientation</a></li>

<li>
<a href="#enum ItemType">ItemType</a></li>
</ul>

<h4>

<hr WIDTH="100%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14>&nbsp;<a NAME="class Connection"></a>class
Connection</h4>
Instances of class <i>Connection</i> manage your Vision sessions. You need
at least one <i>Connection</i> object to use Vision; however, you can have
as many as you need.
<p><i>Connection</i> objects support two strategies for accessing Vision.
The <i><a href="#method Connection::Login">Login</a></i> method uses the
remote execution service to start a personal Vision session.&nbsp; The
<i><a href="#method Connection::Connect">Connect</a></i>
method contacts an existing Vision server listening on a known port.
<p>Both the <i>Login</i> and <i>Connect</i> methods can be called any number
of times.&nbsp; If the <i>Connection</i> object is currently attached to
a Vision session, that session will be disconnected and replaced by the
session specified by the call.&nbsp; If the disconnected session was a
private session, any work done in that session will be lost unless you
have made provision to save it.
<p>All connection objects allow you to execute Vision expressions, load
server resident Vision include files, obtain the value of a data items
and expressions for entities in your data base, and create objects that
specify and retrieve arrays of data.
<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method Connection::Connect"></a>method
<a href="#class Connection">Connection</a>::Connect</h4>

<h5>
Synopsis:</h5>

<blockquote>Sub Connect&nbsp; (Hostname As String, Port As Long)</blockquote>

<h5>
Description:</h5>

<blockquote>A method that attaches this <i><a href="#class Connection">Connection</a></i>
to the existing, shared, Vision session running on server <i>Hostname</i>
and listening for incoming connections at port <i>Port</i>.&nbsp; All errors
encountered attaching to that session are reported using COM's exception
generation mechanisms.</blockquote>

<h5>
Related Properties and Methods:</h5>

<dl>
<li>
<a href="#method Connection::Disconnect">Disconnect</a></li>

<li>
<a href="#property Connection::IsConnected">IsConnected</a></li>

<li>
<a href="#method Connection::Login">Login</a></li>
</dl>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method Connection::Disconnect"></a>method
<a href="#class Connection">Connection</a>::Disconnect</h4>

<h5>
Synopsis:</h5>

<blockquote>Sub Disconnect&nbsp; ()</blockquote>

<h5>
Description:</h5>

<blockquote>A method that disconnects this <i>Connection</i> from its Vision
session.&nbsp; If the session was started using the <i><a href="#method Connection::Login">Login</a></i>
method, your work will be lost unless you have made provision to save it
or keep the session alive by some other means.</blockquote>

<h5>
Related Properties and Methods:</h5>

<dl>
<li>
<a href="#method Connection::Connect">Connect</a></li>

<li>
<a href="#property Connection::IsConnected">IsConnected</a></li>

<li>
<a href="#method Connection::Login">Login</a></li>
</dl>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method Connection::Execute"></a>method
<a href="#class Connection">Connection</a>::Execute</h4>

<h5>
Synopsis:</h5>

<blockquote>Sub Execute (Expression As String, Optional Date [As String],
Optional Currency [As String])</blockquote>

<h5>
Description:</h5>

<blockquote>A method that executes a Vision <i>Expression</i> as of an
optional <i>Date</i> and <i>Currency</i>.&nbsp; The output produced by
<i>Expression</i>
is discarded.&nbsp; If specified, <i>Date</i> and <i>Currency</i> must
be strings.&nbsp; <i>Date</i> must use a date format recognized by Vision.
<i>Currency</i>
must be an alias for one of the currencies stored in your Vision database.</blockquote>

<h5>
Related Properties and Methods:</h5>

<dl>
<li>
<a href="#method Connection::Include">Include</a></li>

<li>
<a href="#method Connection::Submit">Submit</a></li>
</dl>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property Connection::FormatSettings"></a>property
<a href="#class Connection">Connection</a>::FormatSettings</h4>

<h5>
Synopsis:</h5>

<blockquote>Property Get FormatSettings () As <a href="#class FormatSettings">FormatSettings</a></blockquote>

<h5>
Description:</h5>

<blockquote>A read-only property whose value is the <i><a href="#class FormatSettings">FormatSettings</a></i>
object associated with this <i><a href="#class Connection">Connection</a></i>.</blockquote>

<h5>
Related Properties and Methods:</h5>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method Connection::GetDouble"></a>method
<a href="#class Connection">Connection</a>::GetDouble</h4>

<h5>
Synopsis:</h5>

<blockquote>Function GetDouble (
<br>&nbsp;&nbsp;&nbsp; Result As Double,
<br>&nbsp;&nbsp;&nbsp; EntityType As String,
<br>&nbsp;&nbsp;&nbsp; Entity As String,
<br>&nbsp;&nbsp;&nbsp; Item As String,
<br>&nbsp;&nbsp;&nbsp; Optional Date [As String],
<br>&nbsp;&nbsp;&nbsp; Optional Currency [As String],
<br>) As Boolean</blockquote>

<h5>
Description:</h5>

<blockquote>A function that retrieves a value of type <i>Double</i> for
a single entity and item, as of an optional date and converted to an optional
currency. If specified, <i>Date</i> and <i>Currency</i> must be strings.
<i>Date</i>
must use a date format recognized by Vision.&nbsp; <i>Currency</i> must
be an alias for one of the currencies stored in your Vision database.
<p>This function returns <i>True</i> if the requested item was successfully
retrieved and converted to a <i>Double</i> and <i>False</i> otherwise.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method Connection::GetLong">GetLong</a></li>

<li>
<a href="#method Connection::GetString">GetString</a></li>

<li>
<a href="#method Connection::GetValue">GetValue</a></li>

<li>
<a href="#method Connection::NewExtractWS">NewExtractWS</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method Connection::GetLong"></a>method
<a href="#class Connection">Connection</a>::GetLong</h4>

<h5>
Synopsis:</h5>

<blockquote>Function GetLong (
<br>&nbsp;&nbsp;&nbsp; Result As Long,
<br>&nbsp;&nbsp;&nbsp; EntityType As String,
<br>&nbsp;&nbsp;&nbsp; Entity As String,
<br>&nbsp;&nbsp;&nbsp; Item As String,
<br>&nbsp;&nbsp;&nbsp; Optional Date [As String],
<br>&nbsp;&nbsp;&nbsp; Optional Currency [As String],
<br>) As Boolean</blockquote>

<h5>
Description:</h5>

<blockquote>A function that retrieves a value of type <i>Long</i> for a
single entity and item, as of an optional date and converted to an optional
currency.&nbsp; If specified, <i>Date</i> and <i>Currency</i> must be strings.
<i>Date</i>
must use a date format recognized by Vision.&nbsp; <i>Currency</i> must
be an alias for one of the currencies stored in your Vision database.
<p>This function returns <i>True</i> if the result was successfully retrieved
and converted to a <i>Long</i> integer and <i>False</i> otherwise.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method Connection::GetDouble">GetDouble</a></li>

<li>
<a href="#method Connection::GetString">GetString</a></li>

<li>
<a href="#method Connection::GetValue">GetValue</a></li>

<li>
<a href="#method Connection::NewExtractWS">NewExtractWS</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method Connection::GetString"></a>method
<a href="#class Connection">Connection</a>::GetString</h4>

<h5>
Synopsis:</h5>

<blockquote>Function GetString (
<br>&nbsp;&nbsp;&nbsp; Result As String,
<br>&nbsp;&nbsp;&nbsp; EntityType As String,
<br>&nbsp;&nbsp;&nbsp; Entity As String,
<br>&nbsp;&nbsp;&nbsp; Item As String,
<br>&nbsp;&nbsp;&nbsp; Optional Date [As String],
<br>&nbsp;&nbsp;&nbsp; Optional Currency [As String],
<br>) As Boolean</blockquote>

<h5>
Description:</h5>

<blockquote>A function that retrieves a value of type <i>String</i> for
a single entity and item, as of an optional date and converted to an optional
currency.&nbsp; If specified, <i>Date</i> and <i>Currency</i> must be strings.
<i>Date</i>
must use a date format recognized by Vision.&nbsp; <i>Currency</i> must
be an alias for one of the currencies stored in your Vision database.
<p>This function returns <i>True</i> if the result was successfully retrieved
and <i>False</i> otherwise.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method Connection::GetDouble">GetDouble</a></li>

<li>
<a href="#method Connection::GetLong">GetLong</a></li>

<li>
<a href="#method Connection::GetValue">GetValue</a></li>

<li>
<a href="#method Connection::NewExtractWS">NewExtractWS</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method Connection::GetValue"></a>method
<a href="#class Connection">Connection</a>::GetValue</h4>

<h5>
Synopsis:</h5>

<blockquote>Function GetValue (
<br>&nbsp;&nbsp;&nbsp; Result As Variant,
<br>&nbsp;&nbsp;&nbsp; EntityType As String,
<br>&nbsp;&nbsp;&nbsp; Entity As String,
<br>&nbsp;&nbsp;&nbsp; Item As String,
<br>&nbsp;&nbsp;&nbsp; Optional Date [As String],
<br>&nbsp;&nbsp;&nbsp; Optional Currency [As String],
<br>) As Boolean</blockquote>

<h5>
Description:</h5>

<blockquote>A function that retrieves a value for a single entity and item,
as of an optional date and converted to an optional currency.&nbsp; If
specified, <i>Date</i> and <i>Currency</i> must be strings.&nbsp; <i>Date</i>
must use a date format recognized by Vision.&nbsp; <i>Currency</i> must
be an alias for one of the currencies stored in your Vision database.
<p>This function returns <i>True</i> if the result was successfully retrieved
and <i>False</i> otherwise.&nbsp; The result will be returned using the
most specific numeric type possible.&nbsp; In particular, if the value
can be represented as a <i>Long</i>, it will be returned as a
<i>Long</i>.
If the value cannot be represented as a <i>Long</i>, but can be returned
as a <i>Double</i>, it will be returned as a <i>Double</i>.&nbsp; If neither
conversion is possible, the value will be returned as a <i>String</i>.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method Connection::GetDouble">GetDouble</a></li>

<li>
<a href="#method Connection::GetLong">GetLong</a></li>

<li>
<a href="#method Connection::GetString">GetString</a></li>

<li>
<a href="#method Connection::NewExtractWS">NewExtractWS</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method Connection::Include"></a>method
<a href="#class Connection">Connection</a>::Include</h4>

<h5>
Synopsis:</h5>

<blockquote>Sub Include (RemoteFileName As String)</blockquote>

<h5>
Description:</h5>

<blockquote>A method that loads the Vision code contained in <i>RemoteFileName</i>
into the attached Vision session.&nbsp; Note that <i>RemoteFileName</i>
is the name of a file residing on the machine running your Vision session.&nbsp;
That machine is not necessarily the machine running your COM application.</blockquote>

<h5>
Related Properties and Methods:</h5>

<dl>
<li>
<a href="#method Connection::Execute">Execute</a></li>

<li>
<a href="#method Connection::Submit">Submit</a></li>
</dl>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property Connection::IsConnected"></a>property
<a href="#class Connection">Connection</a>::IsConnected</h4>

<h5>
Synopsis:</h5>

<blockquote>Property Get IsConnected () As Boolean</blockquote>

<h5>
Description:</h5>

<blockquote>A read-only property whose value is <i>True</i> if this <i>Connection</i>
is currently attached to a Vision session, and <i>False</i> otherwise.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method Connection::Connect">Connect</a></li>

<li>
<a href="#method Connection::Disconnect">Disconnect</a></li>

<li>
<a href="#method Connection::Login">Login</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method Connection::Login"></a>method
<a href="#class Connection">Connection</a>::Login</h4>

<h5>
Synopsis:</h5>

<blockquote>Sub Login (
<br>&nbsp;&nbsp;&nbsp; Hostname As String,
<br>&nbsp;&nbsp;&nbsp; Username As String,
<br>&nbsp;&nbsp;&nbsp; Password As String,
<br>&nbsp;&nbsp;&nbsp; Optional Command [As String]
<br>)</blockquote>

<h5>
Description:</h5>

<blockquote>A method that attaches this <i>Connection</i> to a new, private
Vision session running on <i>Hostname</i>.&nbsp; That session is started
for the user identified by <i>Username</i> and <i>Password</i> using the
remote execution service on <i>Hostname</i>.&nbsp; <i>Command</i> is optional.&nbsp;
If specified, it must be a string that specifies the complete <i>batchvision</i>
command needed to start the session, including, if necessary, the path
name of the <i>batchvision</i> executable.&nbsp; Here's an example that
starts an administrative batchvision session running in object space 3:
<blockquote><i>batchvision -n /localvision/network/NDF -U3</i></blockquote>
Any errors encountered attaching to the specified Vision session, including
login errors caused by an invalid username or password, are reported using
COM's exception generation mechanism.</blockquote>

<h5>
Related Properties and Methods:</h5>

<blockquote>
<li>
<i><a href="#method Connection::Connect">Connect</a></i></li>
</blockquote>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method Connection::NewExtractWS"></a>method
<a href="#class Connection">Connection</a>::NewExtractWS</h4>

<h5>
Synopsis:</h5>

<blockquote>Function NewExtractWS () As <a href="#class ExtractWS">ExtractWS</a></blockquote>

<h5>
Description:</h5>

<blockquote>A function that creates and returns a new <a href="#class ExtractWS">extract
workspace</a> object.</blockquote>

<h5>
Related Properties and Methods:</h5>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method Connection::Submit"></a>method
<a href="#class Connection">Connection</a>::Submit</h4>

<h5>
Synopsis:</h5>

<blockquote>Function Submit (
<br>&nbsp;&nbsp;&nbsp; Expression As String,
<br>&nbsp;&nbsp;&nbsp; Optional Date [As String],
<br>&nbsp;&nbsp;&nbsp; Optional Currency [As String],
<br>&nbsp;&nbsp;&nbsp; Optional ReplyBufferInitialSize [As Long],
<br>&nbsp;&nbsp;&nbsp; Optional ReplyBufferSizeIncrement [As Long]
<br>) As String</blockquote>

<h5>
Description:</h5>

<blockquote>A function that executes a Vision <i>Expression</i> as of an
optional <i>Date</i> and converted to an optional <i>Currency</i>.&nbsp;
If specified, <i>Date</i> and <i>Currency</i> must be strings.&nbsp; If
supplied, the <i>Date</i> string must use a date format recognized by Vision
and <i>Currency</i> must be an alias for one of the currencies stored in
your Vision database.&nbsp; The output generated by <i>Expression</i> is
returned as the string value of this function.
<p>This method supports two optional arguments that may be useful when
capturing large amounts of output.&nbsp; Except in rare cases, you can
safely ignore these arguments, since the internal output algorithm is intelligent
and adaptive.&nbsp; In some cases, however, if you know that your Vision
expression will generate a large amount of output, <i>ReplyBufferInitialSize</i>
and <i>ReplyBufferSizeIncrement</i> may make the process of capturing that
output more efficient.&nbsp; <i>ReplyBufferInitialSize</i> sets the initial
size of the output capture buffer; <i>ReplyBufferSizeIncrement</i> specifies
the size by which that buffer grows whenever it is full.&nbsp; If you specify
a value for either or both of these optional arguments, that value should
be a positive integer.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method Connection::Execute">Execute</a></li>

<li>
<a href="#method Connection::Include">Include</a></li>

<h4>

<hr WIDTH="100%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14>&nbsp;<a NAME="class DatumArray"></a>class
DatumArray</h4>
Instances of class <i>DatumArray</i> hold arrays of data returned from
<i><a href="#class ExtractWS">ExtractWS</a></i>
structured queries.&nbsp; They exist to provide the multiple array element
retrieval interfaces required by different COM clients.&nbsp; Currently,
two interfaces are supported.&nbsp; Both interfaces return the entire array
in a single call.&nbsp; The two interfaces differ only in their calling
convention: one is function oriented, returning the element array as the
value of a function (<i><a href="#method DatumArray::AsDoubleArray">AsDoubleArray</a></i>,
<i><a href="#method DatumArray::AsLongArray">AsLongArray</a></i>,
<i><a href="#method DatumArray::AsStringArray">AsStringArray</a></i>,
<i><a href="#method DatumArray::AsVariantArray">AsVariantArray</a></i>),
the other is procedure oriented, returning the array via a single procedure
parameter (<i><a href="#method DatumArray::GetDoubleArray">GetDoubleArray</a></i>,
<i><a href="#method DatumArray::GetLongArray">GetLongArray</a></i>,
<i><a href="#method DatumArray::GetStringArray">GetStringArray</a></i>,
<i><a href="#method DatumArray::GetVariantArray">GetVariantArray</a></i>).
<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method DatumArray::AsDoubleArray"></a>method
<a href="#class DatumArray">DatumArray</a>::AsDoubleArray</h4>

<h5>
Synopsis:</h5>

<blockquote>Function AsDoubleArray&nbsp; () As Double ()</blockquote>

<h5>
Description:</h5>

<blockquote>A function that returns the elements of a <i>DatumArray</i>
as an array of doubles.&nbsp; Elements not representable as doubles are
returned as the <i><a href="#property FormatSettings::DoubleNaN">DoubleNaN</a></i>
value supplied by this <i>DatumArray</i>'s <i><a href="#property DatumArray::FormatSettings">FormatSettings</a></i>
object.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method DatumArray::AsLongArray">AsLongArray</a></li>

<li>
<a href="#method DatumArray::AsStringArray">AsStringArray</a></li>

<li>
<a href="#method DatumArray::AsVariantArray">AsVariantArray</a></li>

<li>
<a href="#method DatumArray::GetDoubleArray">GetDoubleArray</a></li>

<li>
<a href="#method DatumArray::GetLongArray">GetLongArray</a></li>

<li>
<a href="#method DatumArray::GetStringArray">GetStringArray</a></li>

<li>
<a href="#method DatumArray::GetVariantArray">GetVariantArray</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method DatumArray::AsLongArray"></a>method
<a href="#class DatumArray">DatumArray</a>::AsLongArray</h4>

<h5>
Synopsis:</h5>

<blockquote>Function AsLongArray&nbsp; () As Long ()</blockquote>

<h5>
Description:</h5>

<blockquote>A function that returns the elements of a <i>DatumArray</i>
as an array of long integers.&nbsp; Elements not representable as long
integers are returned as the <i><a href="#property FormatSettings::LongNaN">LongNaN</a></i>
value of this <i>DatumArray</i>'s <i><a href="#property DatumArray::FormatSettings">FormatSettings</a></i>
object.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method DatumArray::AsDoubleArray">AsDoubleArray</a></li>

<li>
<a href="#method DatumArray::AsStringArray">AsStringArray</a></li>

<li>
<a href="#method DatumArray::AsVariantArray">AsVariantArray</a></li>

<li>
<a href="#method DatumArray::GetDoubleArray">GetDoubleArray</a></li>

<li>
<a href="#method DatumArray::GetLongArray">GetLongArray</a></li>

<li>
<a href="#method DatumArray::GetStringArray">GetStringArray</a></li>

<li>
<a href="#method DatumArray::GetVariantArray">GetVariantArray</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method DatumArray::AsStringArray"></a>method
<a href="#class DatumArray">DatumArray</a>::AsStringArray</h4>

<h5>
Synopsis:</h5>

<blockquote>Function AsStringArray&nbsp; () As String ()</blockquote>

<h5>
Description:</h5>

<blockquote>A function that returns the elements of a <i>DatumArray</i>
as an array of strings.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method DatumArray::AsDoubleArray">AsDoubleArray</a></li>

<li>
<a href="#method DatumArray::AsLongArray">AsLongArray</a></li>

<li>
<a href="#method DatumArray::AsVariantArray">AsVariantArray</a></li>

<li>
<a href="#method DatumArray::GetDoubleArray">GetDoubleArray</a></li>

<li>
<a href="#method DatumArray::GetLongArray">GetLongArray</a></li>

<li>
<a href="#method DatumArray::GetStringArray">GetStringArray</a></li>

<li>
<a href="#method DatumArray::GetVariantArray">GetVariantArray</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method DatumArray::AsVariantArray"></a>method
<a href="#class DatumArray">DatumArray</a>::AsVariantArray</h4>

<h5>
Synopsis:</h5>

<blockquote>Function AsVariantArray () As Variant ()</blockquote>

<h5>
Description:</h5>

<blockquote>A function that returns the elements of a <i>DatumArray</i>
as an array of variants.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method DatumArray::AsDoubleArray">AsDoubleArray</a></li>

<li>
<a href="#method DatumArray::AsLongArray">AsLongArray</a></li>

<li>
<a href="#method DatumArray::AsStringArray">AsStringArray</a></li>

<li>
<a href="#method DatumArray::GetDoubleArray">GetDoubleArray</a></li>

<li>
<a href="#method DatumArray::GetLongArray">GetLongArray</a></li>

<li>
<a href="#method DatumArray::GetStringArray">GetStringArray</a></li>

<li>
<a href="#method DatumArray::GetVariantArray">GetVariantArray</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property DatumArray::DimensionCount"></a>property
<a href="#class DatumArray">DatumArray</a>::DimensionCount</h4>

<h5>
Synopsis:</h5>

<blockquote>Property Get DimensionCount () As Long</blockquote>

<h5>
Description:</h5>

<blockquote>A read-only property whose value is the number of dimensions
in this <i>DatumArray</i>.&nbsp; For <i>DatumArray</i>'s created by <i><a href="#class ExtractWS">ExtractWS</a></i>::<i><a href="#method ExtractWS::Run">Run</a></i>,
the value of this property is always 2.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#property DatumArray::ElementCount">ElementCount</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property DatumArray::ElementCount"></a>property
<a href="#class DatumArray">DatumArray</a>::ElementCount</h4>

<h5>
Synopsis:</h5>

<blockquote>Property Get ElementCount (Dimension As Long) As Long</blockquote>

<h5>
Description:</h5>

<blockquote>A read-only property whose value is the number of elements
along the axis specified by <i>Dimension</i> (0 &lt;= <i>Dimension </i>&lt;
<i><a href="#property DatumArray::DimensionCount">DimensionCount</a></i>).</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#property DatumArray::DimensionCount">DimensionCount</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property DatumArray::FormatSettings"></a>property
<a href="#class DatumArray">DatumArray</a>::FormatSettings</h4>

<h5>
Synopsis:</h5>

<blockquote>Property Get FormatSettings () As <a href="#class FormatSettings">FormatSettings</a></blockquote>

<h5>
Description:</h5>

<blockquote>A read-only property whose value is the <i><a href="#class FormatSettings">FormatSettings</a></i>
object associated with this <i>DatumArray</i>.</blockquote>

<h5>
Related Properties and Methods:</h5>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method DatumArray::GetDoubleArray"></a>method
<a href="#class DatumArray">DatumArray</a>::GetDoubleArray</h4>

<h5>
Synopsis:</h5>

<blockquote>Sub GetDoubleArray (Result () As Double)</blockquote>

<h5>
Description:</h5>

<blockquote>A method that returns the elements of a <i>DatumArray</i> as
an array of doubles.&nbsp; Elements not representable as doubles are returned
as the <i><a href="#property FormatSettings::DoubleNaN">DoubleNaN</a></i>
value supplied by this <i>DatumArray</i>'s <i><a href="#property DatumArray::FormatSettings">FormatSettings</a></i>
object.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method DatumArray::AsDoubleArray">AsDoubleArray</a></li>

<li>
<a href="#method DatumArray::AsLongArray">AsLongArray</a></li>

<li>
<a href="#method DatumArray::AsStringArray">AsStringArray</a></li>

<li>
<a href="#method DatumArray::AsVariantArray">AsVariantArray</a></li>

<li>
<a href="#method DatumArray::GetLongArray">GetLongArray</a></li>

<li>
<a href="#method DatumArray::GetStringArray">GetStringArray</a></li>

<li>
<a href="#method DatumArray::GetVariantArray">GetVariantArray</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method DatumArray::GetLongArray"></a>method
<a href="#class DatumArray">DatumArray</a>::GetLongArray</h4>

<h5>
Synopsis:</h5>

<blockquote>Sub GetLongArray (Result () As Long)</blockquote>

<h5>
Description:</h5>

<blockquote>A method that returns the elements of a <i>DatumArray</i> as
an array of long integers.&nbsp; Elements not representable as long integers
are returned as the <i><a href="#property FormatSettings::LongNaN">LongNaN</a></i>
value of this <i>DatumArray</i>'s <i><a href="#property DatumArray::FormatSettings">FormatSettings</a></i>
object.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method DatumArray::AsDoubleArray">AsDoubleArray</a></li>

<li>
<a href="#method DatumArray::AsLongArray">AsLongArray</a></li>

<li>
<a href="#method DatumArray::AsStringArray">AsStringArray</a></li>

<li>
<a href="#method DatumArray::AsVariantArray">AsVariantArray</a></li>

<li>
<a href="#method DatumArray::GetDoubleArray">GetDoubleArray</a></li>

<li>
<a href="#method DatumArray::GetStringArray">GetStringArray</a></li>

<li>
<a href="#method DatumArray::GetVariantArray">GetVariantArray</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method DatumArray::GetStringArray"></a>method
<a href="#class DatumArray">DatumArray</a>::GetStringArray</h4>

<h5>
Synopsis:</h5>

<blockquote>Sub GetStringArray (Result () As String)</blockquote>

<h5>
Description:</h5>

<blockquote>A method that returns the elements of a <i>DatumArray</i> as
an array of strings.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method DatumArray::AsDoubleArray">AsDoubleArray</a></li>

<li>
<a href="#method DatumArray::AsLongArray">AsLongArray</a></li>

<li>
<a href="#method DatumArray::AsStringArray">AsStringArray</a></li>

<li>
<a href="#method DatumArray::AsVariantArray">AsVariantArray</a></li>

<li>
<a href="#method DatumArray::GetDoubleArray">GetDoubleArray</a></li>

<li>
<a href="#method DatumArray::GetLongArray">GetLongArray</a></li>

<li>
<a href="#method DatumArray::GetVariantArray">GetVariantArray</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method DatumArray::GetVariantArray"></a>method
<a href="#class DatumArray">DatumArray</a>::GetVariantArray</h4>

<h5>
Synopsis:</h5>

<blockquote>Sub GetVariantArray (Result () As String)</blockquote>

<h5>
Description:</h5>

<blockquote>A method that returns the elements of a <i>DatumArray</i> as
an array of variants.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method DatumArray::AsDoubleArray">AsDoubleArray</a></li>

<li>
<a href="#method DatumArray::AsLongArray">AsLongArray</a></li>

<li>
<a href="#method DatumArray::AsStringArray">AsStringArray</a></li>

<li>
<a href="#method DatumArray::AsVariantArray">AsVariantArray</a></li>

<li>
<a href="#method DatumArray::GetDoubleArray">GetDoubleArray</a></li>

<li>
<a href="#method DatumArray::GetLongArray">GetLongArray</a></li>

<li>
<a href="#method DatumArray::GetStringArray">GetStringArray</a></li>

<h4>

<hr WIDTH="100%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14>&nbsp;<a NAME="class ExtractWS"></a>class
ExtractWS</h4>
Instances of the <i>ExtractWS</i> class provide array structured access
to Vision entity data. They create and use instances of the <i><a href="tkInterface.htm#extract">Interface
ExtractWS</a></i> Vision class to do their job. You obtain new <i>ExtractWS</i>
objects by asking your <i><a href="#class Connection">Connection</a></i>
objects for them.&nbsp; You can create and use as many <i>ExtractWS</i>
objects as you need. To use an <i>ExtractWS</i> object, you set its control
properties and specify the entities, items, and dates that define your
query.&nbsp; The following example, which assumes that you have already
created a <i>Connection</i> object named
<i>myConnection</i>, illustrates:
<pre><i>&nbsp;&nbsp;&nbsp; Dim myExtractWS As ExtractWS</i></pre>

<pre><i>&nbsp;&nbsp;&nbsp; Set myExtractWS = myConnection.<a href="#method Connection::NewExtractWS">NewExtractWS</a></i></pre>

<pre><i>&nbsp;&nbsp;&nbsp; With myExtractWS
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .<a href="#property ExtractWS::SetOrientationTo">setOrientationToEI</a> ()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .<a href="#method ExtractWS::SetEntityTypeTo">setEntityTypeTo</a> ("Security")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .<a href="#method ExtractWS::AddEntity">addEntity</a> ("GM")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .addEntity ("IBM")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .addEntity ("HWP")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .addEntity ("XON")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .<a href="#method ExtractWS::AddItem">addItem</a> ("name"&nbsp;&nbsp;&nbsp; , VDatumKind_String)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .addItem ("price"&nbsp;&nbsp; , VDatumKind_Real)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .addItem ("price@95", VDatumKind_Real)
&nbsp;&nbsp;&nbsp; End With</i></pre>
With the extract workspace parameters set, you use the <i>Run</i> method
to create a <i><a href="#class DatumArray">DatumArray</a></i> object holding
your data:
<pre><i>&nbsp;&nbsp;&nbsp; Dim myResultArray As <a href="#class DatumArray">DatumArray
</a>&nbsp;&nbsp;&nbsp; Set myResultArray = myExtractWS.Run</i></pre>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::AddDate"></a>method
<a href="#class ExtractWS">ExtractWS</a>::AddDate</h4>

<h5>
Synopsis:</h5>

<blockquote>Sub AddDate (Date As String)</blockquote>

<h5>
Description:</h5>

<blockquote>A method that adds a date to a list of dates used to specify
the time axis in time by entity or item queries.&nbsp; The date string
you supply must be a suitable recipient for Vision's <i>asDate</i> message.
<p>There are three ways to specify the time axis of an extract workspace:
<ol>
<li>
using a list of dates built using this method,</li>

<li>
using a comma separated list of dates specified using either the <i><a href="#property ExtractWS::DateListString">DateListString</a></i>
property or <i><a href="#method ExtractWS::SetDateListTo">SetDateListTo</a></i>
method,</li>

<li>
using a Vision expression specified using the <i><a href="#property ExtractWS::DateListExpression">DateListExpression</a></i>
property or <i><a href="#method ExtractWS::SetDateListExpressionTo">SetDateListExpressionTo</a></i>
method.</li>
</ol>
Only one of these three alteratives can be used at a time.&nbsp; The value
of
the <i><a href="#property ExtractWS::DateListType">DateListType</a></i>
property tells you which one is being used.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method ExtractWS::ClearDateList">ClearDateList</a></li>

<li>
<a href="#property ExtractWS::DateListExpression">DateListExpression</a></li>

<li>
<a href="#property ExtractWS::DateListString">DateListString</a></li>

<li>
<a href="#property ExtractWS::DateListType">DateListType</a></li>

<li>
<a href="#method ExtractWS::SetDateListExpressionTo">SetDateListExpressionTo</a></li>

<li>
<a href="#method ExtractWS::SetDateListTo">SetDateListTo</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::AddEntity"></a>method
<a href="#class ExtractWS">ExtractWS</a>::AddEntity</h4>

<h5>
Synopsis:</h5>

<blockquote>Sub AddEntity (Entity As String)</blockquote>

<h5>
Description:</h5>

<blockquote>A method that adds an entity to a list of entities used to
specify the entity axis in entity by item or time queries.&nbsp; The entity
string you supply must be an alias for one of the entities of type
<i><a href="#property ExtractWS::EntityType">EntityType</a></i>
in your database.
<p>There are three ways to specify the entity axis of an extract workspace:
<ol>
<li>
using a list of entities built using this method,</li>

<li>
using a comma separated list of entities specified using either the <i><a href="#property ExtractWS::EntityListString">EntityListString</a></i>
property or <i><a href="#method ExtractWS::SetEntityListTo">SetEntityListTo</a></i>
method,</li>

<li>
using a Vision expression specified using the <i><a href="#property ExtractWS::EntityListExpression">EntityListExpression</a></i>
property or <i><a href="#method ExtractWS::SetEntityListExpressionTo">SetEntityListExpressionTo</a></i>
method.</li>
</ol>
Only one of these three alteratives can be used at a time.&nbsp; The value
of the <i><a href="#property ExtractWS::EntityListType">EntityListType</a></i>
property tells you which one is being used.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method ExtractWS::ClearEntityList">ClearEntityList</a></li>

<li>
<a href="#property ExtractWS::EntityListExpression">EntityListExpression</a></li>

<li>
<a href="#property ExtractWS::EntityListString">EntityListString</a></li>

<li>
<a href="#property ExtractWS::EntityListType">EntityListType</a></li>

<li>
<a href="#property ExtractWS::EntityType">EntityType</a></li>

<li>
<a href="#method ExtractWS::SetEntityListExpressionTo">SetEntityListExpressionTo</a></li>

<li>
<a href="#method ExtractWS::SetEntityListTo">SetEntityListTo</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::AddItem"></a>method
<a href="#class ExtractWS">ExtractWS</a>::AddItem<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::AddTypedItem"></a>method
<a href="#class ExtractWS">ExtractWS</a>::AddTypedItem</h4>

<h5>
Synopsis:</h5>

<blockquote>Sub AddItem (Item As String)
<br>Sub AddTypedItem (Item As String, ItemType As <a href="#enum ItemType">ItemType</a>)</blockquote>

<h5>
Description:</h5>

<blockquote>Methods that add an item to the list of items used to specify
the item axis in item by entity or time queries.&nbsp; The item string
is a Vision expression augmented by the extra item specification syntax
described <a href="tkInterface.htm#extract">here</a>.
<p>An item can be added to the item list with an explicit data type using
the <i>AddTypedItem</i> method. The values of items added with an explicit
data type will be converted to that data type if possible.&nbsp; If the
conversion cannot be performed, the value will be returned as
<i>NA</i>.&nbsp;
Four item types are supported:
<ol>
<li>
return the value as a double (<i><a href="#ItemType_Real">ItemType_Real</a></i>).</li>

<li>
return the value as an integer (<i><a href="#ItemType_Integer">ItemType_Integer</a></i>).</li>

<li>
return the value as a string (<i><a href="#ItemType_String">ItemType_String</a></i>).</li>

<li>
return the value using the most specific type possible (<i><a href="#ItemType_Unspecified">ItemType_Unspecified</a></i>).</li>
</ol>
The <i>AddItem</i> method adds untyped items to the list.&nbsp; <i>AddItem</i>
is equivalent to calling the <i>AddTypedItem</i> method with an item type
of <i>ItemType_Unspecified</i>.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method ExtractWS::ClearItemList">ClearItemList</a>
<hr WIDTH="50%"></li>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::ClearDateList"></a>method
<a href="#class ExtractWS">ExtractWS</a>::ClearDateList</h4>

<h5>
Synopsis:</h5>

<blockquote>Sub ClearDateList ()</blockquote>

<h5>
Description:</h5>

<blockquote>A method that clears the date list used to specify the time
axis in time by entity or item queries.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method ExtractWS::AddDate">AddDate</a></li>

<li>
<a href="#property ExtractWS::DateListExpression">DateListExpression</a></li>

<li>
<a href="#property ExtractWS::DateListString">DateListString</a></li>

<li>
<a href="#property ExtractWS::DateListType">DateListType</a></li>

<li>
<a href="#method ExtractWS::SetDateListExpressionTo">SetDateListExpressionTo</a></li>

<li>
<a href="#method ExtractWS::SetDateListTo">SetDateListTo</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::ClearEntityList"></a>method
<a href="#class ExtractWS">ExtractWS</a>::ClearEntityList</h4>

<h5>
Synopsis:</h5>

<blockquote>Sub ClearEntityList ()</blockquote>

<h5>
Description:</h5>

<blockquote>A method that clears the entity list used to specify the entity
axis in entity by time or item queries.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method ExtractWS::AddEntity">AddEntity</a></li>

<li>
<a href="#property ExtractWS::EntityListExpression">EntityListExpression</a></li>

<li>
<a href="#property ExtractWS::EntityListString">EntityListString</a></li>

<li>
<a href="#property ExtractWS::EntityListType">EntityListType</a></li>

<li>
<a href="#property ExtractWS::EntityType">EntityType</a></li>

<li>
<a href="#method ExtractWS::SetEntityListExpressionTo">SetEntityListExpressionTo</a></li>

<li>
<a href="#method ExtractWS::SetEntityListTo">SetEntityListTo</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::ClearItemList"></a>method
<a href="#class ExtractWS">ExtractWS</a>::ClearItemList</h4>

<h5>
Synopsis:</h5>

<blockquote>Sub ClearItemList ()</blockquote>

<h5>
Description:</h5>

<blockquote>A method that clears the item list used to specify the item
axis in item by entity or time queries.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method ExtractWS::AddItem">AddItem</a></li>

<li>
<a href="#method ExtractWS::AddTypedItem">AddTypedItem</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::ColumnLabelsOn"></a>property
<a href="#class ExtractWS">ExtractWS</a>::ColumnLabelsOn<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetColumnLabelsOn"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetColumnLabelsOn<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetColumnLabelsOff"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetColumnLabelsOff</h4>

<h5>
Synopsis:</h5>

<blockquote>ColumnLabelsOn As Boolean
<br>Sub SetColumnLabelsOn ()
<br>Sub SetColumnLabelsOff ()</blockquote>

<h5>
Description:</h5>

<blockquote>A boolean property and associated, alternative update methods
that controls whether the first row of data matrices generated using this
extract workspace contains column labels.&nbsp; Column labels can be useful
when columns are generated dynamically by Vision. When enabled, an extra
row containing the column descriptions is inserted before the first data
row in data arrays returned by this <i>ExtractWS</i>.</blockquote>

<h5>
Related Properties and Methods:</h5>
<a href="#property ExtractWS::RowLabelsOn">RowLabelsOn</a>
<br><a href="#property ExtractWS::ScalarLabelOn">ScalarLabelOn</a>
<br><a href="#method ExtractWS::SetRowLabelsOn">SetRowLabelsOn</a>
<br><a href="#method ExtractWS::SetRowLabelsOff">SetRowLabelsOff</a>
<br><a href="#method ExtractWS::SetScalarLabelOn">SetScalarLabelOn</a>
<br><a href="#method ExtractWS::SetRowLabelsOff">SetScalarLabelOff</a>
<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::Connection"></a>property
<a href="#class ExtractWS">ExtractWS</a>::Connection</h4>

<h5>
Synopsis:</h5>

<blockquote>Property Get Connection () As <a href="#class Connection">Connection</a></blockquote>

<h5>
Description:</h5>

<blockquote>A read-only property whose value is the <i><a href="#class Connection">Connection</a></i>
that created this <i>ExtractWS</i>.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#property ExtractWS::IsConnected">IsConnected</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::Copy"></a>method
<a href="#class ExtractWS">ExtractWS</a>::Copy</h4>

<h5>
Synopsis:</h5>

<blockquote>Function Copy () As <a href="#class ExtractWS">ExtractWS</a></blockquote>

<h5>
Description:</h5>

<blockquote>A method that makes a copy of this extract workspace and all
of its settings.</blockquote>

<h5>
Related Properties and Methods:</h5>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::Currency"></a>property
<a href="#class ExtractWS">ExtractWS</a>::Currency<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetCurrencyTo"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetCurrencyTo</h4>

<h5>
Synopsis:</h5>

<blockquote>Currency As String
<br>Sub SetCurrencyTo (Currency As String)</blockquote>

<h5>
Description:</h5>

<blockquote>A property and associated, alternative update method that specify
the default currency used for all queries using this extract workspace.&nbsp;
The string you supply must contain a naming dictionary alias for one of
the currencies stored in your Vision database.</blockquote>

<h5>
Related Properties and Methods:</h5>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::Date"></a>property
<a href="#class ExtractWS">ExtractWS</a>::Date<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetDateTo"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetDateTo</h4>

<h5>
Synopsis:</h5>

<blockquote>Date As String
<br>Sub SetDateTo (Date As String)</blockquote>

<h5>
Description:</h5>

<blockquote>A property and associated, alternative update method that supply
the 'as-of' date for all queries using this extract workspace.&nbsp; The
string you supply must be a suitable recipient for Vision's <i>asDate</i>
message.&nbsp; For entity by item and item by entity extract workspaces,
the value of this property determines the date for which the data is retrieved.</blockquote>

<h5>
Related Properties and Methods:</h5>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::DateListExpression"></a>property
<a href="#class ExtractWS">ExtractWS</a>::DateListExpression<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetDateListExpressionTo"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetDateListExpressionTo</h4>

<h5>
Synopsis:</h5>

<blockquote>DateListExpression As String
<br>Sub SetDateListExpressionTo (DateListExpression As String)</blockquote>

<h5>
Description:</h5>

<blockquote>A property and associated, alternative update method that specify
a Vision expression used to generate a dynamic list of dates for time by
entity or item queries.&nbsp; The Vision expression you supply must return
a Vision <i>List</i> of dates.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method ExtractWS::AddDate">AddDate</a></li>

<li>
<a href="#method ExtractWS::ClearDateList">ClearDateList</a></li>

<li>
<a href="#property ExtractWS::DateListString">DateListString</a></li>

<li>
<a href="#property ExtractWS::DateListType">DateListType</a></li>

<li>
<a href="#method ExtractWS::SetDateListTo">SetDateListTo</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::DateListString"></a>method
<a href="#class ExtractWS">ExtractWS</a>::DateListString<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetDateListTo"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetDateListTo</h4>

<h5>
Synopsis:</h5>

<blockquote>DateListString As String
<br>Sub SetDateListTo (DateList As String)</blockquote>

<h5>
Description:</h5>

<blockquote>A property and associated, alternative update method that allow
you to supply a comma separated list of dates for entity or item by time
queries.&nbsp; The dates you supply should be suitable recipients for Vision's
<i>asDate</i>
message.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method ExtractWS::AddDate">AddDate</a></li>

<li>
<a href="#method ExtractWS::ClearDateList">ClearDateList</a></li>

<li>
<a href="#property ExtractWS::DateListExpression">DateListExpression</a></li>

<li>
<a href="#property ExtractWS::DateListType">DateListType</a></li>

<li>
<a href="#method ExtractWS::SetDateListExpressionTo">SetDateListExpressionTo</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::DateListType"></a>method
<a href="#class ExtractWS">ExtractWS</a>::DateListType</h4>

<h5>
Synopsis:</h5>

<blockquote>Property Get DateListType As <a href="#enum ExtractListType">ExtractListType</a></blockquote>

<h5>
Description:</h5>

<blockquote>A read-only property whose value is the kind of date list held
in this extract workspace.&nbsp; Three kinds of date list are possible:
<ol>
<li>
a date list built one entity at a time using a sequence of calls to the
<i><a href="#method ExtractWS::AddDate">AddDate</a></i>
method,</li>

<li>
a date list specified as a comma separated list of entity names (<i><a href="#property ExtractWS::DateListString">DateListString</a></i>),</li>

<li>
a date list dynamically derived using a Vision expression (<i><a href="#property ExtractWS::DateListExpression">DateListExpression</a></i>).</li>
</ol>
</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method ExtractWS::AddDate">AddDate</a></li>

<li>
<a href="#method ExtractWS::ClearDateList">ClearDateList</a></li>

<li>
<a href="#property ExtractWS::DateListExpression">DateListExpression</a></li>

<li>
<a href="#property ExtractWS::DateListString">DateListString</a></li>

<li>
<a href="#method ExtractWS::SetDateListExpressionTo">SetDateListExpressionTo</a></li>

<li>
<a href="#method ExtractWS::SetDateListTo">SetDateListTo</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::Delimiter"></a>property
<a href="#class ExtractWS">ExtractWS</a>::Delimiter<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetDelimiterTo"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetDelimiterTo</h4>

<h5>
Synopsis:</h5>

<blockquote>Delimiter As String
<br>Sub SetDelimiterTo (Delimiter As String)</blockquote>

<h5>
Description:</h5>

<blockquote>A property and associated, alternative update method that specifies
the internal delimiter used to separate data values sent from Vision.&nbsp;
In normal use, this property does not need to be changed.</blockquote>

<h5>
Related Properties and Methods:</h5>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::Entity"></a>method
<a href="#class ExtractWS">ExtractWS</a>::Entity<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetEntityTo"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetEntityTo</h4>

<h5>
Synopsis:</h5>

<blockquote>Entity As String
<br>Sub SetEntityTo (Entity As String)</blockquote>

<h5>
Description:</h5>

<blockquote>A property and associated, alternative update method that specifies
the single entity for which item by time and time by item data arrays matrices
are retrieved.&nbsp; The entity named by this property is also asked to
evaluate <i><a href="#property ExtractWS::EntityListExpression">EntityListExpression</a></i>
for entity by item or time queries that use a dynamically generated entity
list.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#property ExtractWS::EntityListExpression">EntityListExpression</a></li>

<li>
<a href="#property ExtractWS::EntityListType">EntityListType</a></li>

<li>
<a href="#property ExtractWS::EntityType">EntityType</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::EntityListExpression"></a>property
<a href="#class ExtractWS">ExtractWS</a>::EntityListExpression<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetEntityListExpressionTo"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetEntityListExpressionTo</h4>

<h5>
Synopsis:</h5>

<blockquote>EntityListExpression As String
<br>Sub SetEntityListExpressionTo (EntityListExpression As String)</blockquote>

<h5>
Description:</h5>

<blockquote>A property and associated, alternative update method that specified
the Vision expression used to generate a dynamic list of entities in entity
by time or time queries.&nbsp; The expression will be evaluated by the
entity identified by the <i><a href="#property ExtractWS::Entity">Entity</a></i>
and <i><a href="#property ExtractWS::EntityType">EntityType</a></i> properties
of this workspace.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method ExtractWS::AddEntity">AddEntity</a></li>

<li>
<a href="#method ExtractWS::ClearEntityList">ClearEntityList</a></li>

<li>
<a href="#property ExtractWS::EntityListString">EntityListString</a></li>

<li>
<a href="#property ExtractWS::EntityListType">EntityListType</a></li>

<li>
<a href="#property ExtractWS::EntityType">EntityType</a></li>

<li>
<a href="#method ExtractWS::SetEntityListTo">SetEntityListTo</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::EntityListString"></a>property
<a href="#class ExtractWS">ExtractWS</a>::EntityListString<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetEntityListTo"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetEntityListTo</h4>

<h5>
Synopsis:</h5>

<blockquote>EntityListString As String
<br>Sub SetEntityListTo (EntityList As String)</blockquote>

<h5>
Description:</h5>

<blockquote>A property and associated, alternative update method that supplies
a comma separated list of entity names for use in entity by item or time
queries.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method ExtractWS::AddEntity">AddEntity</a></li>

<li>
<a href="#method ExtractWS::ClearEntityList">ClearEntityList</a></li>

<li>
<a href="#property ExtractWS::EntityListExpression">EntityListExpression</a></li>

<li>
<a href="#property ExtractWS::EntityListType">EntityListType</a></li>

<li>
<a href="#property ExtractWS::EntityType">EntityType</a></li>

<li>
<a href="#method ExtractWS::SetEntityListExpressionTo">SetEntityListExpressionTo</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::EntityListType"></a>property
<a href="#class ExtractWS">ExtractWS</a>::EntityListType</h4>

<h5>
Synopsis:</h5>

<blockquote>Property Get EntityListType () As <a href="#enum ExtractListType">ExtractListType</a></blockquote>

<h5>
Description:</h5>

<blockquote>A read-only property whose value is the kind of entity list
held in this extract workspace.&nbsp; Three kinds of entity list are possible:
<ol>
<li>
an entity list built one entity at a time using a sequence of calls to
the <i><a href="#method ExtractWS::AddEntity">AddEntity</a></i> method,</li>

<li>
an entity list specified as a comma separated list of entity names (<i><a href="#property ExtractWS::EntityListString">EntityListString</a></i>),</li>

<li>
an entity list dynamically derived using a Vision expression (<i><a href="#property ExtractWS::EntityListExpression">EntityListExpression</a></i>).</li>
</ol>
</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method ExtractWS::AddEntity">AddEntity</a></li>

<li>
<a href="#method ExtractWS::ClearEntityList">ClearEntityList</a></li>

<li>
<a href="#property ExtractWS::EntityListExpression">EntityListExpression</a></li>

<li>
<a href="#property ExtractWS::EntityListString">EntityListString</a></li>

<li>
<a href="#method ExtractWS::SetEntityListExpressionTo">SetEntityListExpressionTo</a></li>

<li>
<a href="#method ExtractWS::SetEntityListTo">SetEntityListTo</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::EntityType"></a>property
<a href="#class ExtractWS">ExtractWS</a>::EntityType<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetEntityTypeTo"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetEntityTypeTo</h4>

<h5>
Synopsis:</h5>

<blockquote>EntityType As String
<br>Sub SetEntityTypeTo (EntityType As String)</blockquote>

<h5>
Description:</h5>

<blockquote>A property and associated, alternative update method that supply
the Vision entity type used to locate the entities named by the <i><a href="#property ExtractWS::Entity">Entity</a></i>
and <i><a href="#property ExtractWS::EntityListString">EntityListString</a></i>
properties or added to an entity list by the <i><a href="#method ExtractWS::AddEntity">AddEntity</a></i>
method.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#method ExtractWS::AddEntity">AddEntity</a></li>

<li>
<a href="#property ExtractWS::Entity">Entity</a></li>

<li>
<a href="#property ExtractWS::EntityListString">EntityListString</a></li>

<li>
<a href="#method ExtractWS::SetEntityTo">SetEntityTo</a></li>

<li>
<a href="#method ExtractWS::SetEntityListTo">SetEntityListTo</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::FormatSettings"></a>property
<a href="#class ExtractWS">ExtractWS</a>::FormatSettings</h4>

<h5>
Synopsis:</h5>

<blockquote>Property Get FormatSettings () As <a href="#class FormatSettings">FormatSettings</a></blockquote>

<h5>
Description:</h5>

<blockquote>A read-only property whose value is the <i><a href="#class FormatSettings">FormatSettings</a></i>
object associated with this <i>ExtractWS</i>.</blockquote>

<h5>
Related Properties and Methods:</h5>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::IsConnected"></a>property
<a href="#class ExtractWS">ExtractWS</a>::IsConnected</h4>

<h5>
Synopsis:</h5>

<blockquote>Property Get IsConnected () As Boolean</blockquote>

<h5>
Description:</h5>

<blockquote>A read-only boolean property whose value is <i>True</i> if
this <i>ExtractWS</i> is currently attached to a Vision session.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#class Connection">Connection</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::Item"></a>property
<a href="#class ExtractWS">ExtractWS</a>::Item<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::ItemType"></a>property
<a href="#class ExtractWS">ExtractWS</a>::ItemType<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetItemTo"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetItemTo<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetTypedItemTo"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetTypedItemTo</h4>

<h5>
Synopsis:</h5>

<blockquote>Item As String
<br>ItemType As <a href="#enum ItemType">ItemType</a>
<br>Sub SetItemTo (Item As String)
<br>Sub SetTypedItemTo (Item As String, ItemType As <a href="#enum ItemType">ItemType</a>)</blockquote>

<h5>
Description:</h5>

<blockquote>A pair of properties and associated, alternative update methods
that specify the single item retrieved by entity by time and time by entity
extract workspaces.
<p>When you use the <i>SetItemTo</i> method or set the value of the
<i>Item</i>
property directly, you implicitly set the value of the <i>ItemType</i>
property to <i><a href="#ItemType_Unspecified">ItemType_Unspecified</a></i>.&nbsp;
This causes values for this item to be returned using the most specific
type possible (see the description of <i><a href="#ItemType_Unspecified">ItemType_Unspecified)</a></i>.&nbsp;
If you want a different type conversion to apply, you should set the
<i><a href="#property ExtractWS::ItemType">ItemType</a></i>
property after you have set the <i>Item</i> property or use <i>SetTypedItemTo</i>
to set both in a single call.</blockquote>

<h5>
Related Properties and Methods:</h5>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::SetOrientationTo"></a>property
<a href="#class ExtractWS">ExtractWS</a>::Orientation<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetOrientationTo"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetOrientationTo<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetOrientationToEI"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetOrientationToEI<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetOrientationToET"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetOrientationToET<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetOrientationToIE"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetOrientationToIE<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetOrientationToIT"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetOrientationToIT<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetOrientationToTE"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetOrientationToTE<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetOrientationToTI"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetOrientationToTI</h4>

<h5>
Synopsis:</h5>

<blockquote>Orientation As <a href="#enum ExtractOrientation">ExtractOrientation</a>
<br>Sub SetOrientationTo (Orientation As <a href="#enum ExtractOrientation">ExtractOrientation</a>)
<br>Sub SetOrientationToEI ()
<br>Sub SetOrientationToET ()
<br>Sub SetOrientationToIE ()
<br>Sub SetOrientationToIT ()
<br>Sub SetOrientationToTE ()
<br>Sub SetOrientationToTI ()</blockquote>

<h5>
Description:</h5>

<blockquote>A property and associated, alternative update methods that
specifies the <a href="#enum ExtractOrientation">interpretation</a> of
the row, column, and scalar dimensions of this extract workspace.</blockquote>

<h5>
Related Properties and Methods:</h5>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::RowLabelsOn"></a>property
<a href="#class ExtractWS">ExtractWS</a>::RowLabelsOn<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetRowLabelsOn"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetRowLabelsOn<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetRowLabelsOff"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetRowLabelsOff</h4>

<h5>
Synopsis:</h5>

<blockquote>RowLabelsOn As Boolean
<br>Sub SetRowLabelsOn ()
<br>Sub SetRowLabelsOff ()</blockquote>

<h5>
Description:</h5>

<blockquote>A boolean property and associated, alternative update methods
that controls whether the first column of data matrices generated using
this extract workspace contains row labels.&nbsp; Row labels can be useful
when rows are generated dynamically by Vision. When enabled, an extra column
containing the row descriptions is inserted before the first data column
in data arrays returned by this <i>ExtractWS</i>.</blockquote>

<h5>
Related Properties and Methods:</h5>
<a href="#property ExtractWS::ColumnLabelsOn">ColumnLabelsOn</a>
<br><a href="#property ExtractWS::ScalarLabelOn">ScalarLabelOn</a>
<br><a href="#method ExtractWS::SetColumnLabelsOn">SetColumnLabelsOn</a>
<br><a href="#method ExtractWS::SetColumnLabelsOff">SetColumnLabelsOff</a>
<br><a href="#method ExtractWS::SetScalarLabelOn">SetScalarLabelOn</a>
<br><a href="#method ExtractWS::SetRowLabelsOff">SetScalarLabelOff</a>
<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::Run"></a>method
<a href="#class ExtractWS">ExtractWS</a>::Run</h4>

<h5>
Synopsis:</h5>

<blockquote>Function Run () As <a href="#class DatumArray">DatumArray</a></blockquote>

<h5>
Description:</h5>

<blockquote>A method that retrieves the array of data specified by the
current settings of this extract workspace.</blockquote>

<h5>
Related Properties and Methods:</h5>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property ExtractWS::ScalarLabelOn"></a>property
<a href="#class ExtractWS">ExtractWS</a>::ScalarLabelOn<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetScalarLabelOn"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetScalarLabelOn<br>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="method ExtractWS::SetScalarLabelOff"></a>method
<a href="#class ExtractWS">ExtractWS</a>::SetScalarLabelOff</h4>

<h5>
Synopsis:</h5>

<blockquote>ScalarLabelOn As Boolean
<br>Sub SetScalarLabelOff ()
<br>Sub SetScalarLabelOn ()</blockquote>

<h5>
Description:</h5>

<blockquote>A boolean property and associated, alternative update methods
that controls whether a description of the single entity, date, or item
for which this extract workspace was run will be included in the first
cell of the data array returned.&nbsp; If necessary, an extra row and column
will be added to the data array to accommodate this descriptive cell.&nbsp;
An extra row is not necessary if <a href="#property ExtractWS::ColumnLabelsOn">column
labels</a> are enabled.&nbsp; Similarly, an extra column is not needed
if <a href="#property ExtractWS::RowLabelsOn">row labels</a> are enabled.</blockquote>

<h5>
Related Properties and Methods:</h5>
<a href="#property ExtractWS::ColumnLabelsOn">ColumnLabelsOn</a>
<br><a href="#property ExtractWS::RowLabelsOn">RowLabelsOn</a>
<br><a href="#method ExtractWS::SetColumnLabelsOn">SetColumnLabelsOn</a>
<br><a href="#method ExtractWS::SetColumnLabelsOff">SetColumnLabelsOff</a>
<br><a href="#method ExtractWS::SetRowLabelsOn">SetRowLabelsOn</a>
<br><a href="#method ExtractWS::SetRowLabelsOff">SetRowLabelsOff</a>
<h4>

<hr WIDTH="100%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14>&nbsp;<a NAME="class FormatSettings"></a>class
FormatSettings</h4>
<i><a href="#class Connection">Connection</a></i>, <i><a href="#class DatumArray">DatumArray</a></i>,
and <i><a href="#class ExtractWS">ExtractWS</a></i> objects all have a
read-only property named <i>FormatSettings</i> that returns the <i>FormatSettings</i>
object associated with the <i>Connection</i>, <i>DatumArray</i>, or <i>ExtractWS</i>.
<i>FormatSettings</i>
objects are used to supply default values and other control settings needed
during the data return process.&nbsp; Currently, the supported settings
include <i><a href="#property FormatSettings::DoubleNaN">DoubleNaN</a></i>
and <i><a href="#property FormatSettings::LongNaN">LongNaN</a></i> values
and a Unicode/ANSI string format preference, <i><a href="#property FormatSettings::ReturningUnicode">ReturningUnicode</a></i>.
<p>The <i>DoubleNaN</i> and <i>LongNaN</i> values stored in a <i>FormatSettings</i>
object are returned in place of data that cannot be converted as part of
a request to return a value of type <b>Double</b> or <b>Long </b>(see the
<i><a href="#method DatumArray::GetDoubleArray">GetDoubleArray</a></i>
and <i><a href="#method DatumArray::GetLongArray">GetLongArray</a></i>
methods and <i><a href="#method DatumArray::AsDoubleArray">AsDoubleArray</a></i>
and <i><a href="#method DatumArray::AsLongArray">AsLongArray</a></i> properties
of <i><a href="#class DatumArray">DatumArray</a></i> and the <i><a href="#method Connection::GetDouble">GetDouble</a></i>
and <i><a href="#method Connection::GetLong">GetLong</a></i> methods of
<i><a href="#class Connection">Connection</a></i>).&nbsp;
The default value of the <i>DoubleNaN</i> property is the IEEE quiet NAN
(i.e., the same value returned by an uncomputable function like log(-1.0)).&nbsp;
The default value of the <i>LongNaN</i> property is the smallest representable
negative integer, -2147483648.
<p>The Unicode preference setting, <i>ReturningUnicode</i>, is provided
to deal with older applications that do not understand Unicode or understand
it incompletely.&nbsp; Excel '97, for example, passes and expects Unicode
in scalar strings but requires ANSI strings in some arrays.&nbsp; By default,
all strings returned from VAccess properties and methods are Unicode.
<p><i>FormatSettings</i> objects inherit settings they don't explicitly
override from their <i><a href="#property FormatSettings::ParentSettings">ParentSettings</a>
FormatSettings</i> object.&nbsp; The inheritance parallels the overlying
object's creation path.&nbsp; In particular, a <i>DatumArray</i>'s <i>FormatSettings</i>
object inherits from the <i>FormatSettings</i> object of the <i>ExtractWS</i>
that returned it.&nbsp; The <i>FormatSettings</i> object of that <i>ExtractWS</i>
inherits in turn from the <i>FormatSettings</i> of the <i>Connection</i>
that created the ExtractWS, and, ultimately, from the <i><a href="#property FormatSettings::GlobalSettings">GlobalSettings</a>
FormatSettings</i> object associated with your use of the VAccess library
itself.
<p>For each settable <i>FormatSettings</i> option, their are two properties
-- one that supplies the value of the setting and one that indicates whether
a particular <i>FormatSettings</i> object defines the setting or just inherits
it.&nbsp; For example:
<blockquote><i>myDatumArray.FormatSettings.DoubleNaN</i></blockquote>
returns a value, possibly inherited, that will be substituted for values
that cannot be converted to a <i>Double</i>,
<blockquote><i>myDatumArray.FormatSettings.DoubleNaN = -2341.7</i></blockquote>
overrides the <i>DoubleNaN</i> setting stored in the <i>FormatSettings</i>
object associated with <i>myDatumArray</i>,
<blockquote><i>myDatumArray.FormatSettings.SetsDoubleNaN</i></blockquote>
returns <i>True</i> because <i>myDatumArray</i>'s <i>FormatSettings</i>
object just defined a <i>DoubleNaN</i> setting (it would return <i>False</i>
if the setting was inherited), and:
<blockquote><i>myDatumArray.FormatSettings.SetsDoubleNaN = False</i></blockquote>
instructs the <i>FormatSettings</i> object associated with <i>myDatumArray</i>
to discard the explicit value it has for <i>DoubleNaN</i> and inherit its
<i>DoubleNaN</i>
value from its parent instead.
<p>It is not possible to give meaning to the statement:
<blockquote><i>myDatumArray.FormatSettings.SetsDoubleNaN = True</i></blockquote>
since the <i>FormatSettings</i> object has no idea what value you would
like it to use.&nbsp; Because <i>FormatSettings</i> objects will not invent
values for you, even default ones, a statement such as this is quietly
ignored.
<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property FormatSettings::DoubleNaN"></a>property
<a href="#class FormatSettings">FormatSettings</a>::DoubleNaN</h4>

<h5>
Synopsis:</h5>

<blockquote>DoubleNaN As Double</blockquote>

<h5>
Description:</h5>

<blockquote>A property whose value is returned in place of unavailable
or unrepresentable double item values.&nbsp; By default, this property's
value is the IEEE quiet NaN (e.g.., log (-1))</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#property FormatSettings::SetsDoubleNaN">SetsDoubleNaN</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property FormatSettings::GlobalSettings"></a>property
<a href="#class FormatSettings">FormatSettings</a>::GlobalSettings</h4>

<h5>
Synopsis:</h5>

<blockquote>Property Get GlobalSettings () As <a href="#class FormatSettings">FormatSettings</a></blockquote>

<h5>
Description:</h5>

<blockquote>A read-only property that returns the top-most <i>FormatSettings</i>
object from which all <i>FormatSettings</i> objects inherit.&nbsp; The
<i>FormatSettings</i>
object returned by this property has no parent object.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#property FormatSettings::GlobalSettings">GlobalSettings</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property FormatSettings::LongNaN"></a>property
<a href="#class FormatSettings">FormatSettings</a>::LongNaN</h4>

<h5>
Synopsis:</h5>

<blockquote>LongNaN As Long</blockquote>

<h5>
Description:</h5>

<blockquote>A property whose value is returned in place of unavailable
or unrepresentable integer item values.&nbsp; By default, this property's
value is the smallest possible integer (-2147483648).</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#property FormatSettings::SetsLongNaN">SetsLongNaN</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property FormatSettings::ParentSettings"></a>property
<a href="#class FormatSettings">FormatSettings</a>::ParentSettings</h4>

<h5>
Synopsis:</h5>

<blockquote>Property Get ParentSettings () As <a href="#class FormatSettings">FormatSettings</a></blockquote>

<h5>
Description:</h5>

<blockquote>A read-only property that returns the <i>FormatSettings</i>
object from which this <i>FormatSettings</i> object inherits values it
does not set.&nbsp; This property's value is NULL in C and C++ and <i>Nothing</i>
in Visual Basic for <i>FormatSettings</i> objects that have no parent.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#property FormatSettings::ParentSettings">ParentSettings</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property FormatSettings::ReturningUnicode"></a>property
<a href="#class FormatSettings">FormatSettings</a>::ReturningUnicode</h4>

<h5>
Synopsis:</h5>

<blockquote>ReturningUnicode As Boolean</blockquote>

<h5>
Description:</h5>

<blockquote>A boolean property whose value, when <i>True</i>, indicates
that strings are returned using 16-bit Unicode, and, when <i>False</i>,
using 8-bit ANSI characters.&nbsp; This property is provided to accommodate
some older COM clients that do not understand Unicode.&nbsp; By default,
this property's value is <i>True</i> and should not be changed unless your
COM client does not work correctly using the default value.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#property FormatSettings::SetsReturningUnicode">SetsReturningUnicode</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property FormatSettings::SetsDoubleNaN"></a>property
<a href="#class FormatSettings">FormatSettings</a>::SetsDoubleNaN</h4>

<h5>
Synopsis:</h5>

<blockquote>SetsDoubleNaN As Boolean</blockquote>

<h5>
Description:</h5>

<blockquote>A boolean property whose value indicates whether <i><a href="#property FormatSettings::DoubleNaN">DoubleNaN</a></i>
is set by this <i>FormatSettings</i> object.&nbsp; This property is partially
writeable.&nbsp; Setting this property to <i>False</i> instructs this <i>FormatSettings</i>
object to discard its local <i>DoubleNaN</i> value and begin inheriting
<i>DoubleNaN</i>
from its <i><a href="#property FormatSettings::ParentSettings">ParentSettings</a></i>
object.&nbsp; It is not possible to explicitly set this property to <i>True</i>;
set <i>DoubleNaN</i> instead.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#property FormatSettings::DoubleNaN">DoubleNaN</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property FormatSettings::SetsLongNaN"></a>property
<a href="#class FormatSettings">FormatSettings</a>::SetsLongNaN</h4>

<h5>
Synopsis:</h5>

<blockquote>SetsLongNaN As Boolean</blockquote>

<h5>
Description:</h5>

<blockquote>A boolean property whose value indicates whether <i><a href="#property FormatSettings::LongNaN">LongNaN</a></i>
is set by this <i>FormatSettings</i> object.&nbsp; This property is partially
writeable.&nbsp; Setting this property to <i>False</i> instructs this <i>FormatSettings</i>
object to discard its local <i>LongNaN</i> value and begin inheriting <i>LongNaN</i>
from its <i><a href="#property FormatSettings::ParentSettings">ParentSettings</a></i>
object.&nbsp; It is not possible to explicitly set this property to <i>True</i>;
set <i>LongNaN</i> instead.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#property FormatSettings::LongNaN">LongNaN</a></li>

<h4>

<hr WIDTH="50%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="property FormatSettings::SetsReturningUnicode"></a>property
<a href="#class FormatSettings">FormatSettings</a>::SetsReturningUnicode</h4>

<h5>
Synopsis:</h5>

<blockquote>SetsReturningUnicode As Boolean</blockquote>

<h5>
Description:</h5>

<blockquote>A boolean property whose value indicates whether <i><a href="#property FormatSettings::ReturningUnicode">ReturningUnicode</a></i>
is set by this <i>FormatSettings</i> object.&nbsp; This property is partially
writeable.&nbsp; Setting this property to <i>False</i> instructs this <i>FormatSettings</i>
object to discard its local <i>ReturningUnicode</i> value and begin inheriting<i>LongNaN</i>
from its <i><a href="#property FormatSettings::ParentSettings">ParentSettings</a></i>
object.&nbsp; It is not possible to explicitly set this property to <i>True</i>;
set <i>ReturningUnicode</i> instead.</blockquote>

<h5>
Related Properties and Methods:</h5>

<li>
<a href="#property FormatSettings::ReturningUnicode">ReturningUnicode</a></li>

<h4>

<hr WIDTH="100%"></h4>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="enum ExtractListType"></a>Enumerated
Type ExtractListType</h4>
A collection of constants that indicate how an <i><a href="#class ExtractWS">ExtractWS</a></i>
entity, date, or item list is defined.&nbsp; The following table summarizes
the possibilities:
<br>&nbsp;
<table BORDER WIDTH="100%" >
<tr>
<td><a NAME="ExtractListType_Unspecified"></a>ExtractListType_Unspecified</td>

<td>The entity, date, or item list is undefined.</td>
</tr>

<tr>
<td><a NAME="ExtractListType_Array"></a>ExtractListType_Array</td>

<td>The entity, date, or item list is defined by a series of calls to <i><a href="#method ExtractWS::AddEntity">AddEntity</a></i>,
<i><a href="#method ExtractWS::AddDate">AddDate</a></i>,
or <i><a href="#method ExtractWS::AddItem">AddItem</a></i>, as appropriate.</td>
</tr>

<tr>
<td><a NAME="ExtractListType_String"></a>ExtractListType_String</td>

<td>The entity, date, or item list is defined using a string of comma-separated
values.</td>
</tr>

<tr>
<td><a NAME="ExtractListType_Expression"></a>ExtractListType_Expression</td>

<td>The entity, date, or item list is defined dynamically using a Vision
expresion.</td>
</tr>
</table>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="enum ExtractOrientation"></a>Enumerated
Type ExtractOrientation</h4>
A collection of constants that specify the orientation and interpretation
of an extract workspace's rows and columns:
<br>&nbsp;
<table BORDER WIDTH="100%" >
<tr>
<td><a NAME="ExtractOrientation_EI"></a>ExtractOrientation_EI</td>

<td>Retrieve an array of entity by item data for a single date.</td>
</tr>

<tr>
<td><a NAME="ExtractOrientation_ET"></a>ExtractOrientation_ET</td>

<td>Retrieve an array of entity by time data for a single item.</td>
</tr>

<tr>
<td><a NAME="ExtractOrientation_IE"></a>ExtractOrientation_IE</td>

<td>Retrieve an array of item by entity data for a single date.</td>
</tr>

<tr>
<td><a NAME="ExtractOrientation_IT"></a>ExtractOrientation_IT</td>

<td>Retrieve an array of item by time data for a single entity.</td>
</tr>

<tr>
<td><a NAME="ExtractOrientation_TE"></a>ExtractOrientation_TE</td>

<td>Retrieve an array of time by entity data for a single item.</td>
</tr>

<tr>
<td><a NAME="ExtractOrientation_TI"></a>ExtractOrientation_TI</td>

<td>Retrieve an array of time by item data for a single entity.</td>
</tr>
</table>

<h4>
<img SRC="instdot.gif" ALT="" height=14 width=14><a NAME="enum ItemType"></a>ItemType</h4>
A collection of constants that specify the desired return type of an item:
<br>&nbsp;
<table BORDER WIDTH="100%" >
<tr>
<td><a NAME="ItemType_Unspecified"></a>ItemType_Unspecified</td>

<td>Return values using the most specific type possible.&nbsp; If a value
is available and can be converted to an integer, return it as an integer.
If a value is available, cannot be converted to an integer, and can be
converted to a double, return it as a double.&nbsp; If a value is available
and neither conversion is possible, return it as a string.</td>
</tr>

<tr>
<td><a NAME="ItemType_Integer"></a>ItemType_Integer</td>

<td>Return values as integers or <i>NA</i>.</td>
</tr>

<tr>
<td><a NAME="ItemType_Real"></a>ItemType_Real</td>

<td>Return values as doubles or <i>NA</i>.</td>
</tr>

<tr>
<td><a NAME="ItemType_String"></a>ItemType_String</td>

<td>Return values as strings.&nbsp; This conversion is useful for suppressing
the implicit numeric conversion attempted in the absence of any type information
(see <i><a href="#ItemType_Unspecified">ItemType_Unspecified</a></i>).</td>
</tr>
</table>

<p>
<td align=left><font size=-1>Copyright &copy; 2000 Innovative Systems Techniques, Inc.</font>
<td align=right><font size=-1>Updated December 15, 2000</font>
</body>
</html>
