<!DOCTYPE html>
<html>
<head>
   <title>Case Study 4: Simple Report Writer</title>
</head>
<body>
<body bgcolor=white>

<h2>Case Study 4: Simple Report Writer</h2>

<p>| <a href="FHome.htm">Home</a> 
   | <a href="vtutor.htm">Tutorials</a> |
<hr>

<blockquote><hr>
<center><b><font size+1>Reminder!</font></b> </a></center>
To run these examples, you should first start a new session and then load the sample database using:
<pre><tt><b>     "/localvision/samples/general/sample.load" asFileContents evaluate ;</b></tt></pre>
and load <i>testList</i> using:
<ul type=disc><pre><b>!testList <- Company masterList 
    rankDown: [ sales ] . 
    select: [ rank <= 20 ] ; </b></pre></ul>
Any other files referenced can be read from the <i>/localvision/samples/general/</i>
directory.<p>
<b>Note:</b> The <i>sample.load</i> file runs by default on a <i>Unix</i> environment.  If you are using a <i>Windows NT</i> platform, this location may be prefixed by a drive  and optional path (e.g. <i>d:/visiondb/localvision/samples/general/sample.load</i>).  Check with your Vision Administrator for further details.
<hr></blockquote>
<p>

<hr>
<p>
In the previous example, you learned how to write a generic application 
that produces a cross-tabular form of report for any type of data.  
Example 4 develops these concepts further by creating some new classes
that can serve as a basis for a general-purpose report writer.

<hr>
<p>

Read the file <i>example4.a</i>.  You should see:

<ul>
<pre><b>
 !list <- testList ; 
 !blockList <- 
     [ ticker ] , [ name ] , [ sales ] , [ price / earningsPerShare ] ; 

 list 
 do: [ !element <- ^self ; 
       ^my blockList 
          do: [ ^my element send: ^self . print: 12 ] ; 
        newLine print ; 
    ] ; 
</b></pre>
</ul>

Execute this program.  You should see:

<ul>
<b><pre>
AET	Aetna Life &	22114.11	 5.46
T	American Tel	51209.02	23.20
AN	Amoco Corp	20174.00	19.91
ARC	Atlantic Ric	16282.00	18.15
CI	CIGNA Corp	16909.30	 6.90
...
</b></pre>
</ul>

This program starts out by defining two variables: <i>list</i>
refers to the list you wish to process and <i>blockList</i> is a list 
of blocks that define the data items to display for each element in 
the list.  These blocks can contain simple messages or complex expressions.  
Each block will be <i>sent</i> to each element in <i>list</i>.  It is assumed 
that the messages in the blocks are defined for the list elements.  
For each element in <i>list</i>, the value generated by "sending" each block 
in <i>blockList</i> is printed, producing the simple tabular report above.
<hr>
<p>

The file <i>example4.b</i> uses the block to display headings on the 
report:
<ul>
<pre><b>
 !list <- testList ; 
 !blockList <- 
     [ ticker ] , [ name ] , [ sales ] , [ price / earningsPerShare ] ; 

 blockList                         #--  display each block as a heading 
    do: [ asUndelimitedString print: 12 ] ; 
 newLine print ; 

 list 
 do: [ !element <- ^self ; 
       ^my blockList 
          do: [ ^my element send: ^self . print: 12 ] ; 
       newLine print ; 
     ] ; 
</b></pre>
</ul>

Execute this program.  You should see:

<ul>
<pre><b>
ticker  name         sales        price / earn
AET	  Aetna Life &	 22114.11	  5.46
T	  American Tel	 51209.02	 23.20
AN	  Amoco Corp	 20174.00	 19.91
ARC	  Atlantic Ric	 16282.00	 18.15
CI	  CIGNA Corp	 16909.30	  6.90
 . . .
</pre></b>
</ul>

The report now contains some simple headings.  You can probably start
to see many formatting problems with this approach.  For example, 
all the columns are 12 characters wide.  You may want the headings 
left-justified for columns containing text and right-justified for 
columns containing numeric data.  The contents of the heading itself 
may need to more precise, especially if the block contains a calculation.
<hr>
<p>

The file <i>example4.c</i> creates a new class called a <i>ReportItem</i>.  
This class allows you to define a header, a data type, and a column 
width for each report item in addition to the block used to access 
the data:
<ul>
<pre><b>
 #---  Create New Class 
 Object createSubclass: "ReportItem" ; 
 #---  Define Some Properties 
 ReportItem 
    defineFixedProperty: 'header' . 
    defineFixedProperty: 'dataType' . 
    defineFixedProperty: 'width' . 
    defineFixedProperty: 'accessBlock'  ; 

 #---  Create Some Instances 
 !ticker <- ReportItem new 
    do: [ :header <- "Ticker" ; 
          :dataType <- ^global String ; 
          :width <- 10 ; 
          :accessBlock <- [ ticker ] ; 
        ] ; 
 !name <- ReportItem new 
    do: [ :header <- "Name" ; 
          :dataType <- ^global String ; 
          :width <- 25 ; 
          :accessBlock <- [ name ] ; 
        ] ; 
 !sales <- ReportItem new 
    do: [ :header <- "Sales" ; 
          :dataType <- ^global Number ; 
          :width <- 12 ; 
          :accessBlock <- [ sales ] ; 
        ] ; 
 !pe <- ReportItem new 
    do: [ :header <- "PE Ratio" ; 
          :dataType <- ^global Number ; 
          :width <- 10 ; 
          :accessBlock <- [ price / earningsPerShare ] ; 
        ] ; 
</pre></b>
</ul>

Execute this program.  There will not be any output.
<p>

This program creates the new class <i>ReportItem</i> and defines its
properties.  Notice that the <i>defineFixedProperty:</i> methods are
"sent" in succession separated by the '.' character.  Because the 
message <i>defineFixedProperty:</i> is defined to return the recipient
object, the next message you send is applied to this same object.  
Four new instances are created and assigned into the temporary 
variables <i>ticker</i>, <i>name</i>, <i>sales</i>, and <i>pe</i>.  
Each instance is assigned a value for <i>header</i>, <i>dataType</i>, 
<i>width</i>, and <i>accessBlock</i>.

<hr>
<p>

The file <i>example4.d</i> redefines the program to use a list of 
these report item instances instead of the list of blocks:

<ul>
<pre><b>
 !list <- testList ; 
 !itemList <- ticker, name, sales, pe ;       #-- list of ReportItems 

 itemList 
  do: [ dataType isNumber             #-- right justify if type is Number 
           ifTrue: [ header print: (width * -1) ] 
          ifFalse: [ header print: width ] ; 
      ] ; 
 newLine print ; 

 list 
 do: [ !element <- ^self ; 
       ^my itemList 	     #--  send item's accessBlock to each element 
       do: [ ^my element send: accessBlock . print: width ] ; 
       newLine print ; 
     ] ; 
</b></pre>
</ul>

Execute this program.  You should see:

<ul>
<pre><b>
Ticker	Name	                   Sales	PE Ratio
AET	Aetna Life & Cas	22114.11	    5.46
T	American Tel & Tel	51209.02	   23.20
AN	Amoco Corp	        20174.00	   19.91
ARC	Atlantic Richfield	16282.00	   18.15
CI	CIGNA Corp	        16909.30	    6.90
. . .
</b></pre>
</ul>

Notice that the headings, column width and column heading justification 
are now all based on the ReportItem being displayed.  Now suppose you
wanted to limit the list to elements passing a specific criteria and
sort the list based on a user-defined order.  The file <i>example4.e</i> 
adds these capabilities:

<ul>
<pre><b>
 !list <- testList ; 
 !itemList <- ticker, name, sales, pe ; 
 !criteria <- [ sales > 50000 ] ;                 #--  criteria to use 
 !sort <- [ sales ] ;                            #--  sort rule 
 !sortIsUp <- FALSE ;                               #--  sort direction flag 

 itemList 
  do: [ dataType isNumber 
           ifTrue: [ header print: (width * -1) ] 
          ifFalse: [ header print: width ] ; 
      ] ; 
  newLine print ; 
 #---  Apply selection criteria and sort the result 
 !universe <- list select: criteria ; 
 sortIsUp 
    ifTrue: [ :universe <- universe sortUp: sort ] 
   ifFalse: [ :universe <- universe sortDown:  sort ] ; 
 universe 
 do: [ !element <- ^self ; 
       ^my itemList 
       do: [ ^my element send: accessBlock . print: width ] ; 
       newLine print ; 
     ] ; 
</b></pre>
</ul>

Execute this program.  You should see:

<ul>
<pre><b>
Ticker	Name	                    Sales	PE Ratio
GM	General Motors Corp	123456.78	 6.39
XON	Exxon Corp	         76416.00	18.62
F	Ford Motor Company	 71643.38	 4.36
IBM	IBM Corp	         54217.02	 9.26
MOB	Mobil Corporation	 51223.02	21.32
T	American Tel & Tel	 51209.02	23.20
</b></pre>
</ul>
The report now uses the variables <i>criteria</i>, <i>sort</i>, and 
<i>sortIsUp</i> to restrict the list and sort the results.  This 
report only includes elements with sales values greater than 50,000 
and is sorted from highest to lowest sales.
<hr>
<p>

Instead of defining the report variables in this way, it seems 
appropriate to introduce another class at this time.  The file 
<i>example4.f</i> introduces the class <i>Report</i> and defines 
properties to store the <i>itemList</i>, <i>criteria</i>, <i>sort</i>, 
and <i>sortIsUp</i> values.  This class also defines a method that 
can be used to apply these settings to a list supplied as a parameter:

<ul>
<pre><b>
 #---  Create New Class and Properties 
 Object createSubclass: "Report" ; 
 Report 
    defineFixedProperty: 'itemList' . 
    defineFixedProperty: 'criteria' . 
    defineFixedProperty: 'sort' . 
    defineFixedProperty: 'sortIsUp' . 
 ; 
 #--- Define a Report Instance 
 !rep1 <- Report newAs: "Report1" ; 
 rep1 :itemList <- ticker, name, sales, pe ; 
 rep1 :criteria <- [ sales > 50000 ] ; 
 rep1 :sort <- [ sales ] ; 
 rep1 :sortIsUp <- FALSE ; 
 #---  Define A Method to display the Report 
 Report 
 defineMethod: 
 [ | displayFor: list | 
   itemList 
    do: [ dataType isNumber 
             ifTrue: [ header print: (width * -1) ] 
            ifFalse: [ header print: width ] ; 
        ] ; 
   newLine print ; 
   !universe <- list select: criteria ; 
   sortIsUp 
      ifTrue: [ :universe <- universe sortUp: sort ] 
     ifFalse: [ :universe <- universe sortDown:  sort ] ; 
   universe 
   do: [ !element <- ^self ; 
         ^my itemList 
         do: [ ^my element send: accessBlock . print: width ] ; 
         newLine print ; 
       ] ; 
 ] ; 

 #--- And run it for rep1 on testList 
 rep1 displayFor: testList 
</b></pre>
</ul>

Execute this program.  You should see:
<ul>
<pre><b>
Ticker	Name	                    Sales	PE Ratio
GM	General Motors Corp	123456.78	    6.39
XON	Exxon Corp	         76416.00	   18.62
F	Ford Motor Company	 71643.38	    4.36
IBM	IBM Corp	         54217.02	    9.26
MOB	Mobil Corporation	 51223.02	   21.32
T	American Tel & Tel	 51209.02	   23.20
</b></pre>
</ul>
This program creates the new class <i>Report</i> and defines its 
properties.  An initial instance of this class is created and assigned 
into the variable <i>rep1</i>.  The values for <i>itemList</i>, 
<i>criteria</i>, <i>sort</i>, and <i>sortIsUp</i> are assigned into 
the <i>rep1</i> instance.  The report has been converted into the 
method <i>displayFor:</i> which requires a list as a parameter.  
The <i>displayFor:</i> message is then sent to <i>rep1</i> with 
<i>testList</i> as its parameter, producing the report.

<hr>
<p>

You can now change any of the properties of <i>rep1</i> and rerun the
report.  For example, the program:
<ul>
<pre><b>
 rep1 :sort <- [ name ] ; 
 rep1 :sortIsUp <- TRUE ; 
 rep1 displayFor: testList 
</b></pre>
</ul>
runs the report using these new settings.  Any settings that are 
unchanged retain their value.  The file <i>example4.g</i> defines 
some new methods for updating these values.  By encapsulating the 
procedure to change the values, you can test the values for validity
prior to changing them.  These methods are also all defined to return
<i>^self</i>, enabling the same type of message streaming that you 
saw with <i>defineFixedProperty:</i>:
<ul>
<pre><b>
 #---  Define Cover Methods to Set the Report Parameters 
 Report 
 defineMethod: 
 [ | setItemListTo: blocks | 
   :itemList <- blocks ; 
   ^self               # return current Report object 
 ] . 
 defineMethod: 
 [ | setCriteriaTo: block | 
   block isBlock 
     ifTrue: [ :criteria <- block ] 
    ifFalse: [ ">>>  Cannot Set Criteria.  <<<" printNL ] ; 
   ^self 	 # return current Report object 
 ] . 
 defineMethod: 
 [ | setSortUpTo: block | 
   block isBlock 
     ifTrue: [ :sort <- block ; 
               :sortIsUp <- TRUE ; 
             ] 
    ifFalse: [ ">>>  Cannot Set Sort.  <<<" printNL ] ; 
   ^self 	 # return current Report object 
 ] . 
 defineMethod: 
 [ | setSortDownTo: block | 
   block isBlock 
     ifTrue: [ :sort <- block ; 
               :sortIsUp <- FALSE ; 
             ] 
    ifFalse: [ ">>>  Cannot Set Sort.  <<<" printNL ] ; 
   ^self 	 # return current Report object 
 ] . 
 ; 

 #---  Set Some Values and Run Report for Company masterList 
 rep1 
   setItemListTo: name, pe, sales . 
   setCriteriaTo: [ sales > 25000 && price / earningsPerShare < 10 ] . 
   setSortDownTo: [ sales ] . 
   displayFor: Company masterList ; 
</b></pre>
</ul>

Execute this program.  You should see:

<ul>
<pre><b>
Name	            PE Ratio	    Sales
General Motors Corp	6.39	123456.78
Ford Motor Company	4.36	 71643.38
IBM Corp	        9.26	 54217.02
Citicorp	        3.67	 27988.01
Chrysler Corp	        3.92	 26276.51
</b></pre>
</ul>

Starting with the full Company universe, this report displays the 
items in the new order, applies the two screening criteria, and sorts
the report from highest to lowest sales.  
<hr>
<p>

You can execute the report as of a different date.  Read in 
the file <i>example4.h</i> or type:
<ul>
<pre><b>89 evaluate: [ rep1 displayFor: Company masterList ] ;</b></pre>
</ul>

Execute this program.  You should see:
<ul>
<pre><b>
Name	            PE Ratio	    Sales
General Motors Corp	7.82	102813.00
Ford Motor Company	6.41	 62715.72
</b></pre>
</ul>

All data in the report has been accessed as 12/31/1989.
<hr>
<p>
The current report method does not indicate the "as of" date for the 
data.  The file <i>example4.i</i> adds the date as another attribute
of the report and modifies the <i>displayFor:</i> method to print 
the date.  A <i>title</i> attribute is also defined in this version:
<ul>
<pre><b>
 Report 
 #---  Add asOfDate and title as Report attributes 
     defineFixedProperty: 'asOfDate' . 
 defineMethod: 
 [ | setAsOfDateTo: date | 
   :asOfDate <- date asDate ; 
   ^self 
 ] . 
     defineFixedProperty: 'title' . 
 defineMethod: 
 [ | setTitleTo: string | 
   :title <- string asString ; 
   ^self 
 ] . 

 #---  Modify to use title and asOfDate; display other criteria 
 defineMethod: 
 [ | displayFor: list | 
   !totalWidth <- itemList total: [ width ] ; 
   title centerNL: totalWidth . print; 
   !evaluationDate <- asOfDate ;        #-- use asOfDate if defined 
   evaluationDate isNA ifTrue: [ :evaluationDate <- ^date ] ; 
   "As Of: " print ; 
   evaluationDate printNL ; 
   "    Criteria: " print ; criteria printNL ; 
   "    Sort " print ; 
   sortIsUp ifTrue: [ "Up: " print ] ifFalse: [ "Down: " print ] ; 
   sort printNL ; 
   newLine print ; 
   itemList 
    do: [ dataType isNumber 
             ifTrue: [ header print: (width * -1) ] 
            ifFalse: [ header print: width ] ; 
        ] ; 
   newLine print ; 
   evaluationDate evaluate: [            #-- evaluate report using correct date 
   !universe <- list select: criteria ; 
   sortIsUp 
      ifTrue: [ :universe <- universe sortUp: sort ] 
     ifFalse: [ :universe <- universe sortDown:  sort ] ; 
   universe 
   do: [ !element <- ^self ; 
         ^my itemList 
         do: [ ^my element send: accessBlock . print: width ] ; 
         newLine print ; 
       ] ; 
   ] ;                  #--- end of evaluate: 
 ] ;                    #--- end of method 

 #--- Set Title and rerun it as of 1989 
 rep1 
   setTitleTo: "First Report" . 
   setAsOfDateTo: 89 . 
   displayFor: Company masterList 
</b></pre>
</ul>

Execute this program.  You should see:
<ul>
<pre><b>
                 First Report
As Of: 12/31/1989
    Criteria: [sales > 25000 && price / earningsPerShare < 10]
    Sort Down: [sales]

Name	            PE Ratio	    Sales
General Motors Corp	7.82	102813.00
Ford Motor Company	6.41	 62715.72
</b></pre>
</ul>

The properties <i>asOfDate</i> and <i>title</i> and the appropriate 
cover methods are defined.  The <i>displayFor:</i> method is modified
to print out a title section at the top of the report.  First the 
title is centered over the total width of the report.  The evaluation
date is defined to be the <i>asOfDate</i> if it has been set.  
Otherwise, the current default date is used.  The evaluation date, 
criteria, and sort rule for the report is then displayed.
<hr>
<p>

The file <i>example4.j</i> defines a new Report Item which accesses 
the sales value from the prior year-end.  The <i>itemList</i> is 
redefined to include this item and the report is rerun for the full 
Company universe:

<ul>
<pre><b>
 !salesPrior <- ReportItem new 
    do: [ :header <- "Prev Sales" ; 
          :dataType <- ^global Number ; 
          :width <- 12 ; 
          :accessBlock <- [ :sales lag: 1 yearEnds ] ; 
        ] ; 
 rep1 
   setItemListTo: name, sales, salesPrior . 
   displayFor: Company masterList ; 
</b></pre>
</ul>

Execute this program.  You should see:

<ul>
<pre><b>
                  First Report
As Of: 12/31/1989
    Criteria: [sales > 25000 && price / earningsPerShare < 10
    Sort Down: [sales]

Name	                    Sales	Prev Sales
General Motors Corp	102813.00	  96371.63
Ford Motor Company	 62715.72	  52774.31
</b></pre>
</ul>

<hr>
To run the same report as of 12/31/90, read in the file <i>example4.k</i>
or type:

<ul>
<pre><b>
 rep1 
   setAsOfDateTo: 90 . 
   displayFor: Company masterList ; 
</b></pre>
</ul>

Execute this program.  You should see:

<ul>
<pre><b>
                  First Report
As Of: 12/31/1990
    Criteria: [sales > 25000 && price / earningsPerShare < 10]
    Sort Down: [sales]

Name	                    Sales      Prev Sales
General Motors Corp	101781.00	102813.00
Ford Motor Company	 71643.38        62715.72
IBM Corp	         54217.02	 51250.02
Citicorp	         27988.01	 23496.00
Chrysler Corp	         26276.51	 22586.30
</b></pre>
</ul>

<hr>

| <a href="tuBasic.htm">Vision Basics</a>  
| <a href="tuLoad.htm">Creating a Demo Database</a>
| <a href="tuSingle.htm">Single Object Access</a>  
| <a href="tuList.htm">Using Lists</a> 
| <a href="tuTS.htm">Using Dates and TimeSeries</a> | 

<hr>

<table border=0 width="100%">
<tr>
<td align=left><font size=-1>Copyright &copy; 1999 Innovative Systems Techniques, Inc.</font>
<td align=right><font size=-1>Updated January 25, 1999</font>
</tr>
</table>

</body>
</html>
