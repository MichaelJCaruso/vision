<!DOCTYPE html>
<html>
<head>
<title>Vision Class: TimeSeries</title>
</head>
<body bgcolor = white>
<h2>Vision Class: TimeSeries</h2>

<p>
     | <a href="FHome.htm">Home</a> | <a href="mTS.htm">Messages</a> | <a href="clXRef.htm">Class XRef</a> | <a href="clCollect.htm">The Collection Classes</a> | <a href="clDate.htm">The Date Class</a> | <a href="tuTS.htm">Using TimeSeries</a> |
<hr> 
<h3>Topics Covered:</h3> 
<ul type=square> 
<li><a href="#overview">Overview</a>
<li><a href="#basic">TimeSeries Basics</a>
<li><a href="#date">The Default Date and DateRanges</a>
<li><a href="#lags">Lags and Leads</a>
<li><a href="#extract">Extracting Subsets</a>
<li><a href="#collect">Collection Message Summary</a>
<li><a href="#messages">Additional TimeSeries Messages</a>
<li><a href="#methods">TimeSeries and Methods</a>
<li><a href="#props">TimeSeries and Properties</a>
<li><a href="#hfts">High Frequency Time Series</a>
<li><a href="#other">Related Topics</a>
</ul>
<p>
<hr>
<h3><a name="overview">Overview</a></h3> 
<p> 
<b>TimeSeries</b> objects are used to track information for a particular 
data item over time.  Some items, such as company sales and earnings
may be tracked at regular intervals.  Other information, such as
ratings, will change at irregular intervals over time.  The
<i>TimeSeries</i> class has been designed to work effectively in 
all these cases.
<p>
The <i>TimeSeries</i>
class is an indirect subclass of the <i>Collection</i> class
which is also a superclass of the classes
<a href="clList.htm"><i>List</i></a> and 
<a href="clIList.htm"><i>IndexedList</i></a>.
Instances of the class <i>TimeSeries</i> consist of a collection of objects
that are accessed either by date or as a set.  A
<i>TimeSeries</i> is updated by adding date-object pairs.
<p>
The <i>TimeSeries</i> class has been optimized to organize and
query large sets of data.  A large number of the messages defined
for this class have been written in Vision and can therefore be
modified and expanded as needed.  As always, you can define any
number of new messages for the class.
<p>
The <i>TimeSeries</i> class is a direct subclass of IndexedCollection:
<font size=+1><pre>
          <a href="clObject.htm">Object</a>
             |
             Function
                |
                EnumeratedFunction
                   |
                   Collection
                      |
                      IndexedCollection
                         |-- <a href="clIList.htm">IndexedList</a>
                         |-- <b>TimeSeries</b>

</pre></font>
<p>
<hr>
<h3><a name="basic">TimeSeries Basics</a></h3>
<p>
A <i>TimeSeries</i> is similar to an <i>IndexedList</i>
that is always indexed by a date.  
<i>TimeSeries</i> objects are available in two distinct forms in Vision: 
<p>
<p>
<ol type="1">
<li>As properties created with the <i>define:</i> message. 
<li>As stand-alone objects.
</ol>
<p>
The expression:<pre><tt><b>
     Currency define: 'tsProperty' ;
</b></tt></pre>
creates a new time series property for the class Currency.  The
expression:<pre><tt><b>
     Named Currency USD :tsProperty 
</b></tt></pre>
retrieves this property for the US currency as a <i>TimeSeries</i>
object.  The expression:<pre><tt><b>
     !newTS <- TimeSeries new ;
</b></tt></pre>
creates a stand-alone <i>TimeSeries</i> object.  The expression:<pre><tt><b>
     newTS
</b></tt></pre>
retrieves this object.  
<p>
These two forms of 
<i>TimeSeries</i> object respond identically to the same set of
messages.  They differ only in the manner in which they are accessed.
<a href="Fund.htm#ts">Recall</a>
that you need to place the <b><font size=+1>:</font></b>
character in front of the property name to access the full
<i>TimeSeries</i> object associated with the property.  In
this case the message <i>:tsProperty</i> returns the 
<i>TimeSeries</i> object.  Stand-alone <i>TimeSeries</i> objects
do not require the initial <b><font size=+1>:</font></b>
character.  This difference is described further in a
<a href="#props">later section</a>.
<p>
The message 
<a href="mTS.htm#count"><i>count</i></a>
returns the number of points in a time series.  For example:<pre><tt><b>
     Named Currency USD :tsProperty count printNL ;
     newTS count printNL ;
</b></tt></pre>
Initially a <i>TimeSeries</i> contains 0 elements.  The
<a href="mTS.htm#asOf:put:"><i>asOf:put:</i></a>
message is used to update a <i>TimeSeries</i>:<pre><tt><b>
     Named Currency USD :tsProperty asOf: 9501 put: 10.1 ; 
     Named Currency USD :tsProperty asOf: 9502 put: 12.3 ; 
     Named Currency USD :tsProperty asOf: 9503 put: 9.7 ; 
     Named Currency USD :tsProperty count printNL ;
or
     newTS asOf: 960515 put: 3.4 ;
     newTS count printNL ;
</b></tt></pre>
<p>
The property <i>tsProperty</i> for the US currency contains 3 points.
The variable <i>newTS</i> now refers to a <i>TimeSeries</i>
containing 1 point.  
<p>
The value of the <i>"put:"</i> parameter can
be any object.  
If desired, you can store objects
from different classes within a single <i>TimeSeries</i>. 
The dates in a time series can be regular or irregular.  Each
instance in a class can have different points represented in
a time varying property.
<p>
When you ask for the value of a time series property, by
default you access the value that was most recently updated on or before
the current date.  For example:<pre><tt><b>
     Named Currency USD tsProperty printNL ;
</b></tt></pre>
returns the value <i>9.7</i> which represents the most recent value
in the time series.
The 
<a href="mTS.htm#asOf:"><i>asOf:</i></a>
message is used to access a specific
point in the <i>TimeSeries</i>.  For example:<pre><tt><b>
     Named Currency USD :tsProperty asOf: 9502 . printNL ;
</b></tt></pre>
retrieves and displays the value <i>12.3</i>.  A <i>TimeSeries</i>
responds to the <i>asOf:</i> message by accessing the value of the
series that was in effect on or before the date supplied as the
parameter.  The parameter should be a <i>Date</i> object or
an <a href="clDate.htm#creation">integer equivalent</a>.
<p>
Pictorially, the <i>tsProperty</i> time series for the US currency
can be viewed as a time line of three values: <pre><tt>
 
      10.1        12.3        9.7
     ___|_____|_____|__________|__________|___
        |     |     |          |          |
      1/31/95 |   2/28/95    3/31/95    4/30/95
              |
           2/15/95

</tt></pre>
If you request data as of a date that is not in the time series, the
value on or before that date will be returned. For example: <pre><tt><b>
     Named Currency USD :tsProperty asOf: 950215 . printNL ;
</b></tt></pre>
returns the value <i>10.1</i>. Since no value is explicitly stored on 
February 15, 1995,
the first value prior to this date is returned.  In this case,
the value is the value as of 1/31/95, the first value to the left of
2/15/96 in the time line. If your "as of" date is earlier than
the first available date, the value <i>NA</i> will be returned. 
For example: <pre><tt><b>
     Named Currency USD :tsProperty asOf: 94 . printNL ;
</b></tt></pre>
returns the value <i>NA</i>, since there is no time point on or before this
date. If your "as of" date is later than the last available date,
the value of the last point in the time series is returned. 
<p>
The message
<a href="mTS.htm#displayAll"><i>displayAll</i></a> can be sent to a a
<i>TimeSeries</i> to display all its points. For example: <pre><tt><b>
     Named Currency USD :tsProperty displayAll ;

</b>displays:<b>

     1/31/1995   10.10
     2/28/1995   12.30
     3/31/1995    9.70
</b></tt></pre>
If you send this message to the Canadian currency:<pre><tt><b>
     Named Currency CAD :tsProperty displayAll ;
</b></tt></pre>
you should not see any values since this property has not been
updated for this currency.
<p>
The 
<a href="mTS.htm#firstDate"><i>firstDate</i></a> and 
<a href="mTS.htm#lastDate"><i>lastDate</i></a>
messages are used to determine the first and last dates for which information
has been stored in a <i>TimeSeries</i>.  For example:<pre><tt><b>
     Named Currency USD :tsProperty firstDate printNL ;
     Named Currency USD :tsProperty lastDate printNL ;
</b></tt></pre>
<p>
When you store a value into a time series as of a specific date, the
value is assumed to <i>go into effect</i> on that date. It remains in effect
until a value is stored at a later date. 
The messages 
<a href="mTS.htm#effectiveDateAsOf:"><i>effectiveDateAsOf:</i></a>
and <a href="mTS.htm#nextDateAsOf:"><i>nextDateAsOf:</i></a>
are used to determine the interval over which a value is in effect. 
For example:<pre><tt><b>
     Named Currency USD :tsProperty effectiveDateAsOf: 950215 .
</b></tt></pre>
returns the date <i>1/31/95</i> 
and:<pre><tt><b>          Named Currency USD :tsProperty nextDateAsOf: 950215 .
</b></tt></pre>
returns the date <i>2/28/95</i>.
This indicates that the value you are retrieving for February 15,
1995 was really stored on January 31, 1995 and next updated on
February 28, 1995.
<p>
The <a href="mTS.htm#on:"><i>on:</i></a> message provides an
alternative to the <i>asOf:</i> message which only returns a value if
the value is actually stored on the date supplied as a parameter.
If no value is stored on the date, the value <i>NA</i> is returned.
<p>
The
<i><a href="mTS.htm#delete:">delete:</a></i> message is used to delete
a value as of a specific date. For example:<pre><tt><b>
     Named Currency USD :tsProperty delete: 9503 .
</b></tt></pre>
deletes this point from the time series, leaving a time series with
2 points.  
<p>
Since the <i>TimeSeries</i> class is a subclass of <i>Collection</i>,
messages such as <i>do:</i>, 
<i>send:</i>, <i>select:</i>, <i>groupedBy:</i>, <i>sortUp:</i>,
<i>decileDown:</i>, and <i>extendBy:</i> are
available to <i>TimeSeries</i> objects as well. 
Within the block supplied as the parameter, all messages are sent
to each element in the recipient time series.  When the recipient
is a <i>TimeSeries</i> object, the 
<a href="Execution.htm#date">magic word <i>^date</i></a>
is rebound to the specific date being analyzed.  For example:<pre><tt><b>
     Named Currency USD :tsProperty
     do: [ ^date print: 15 ;          #- display date of element
           printNL ;                  #- print value of element
         ] ;

</b>displays:<b>

     1/31/1995   10.10
     2/28/1995   12.30
     3/31/1995    9.70
</b></tt></pre>
<p>
The <i>toList</i> message can be used to convert a
<i>TimeSeries</i> into a standard <i>List</i> object.
For example:<pre><tt><b>
     Named Currency USD :tsProperty toList at: 1 .
</b></tt></pre>
returns the value <i>10.1</i> which is the first value positionally
after the <i>TimeSeries</i> has been converted to a <i>List</i>.
Note that once the time series has been converted to a list, the
specific <i>^date</i> values are not available.
<p>

<hr>
<h3><a name="date">The Default Date and DateRanges</a></h3>
<p>
<a href="clDate.htm#ts"><i>Date</i> objects</a> play an important role in 
accessing and updating time-series data.
Dates (or integer equivalents) are the parameters for the
<a href="mTS.htm#asOf:"><i>asOf:</i></a> and
<a href="mTS.htm#asOf:put:"><i>asOf:put:</i></a> 
messages define for the <i>TimeSeries</i> class.
<p>
When a message retrieves data stored in a
<a href="Fund.htm#ts">time-varying property</a>, it 
accesses the data as of a specific date.  By default, this
date is the current date.  
The <i>evaluate:</i> message is sent to a <i>Date</i> or an
<i>Integer</i> that can be converted to a date and is used to
change the default date.  The parameter to this message is
a block.  All messages within the block that access time series
properties will access the values as of this date.
For example:<pre><tt><b>
     950315 evaluate:
       [ Named Currency CAD usExchange printNL ] ;
</b></tt></pre>
In this case, the exchange rate is accessed as of March 15, 1995.
The <a href="Execution.htm#date">magic word <i>^date</i></a> refers
to this evaluation date.  For example:<pre><tt><b>
     950315 evaluate:
       [ ^date print: 15 ;
         Named Currency CAD usExchange printNL ;
       ] ;
</b></tt></pre>
This example displays the date <i>3/15/1995</i> followed by the exchange
rate as of that date.
<p>
The "as of" logic is used to retrieve time varying data within a
<i>^date evaluate:</i> block. 
If the evaluation date is earlier than the first available
date for a time varying item, the value <i>NA</i> is returned. 
If there is no explicit data available for the evaluation date,
the most recent value before that date is retrieved.
<p>
<a name="nested"> </a>
You can change the default date within the <i>evaluate:</i> block.
For example:<pre><tt><b>
     950315 evaluate:
       [ ^date print: 15 ;
         Named Currency CAD usExchange printNL ;
         ^date + 5 businessDays evaluate:
             [ ^date print: 15 ; Named Currency CAD usExchange printNL ] ;
       ] ;
</b></tt></pre>
This example displays the date <i>3/15/1995</i> followed by the exchange
rate for that date.  It then displays the date and exchange rate for
the date 5 business days later than the original date.
<p>
If you do not explicitly override it, Vision uses the current date as
the default date. The message <i>^today</i> can be used to specify the
current date. For example, the expressions: <pre><tt><b>
     Named Currency CAD usExchange print; 

     Named Currency CAD :usExchange asOf: ^today .  print; 
and
     ^today evaluate:
        [ Named Currency CAD usExchange print; ] ;
</b></tt></pre>
are all equivalent and return the Canadian exchange rate as of the
current date. 
<p>
<blockquote><hr><center>
<a href="Execution.htm" name="evaluateScope.note"><b>Note: </b> </a></center>
The <i>evaluate:</i> message changes the time context of the
block but does not change the recipient object like the <i>do:</i>
message.  In other words, the magic word <i>^date</i> is rebound
by the <i>evaluate:</i> message but the magic word <i>^self</i> is
not.
<hr></blockquote>
<p>
Several of the <i>TimeSeries</i> messages have variations designed to use the
default date including:
<p>
<Center><table width="90%" border="1" cellspacing="2" cellpadding="8">
<tr>
<td><b>General Message</b></td>
<td><b>Default Date Equivalent</b></td>
</tr>

<tr>
<td><i>asOf: put:</i>
<td><i>put:</i>
<tr>
<td><i>effectiveDateAsOf:</i>
<td><i>effectiveDate</i>
<tr>
<td><i>nextDateAsOf:</i>
<td><i>nextDate</i>

</tr></table></Center>

<p>
Instead of supplying an explicit date as a parameter, the messages in
the second column use the current value of <i>^date</i> as the date. 
For example:<pre><tt><b>
     9511 evaluate: 
        [ Named Currency CAD :usExchange put: 2.1 ] ;

</b>is equivalent to:<b>

     Named Currency CAD :usExchange asOf: 9511 put: 2.1 ;
</b></tt></pre>
<p>
<a name="drange"> </a>
<p>
The <i>evaluate:</i> message works with 
<a href="clDate.htm#dr"><i>DateRange</i> objects</a> as well as
with <i>Dates</i>.  
For example, to access the Canadian exchange rate for each
month-end date in 1995, use:<pre><tt><b>
     9501 to: 9512 by: 1 monthEnds .
     evaluate: [ ^date print: 15 ; 
                 Named Currency CAD usExchange printNL ;
               ] ;
</b></tt></pre>
The supplied block prints the evaluation date and the exchange
rate for each date in the date range.  Starting with the initial
date, Vision increments the evaluation date by the date range's
offset until the ending date is crossed.
When the starting date is earlier than the ending date, 
Vision decrements the evaluation date by the offset provided.
Any time varying data accessed within the block will be retrieved
"as of" the current evaluation date in the range.

<p>
<hr>
<h3><a name="lags">Lags and Leads</a></h3>
<p>
The <a href="mTS.htm#lag:"><i>lag:</i></a> message is used to return
the value of the recipient time series as of a date derived relative to
the current evaluation date.  This derived date is defined as:
<i>^date - offset</i>, where <i>offset</i> is the 
<a href="clDate.htm#offset"><i>DateOffset</i></a> object
supplied as the parameter to the <i>lag:</i> message.
For example:<pre><tt><b>
     Currency define: 'tsProperty' ;
     Named Currency USD :tsProperty asOf: 9501 put: 10.1 ; 
     Named Currency USD :tsProperty asOf: 9502 put: 12.3 ; 
     Named Currency USD :tsProperty asOf: 9503 put: 9.7 ; 

     9502 evaluate:
       [ Named Currency USD 
            :tsProperty lag: 1 monthEnds . printNL ;
       ] ;
</b></tt></pre>
In this example, the evaluation date is <i>9502</i>.  Sending
the <i>lag: 1 monthEnds</i> message to the time series is a request
to access the data as of the prior month-end date.
In this case, the  January 31, 1995 value of <i>10.1</i> is retrieved
and displayed.
<p>
The <a href="mTS.htm#lead:"><i>lead:</i></a> message is used to return
the value of the recipient time series as of a date derived relative to
the current evaluation date.  This derived date is defined as:
<i>^date + offset</i>.
<p>
Suppose you wanted to compute the change in value between two points
in time. For example:<pre><tt><b>
       Named Currency USD 
       do: [ (:tsProperty asOf: 9503) -
             (:tsProperty asOf: 9502) printNL:10 ;
           ] ;
</b></tt></pre>
The message <i><a href="mTS.htm#changeLag:">changeLag:</a></i> provides
a more streamlined way for requesting the same information. The expression
could be rewritten using:<pre><tt><b>
       9503 evaluate: [ 
          Named Currency USD
              :tsProperty changeLag: 1 monthEnds . printNL ;
       ] ;
</b></tt></pre>
The messages
<i><a href="mTS.htm#pctChangeLag:">pctChangeLag:</a></i>,
<i><a href="mTS.htm#changeLead:">changeLead:</a></i>, and
<i><a href="mTS.htm#pctChangeLead:">pctChangeLead:</a></i>
work in a similar fashion.

<p>
<hr>
<h3><a name="extract">Extracting Subsets</a></h3>
<p>
Since the <i>TimeSeries</i> class is a subclass of <i>Collection</i>,
you can use the <a href="clCollect.htm#select"><i>select:</i></a>
message to restrict the time series to dates within a specific range.
For example:<pre><tt><b>
     Currency define: 'tsProperty' ;
     Named Currency USD :tsProperty asOf: 9501 put: 10.1 ; 
     Named Currency USD :tsProperty asOf: 9502 put: 12.3 ; 
     Named Currency USD :tsProperty asOf: 9503 put: 9.7 ; 

     Named Currency USD :tsProperty
         select: [ ^date > 9501 asDate ] .
     do: [ ^date print: 15 ; printNL ] ;
</b></tt></pre>
The messages
<a href="mTS.htm#from:to:"><i>from:to:</i></a>,
<a href="mTS.htm#from:"><i>from:</i></a>, and
<a href="mTS.htm#to:"><i>to:</i></a>
have been defined to return a new <i>TimeSeries</i> object which is
the subset of the recipient:<pre><tt><b>
     #-- Retrieve data from 9502 on
     Named Currency USD :tsProperty from: 9502 .
        do: [ ^date print: 15 ; printNL ] ;

     #-- Retrieve data before 9503 on
     Named Currency USD :tsProperty to: 9502 .
        do: [ ^date print: 15 ; printNL ] ;

     #-- Retrieve data between two dates
     Named Currency USD :tsProperty from: 9501 to: 9502 .
        do: [ ^date print: 15 ; printNL ] ;
</b></tt></pre>
<p>
The message 
<a href="mTS.htm#extractForDateRange:"><i>extractForDateRange:</i></a>
returns a new <i>TimeSeries</i> object that contains a point for each
value in the <i>DateRange</i> supplied as the parameter.  For
example:<pre><tt><b>
     !dr <- 9412 to: 9504 by: 1 monthEnds ;
     !extract <- Named Currency USD :tsProperty 
        extractForDateRange: dr ;
     extract displayAll ;

</b>displays<b>:

     12/31/1994           NA 
     01/31/1995         10.10
     02/28/1995         12.30
     03/31/1995          9.70
     04/30/1995          9.70
</b></tt></pre>
The variable <i>extract</i> contains a <i>TimeSeries</i> object
with a point for each date in <i>dr</i>.  Since there was no
data prior to 1/31/95, an <i>NA</i> value is returned for 12/31/94.
Since there was no data after 3/31/95, the 3/31 value
is returned for 4/30.
<p>

<p>
<hr>
<h3><a name="collect">Collection Message Summary</a></h3>
<p>
Since the <i>TimeSeries</i> class is a subclass of <i>Collection</i>,
all messages defined for the <i>Collection</i> class are
available to <i>TimeSeries</i> objects as well.  A subset of these
messages are documented in 
<a href="clCollect.htm"><i>Vision Class: Collection</i></a>
and are summarized below.

<p>
<dl>
<dt><b><a href="clCollect.htm#basic">Collection Basics</a></b>
<dd><a href="mTS.htm#count"><i>count</i></a>
<dd><a href="mTS.htm#do:"><i>do:</i></a>
<dd><i>basicDo:</i>
<dd><a href="mTS.htm#send:"><i>send:</i></a>
<dd><i>basicSend:</i>
<dd><a href="mTS.htm#extendBy:"><i>extendBy:</i></a>
<dd><i>basicExtend:</i>
<dd><a href="mTS.htm#collect:"><i>collect:</i></a>
<dd><a href="mTS.htm#numberElements"><i>numberElements</i></a>
<dd><a href="mTS.htm#linkElements"><i>linkElements</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#select">Creating Subsets</a></b>
<dd><a href="mTS.htm#select:"><i>select:</i></a>
<dd><a href="mTS.htm#first:"><i>first:</i></a>
<dd><a href="mTS.htm#last:"><i>last:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#sorts">Sorting and Ranking Collections</a></b>
<dd><a href="mTS.htm#sortUpBy:then:"><i>sortUpBy:then:</i></a>
<dd><a href="mTS.htm#sortDownBy:then:"><i>sortDownBy:then:</i></a>
<dd><a href="mTS.htm#rankUp:"><i>rankUp:</i></a>
<dd><a href="mTS.htm#rankDown:"><i>rankDown:</i></a>
<dd><a href="mTS.htm#rankDown:usingCollector:">
<i>rankDown:usingCollector:</i></a>
<dd><a href="mTS.htm#rankUp:usingCollector:">
<i>rankUp:usingCollector:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#groups">Grouping Collections</a></b>
<dd><a href="mTS.htm#groupedBy:"><i>groupedBy:</i></a>
<dd><a href="mTS.htm#groupedByString:"><i>groupedByString:</i></a>
<dd><a href="mTS.htm#groupedBy:in:"><i>groupedBy:in:</i></a>
<dd><a href="mTS.htm#groupedBy:intersect:"><i>groupedBy:intersect:</i></a>
<dd><a href="mTS.htm#groupedBy:union:"><i>groupedBy:union:</i></a>
<dd><a href="mTS.htm#groupedBy:usingCutoffs:"><i>groupedBy:usingCutoffs:</i></a>
<dd><a href="mTS.htm#groupedByCriteria:"><i>groupedByCriteria:</i></a>
<dd><a href="mTS.htm#groupPrintUsing:"><i>groupPrintUsing:</i></a>
<dd><a href="mTS.htm#mgroupedBy:"><i>mgroupedBy:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#compute">Collection Computation Messages</a></b>
<dd><a href="mTS.htm#average"><i>average</i></a>
<dd><a href="mTS.htm#average:"><i>average:</i></a>
<dd><a href="mTS.htm#average:withWeights:"><i>average:withWeights:</i></a>
<dd><a href="mTS.htm#compound"><i>compound</i></a>
<dd><a href="mTS.htm#compound:"><i>compound:</i></a>
<dd><a href="mTS.htm#correlate:with:"><i>correlate:with:</i></a>
<dd><a href="mTS.htm#gMean"><i>gMean</i></a>
<dd><a href="mTS.htm#gMean:"><i>gMean:</i></a>
<dd><a href="mTS.htm#harmonicMean"><i>harmonicMean</i></a>
<dd><a href="mTS.htm#harmonicMean:"><i>harmonicMean:</i></a>
<dd><a href="mTS.htm#harmonicMean:withWeights:"><i>harmonicMean:withWeights:</i></a>
<dd><a href="mTS.htm#max"><i>max</i></a>
<dd><a href="mTS.htm#max:"><i>max:</i></a>
<dd><a href="mTS.htm#median"><i>median</i></a>
<dd><a href="mTS.htm#median:"><i>median:</i></a>
<dd><a href="mTS.htm#min"><i>min</i></a>
<dd><a href="mTS.htm#min:"><i>min:</i></a>
<dd><a href="mTS.htm#mode"><i>mode</i></a>
<dd><a href="mTS.htm#mode:"><i>mode:</i></a>
<dd><a href="mTS.htm#product"><i>product</i></a>
<dd><a href="mTS.htm#product:"><i>product:</i></a>
<dd><a href="mTS.htm#rankCorrelate:with:"><i>rankCorrelate:with:</i></a>
<dd><a href="mTS.htm#regress:"><i>regress:</i></a>
<dd><a href="mTS.htm#stdDev"><i>stdDev</i></a>
<dd><a href="mTS.htm#stdDev:"><i>stdDev:</i></a>
<dd><a href="mTS.htm#total"><i>total</i></a>
<dd><a href="mTS.htm#total:"><i>total:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#tiles">Intra-List Messages</a></b>
<dd><a href="mTS.htm#decileUp:"><i>decileUp:</i></a>
<dd><a href="mTS.htm#decileDown:"><i>decileDown:</i></a>
<dd><a href="mTS.htm#quintileUp:"><i>quintileUp:</i></a>
<dd><a href="mTS.htm#quintileDown:"><i>quintileDown:</i></a>
<dd><a href="mTS.htm#percentileUp:"><i>percentileUp:</i></a>
<dd><a href="mTS.htm#percentileDown:"><i>percentileDown:</i></a>
<dd><a href="mTS.htm#tileUp:tiles:"><i>tileUp:tiles:</i></a>
<dd><a href="mTS.htm#tileDown:tiles:"><i>tileDown:tiles:</i></a>
<dd><a href="mTS.htm#decileUp:using:"><i>decileUp:using:</i></a>
<dd><a href="mTS.htm#decileDown:using:"><i>decileDown:using:</i></a>
<dd><a href="mTS.htm#quintileUp:using:"><i>quintileUp:using:</i></a>
<dd><a href="mTS.htm#quintileDown:using:"><i>quintileDown:using:</i></a>
<dd><a href="mTS.htm#percentileUp:using:"><i>percentileUp:using:</i></a>
<dd><a href="mTS.htm#percentileDown:using:"><i>percentileDown:using:</i></a>
<dd><a href="mTS.htm#tileUp:using:tiles:"><i>tileUp:using:tiles:</i></a>
<dd><a href="mTS.htm#tileDown:using:tiles:"><i>tileDown:using:tiles:</i></a>
<dd><a href="mTS.htm#runningTotal:"><i>runningTotal:</i></a>
<dd><a href="mTS.htm#runningAverage:"><i>runningAverage:</i></a>
<dd><a href="mTS.htm#normalize:"><i>normalize:</i></a>
<dd><a href="mTS.htm#weightedDecile:"><i>weightedDecile:</i></a>
<dd><a href="mTS.htm#weightedQuintile:"><i>weightedQuintile:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#inter">Inter-List Messages</a></b>
<dd><a href="mTS.htm#isEquivalentTo:"<i>isEquivalentTo:</i></a>
<dd><a href="mTS.htm#union:"<i>union:</i></a>
<dd><a href="mTS.htm#union:using:"<i>union:using:</i></a>
<dd><a href="mTS.htm#intersect:"<i>intersect:</i></a>
<dd><a href="mTS.htm#intersect:using:"<i>intersect:using:</i></a>
<dd><a href="mTS.htm#exclude:"<i>exclude:</i></a>
<dd><a href="mTS.htm#exclude:using:"<i>exclude:using:</i></a>
<dd><a href="mTS.htm#difference:"<i>difference:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#creation">Creation and Update Messages</a></b>
<dd><a href="mTS.htm#copyListElements"><i>copyListElements</i></a>
<dd><a href="mTS.htm#append:"><i>append:</i></a>
<dd><a href="mTS.htm#collectListElementsFrom:">
<i>collectListElementsFrom:</i></a>
</dl>
<p>
<a name="inquiry"> </a>
<dl>
<dt><b>Inquiry Messages</b>
<dd><a href="mTS.htm#all:"><i>all:</i></a>
<dd><a href="mTS.htm#any:"><i>any:</i></a>
<dd><a href="mTS.htm#excludesElement:"><i>excludesElement:</i></a>
<dd><a href="mTS.htm#includesElement:"><i>includesElement:</i></a>
</dl>


<p>
<hr>
<h3><a name="messages">Additional TimeSeries Messages</a></h3>
<p>
You can redefine <i>Collection</i> messages and define new messages
directly for the <i>TimeSeries</i> class.  You can define any number of
new methods and constants.  You cannot define and update
properties for <i>TimeSeries</i> objects.  
<p>
The following messages are used to <b>update</b> <i>TimeSeries</i>
objects:
<p>
<Center><table width="90%" border="1" cellspacing="2" cellpadding="8">
<tr>
<td><b>Message</b>
<td><b>Definition</b>
<td><b>Sample</b>
</tr>

<tr>
<td><a href="mTS.htm#asOf:put:"><i>asOf:put:</i></a>
<td>Update <i>recipient</i> as of date in <i>parameter1</i> with
object in <i>parameter2</i>, inserting a new date if necessary
<td>ts asOf: 95 put: 10 .
<tr>
<td><a href="mTS.htm#put:"><i>put:</i></a>
<td>Update <i>recipient</i> as of ^date with
object in <i>parameter</i>, inserting a new date if necessary
<td>ts put: 10 .
<tr>
<td><a href="mTS.htm#asOf:assign:"><i>asOf:assign:</i></a>
<td>Change <i>recipient</i> as of date in <i>parameter1</i> with
object in <i>parameter2</i>
<td>ts asOf: 95 assign: 10 .
<tr>
<td><a href="mTS.htm#<-"><i><-</i></a>
<td>Change <i>recipient</i> as of ^date with
object in <i>parameter</i>
<td>ts <- 10
<tr>
<td><a href="mTS.htm#updateWith:"><i>updateWith:</i></a>
<td>Update <i>recipient</i> as of ^date if
<i>parameter</i> is different from current value
<td>ts updateWith: 10 .
<tr>
<td><a href="mTS.htm#delete:"><i>delete:</i></a>
<td>Delete <i>parameter</i> date from <i>recipient</i>
<td>ts delete: 95 asDate
<tr>
<td><a href="mTS.htm#deleteAllPoints"><i>deleteAllPoints</i></a>
<td>Delete all points from <i>recipient</i>
<td>ts deleteAllPoints
<tr>
<td><a href="mTS.htm#deleteColumnForDate:"><i>deleteColumnForDate:</i></a>
<td>Delete all points for all instances in <i>recipient's</i> cluster
as of <i>parameter</i>
<td>ts deleteColumnForDate: 95 asDate .
<tr>
<td><i>deleteColumn</i></a>
<td>Delete all points for all instances in <i>recipient's</i> cluster
as of ^date
<td>ts deleteColumn

</tr></table></Center>

<p>
The following messages retrieve <b>basic characteristics</b>
about <i>TimeSeries</i> objects:
<p>
<Center><table width="90%" border="1" cellspacing="2" cellpadding="8">
<tr>
<td><b>Message</b>
<td><b>Definition</b>
<td><b>Sample</b>
</tr>

<tr>
<td><a href="mTS.htm#count"><i>count</i></a>
<td>Number of points in <i>recipient</i>
<td>ts count
<tr>
<td><a href="mTS.htm#firstDate"><i>firstDate</i></a>
<td>Date of first point in <i>recipient</i>
<td>ts firstDate
<tr>
<td><a href="mTS.htm#lastDate"><i>lastDate</i></a>
<td>Date of last point in <i>recipient</i>
<td>ts lastDate
<tr>
<td><a href="mTS.htm#effectiveDate"><i>effectiveDate</i></a>
<td>Effective date as of ^date in <i>recipient</i>
<td>ts effectiveDate
<tr>
<td><a
href="mTS.htm#effectiveDateAsOf:"><i>effectiveDateAsOf:</i></a>
<td>Effective date as of <i>parameter</i> date in <i>recpient</i>
<td>ts effectiveDateAsOf: 95 asDate .
<tr>
<td><a href="mTS.htm#nextDate"><i>nextDate</i></a>
<td>Next date after ^date in <i>recipient</i>
<td>ts nextDate
<tr>
<td><a href="mTS.htm#nextDateAsOf:"><i>nextDateAsOf:</i></a>
<td>Next date after <i>parameter</i> date in <i>recpient</i>
<td>ts nextDateAsOf: 95 asDate .
<tr>
<td><a href="mTS.htm#displayAll"><i>displayAll</i></a>
<td>Display all date-value pairs in <i>recipient</i>
<td>ts displayAll
<tr>
<td><a href="mTS.htm#displayAllChanges"><i>displayAllChanges</i></a>
<td>Display all date-value pairs in <i>recipient</i> that represent
a change in value
<td>ts displayAllChanges

</tr></table></Center>

<p>
The following messages are used to <b>retrieve</b> specific values
from <i>TimeSeries</i> objects:
<p>
<Center><table width="90%" border="1" cellspacing="2" cellpadding="8">
<tr>
<td><b>Message</b>
<td><b>Definition</b>
<td><b>Sample</b>
</tr>

<tr>
<td><a href="mTS.htm#asOf:"><i>asOf:</i></a>
<td>Return value in <i>recipient</i> as of <i>parameter</i> date
<td>ts asOf: 95 .
<tr>
<td><a href="mTS.htm#on:"><i>on:</i></a>
<td>Return value in <i>recipient</i> stored exactly on
<i>parameter</i> date
<td>ts on: 95 .
<tr>
<td><a href="mTS.htm#lag:"><i>lag:</i></a>
<td>Return value in <i>recipient</i> as of ^date - <i>parameter</i>
<td>ts lag: 3 days .
<tr>
<td><a href="mTS.htm#lead:"><i>lead:</i></a>
<td>Return value in <i>recipient</i> as of ^date + <i>parameter</i>
<td>ts lead: 3 days .
<tr>
<td><a href="mTS.htm#value"><i>value</i></a>
<td>Return value in <i>recipient</i> as of ^date
<td>ts value
<tr>
<td><a href="mTS.htm#latest"><i>latest</i></a>
<td>Return value in <i>recipient</i> as of ^today
<td>ts latest
<tr>
<td><a href="mTS.htm#firstObservation"><i>firstObservation</i></a>
<td>Return first value in <i>recipient</i>
<td>ts firstObservation
<tr>
<td><a href="mTS.htm#lastObservation"><i>lastObservation</i></a>
<td>Return last value in <i>recipient</i>
<td>ts lastObservation

</tr></table></Center>

<p>
The following messages are used to <b>extract</b> specific subsets
from <i>TimeSeries</i> objects:
<p>
<Center><table width="90%" border="1" cellspacing="2" cellpadding="8">
<tr>
<td><b>Message</b>
<td><b>Definition</b>
<td><b>Sample</b>
</tr>

<tr>
<td><a href="mTS.htm#from:to:"><i>from:to:</i></a>
<td>Return new time series with date-values from <i>recipient</i>
corresponding the dates between <i>parameters</i>
<td>ts from: 94 to: 95 .
<tr>
<td><a href="mTS.htm#from:"><i>from:</i></a>
<td>Return new time series with date-values from <i>recipient</i>
corresponding the dates on or after <i>parameter</i>
<td>ts from: 95 .
<tr>
<td><a href="mTS.htm#to:"><i>to:</i></a>
<td>Return new time series with date-values from <i>recipient</i>
corresponding the dates on or before <i>parameter</i>
<td>ts to: 95 .
<tr>
<td><a href="mTS.htm#extractForDateRange:"><i>extractForDateRange:</i></a>
<td>Return new time series with date-values from <i>recipient</i>
for each date in <i>parameter</i>
<td>ts extractForDateRange: drange .
<tr>
<td><a href="mTS.htm#extractExactValuesForDateRange:">
<i>extractExactValuesForDateRange:</i></a>
<td>Return new time series with date-values from <i>recipient</i>
for each date in <i>parameter</i>; if value does not exist on exact
date, return default value for that date
<td>ts extractExactValuesForDateRange: drange .
</tr></table></Center>

<p>
The following messages are used to perform computations with
<i>TimeSeries</i> objects:
<p>
<Center><table width="90%" border="1" cellspacing="2" cellpadding="8">
<tr>
<td><b>Message</b>
<td><b>Definition</b>
<td><b>Sample</b>
</tr>

<tr>
<td><a href="mTS.htm#+"><i>+</i></a>
<td>Add <i>parameter</i> to <i>recipient</i>
<td> ts1 + ts2
<tr>
<td><a href="mTS.htm#-"><i>-</i></a>
<td>Subtract <i>parameter</i> from <i>recipient</i>
<td>ts - 3
<tr>
<td><a href="mTS.htm#*"><i>*</i></a>
<td>Multiple <i>recipient</i> by <i>parameter</i>
<td>ts * ts
<tr>
<td><a href="mTS.htm#/"><i>/</i></a>
<td>Divide <i>recipient</i> by <i>parameter</i>
<td>ts / 3
<tr>
<td><a href="mTS.htm#aveForDateRange:"><i>aveForDateRange:</i></a>
<td>Extract date range indicated by <i>parameter</i> from
<i>recipient</i> and compute 
average
<td>ts aveForDateRange: drange .
<tr>
<td><a href="mTS.htm#cGrow"><i>cGrow</i></a>
<td>Compute compound growth for <i>recipient's</i> values
<td>ts cGrow
<tr>
<td><a
href="mTS.htm#cGrowForDateRange:"><i>cGrowForDateRange:</i></a>
<td>Extract date range indicated by <i>parameter</i> from
<i>recipient</i> and compute 
compound growth
<td>ts cGrowForDateRange: drange .
<tr>
<td><a href="mTS.htm#changeLag:"><i>changeLag:</i></a>
<td>Compute change in value between ^date and ^date -
<i>parameter</i>
<td>ts changeLag: 1 months .
<tr>
<td><a href="mTS.htm#changeLead:"><i>changeLead:</i></a>
<td>Compute change in value between ^date and ^date +
<i>parameter</i>
<td>ts changeLead: 3 days .
<tr>
<td><a href="mTS.htm#gMeanForDateRange:"><i>gMeanForDateRange:</i></a>
<td>Extract date range indicated by <i>parameter</i> from
<i>recipient</i> and compute 
geometric mean
<td>ts gMeanForDateRange: drange .
<tr>
<td><a href="mTS.htm#lsGrow"><i>lsGrow</i></a>
<td>Compute least squares growth of <i>recipient's</i> values
<td>ts lsGrow
<tr>
<td><a
href="mTS.htm#lsGrowForDateRange:"><i>lsGrowForDateRange:</i></a>
<td>Extract date range indicated by <i>parameter</i> from
<i>recipient</i> and compute 
least squares growth
<td>ts lsGrowForDateRange: drange .
<tr>
<td><a href="mTS.htm#maxForDateRange:"><i>maxForDateRange:</i></a>
<td>Extract date range indicated by <i>parameter</i> from
<i>recipient</i> and compute 
maximum
<td>ts maxForDateRange: drange .
<tr>
<td><a href="mTS.htm#medianForDateRange:"><i>medianForDateRange:</i></a>
<td>Extract date range indicated by <i>parameter</i> from
<i>recipient</i> and compute 
median
<td>ts medianForDateRange: drange .
<tr>
<td><a href="mTS.htm#minForDateRange:"><i>minForDateRange:</i></a>
<td>Extract date range indicated by <i>parameter</i> from
<i>recipient</i> and compute 
minimum
<td>ts minForDateRange: drange .
<tr>
<td><a href="mTS.htm#modeForDateRange:"><i>modeForDateRange:</i></a>
<td>Extract date range indicated by <i>parameter</i> from
<i>recipient</i> and compute 
mode
<td>ts modeForDateRange: drange .
<tr>
<td><a href="mTS.htm#pctChangeLag:"><i>pctChangeLag:</i></a>
<td>Compute percent change in value between ^date and ^date -
<i>parameter</i>
<td>ts pctChangeLag: 5 days .
<tr>
<td><a href="mTS.htm#pctChangeLead:"><i>pctChangeLead:</i></a>
<td>Compute percent change in value between ^date and ^date +
<i>parameter</i>
<td>ts pctChangeLead: 3 months . 
<tr>
<td><a href="mTS.htm#productForDateRange:"><i>productForDateRange:</i></a>
<td>Extract date range indicated by <i>parameter</i> from
<i>recipient</i> and compute 
product
<td>ts productForDateRange: drange .
<tr>
<td><a href="mTS.htm#stdDevForDateRange:"><i>stdDevForDateRange:</i></a>
<td>Extract date range indicated by <i>parameter</i> from
<i>recipient</i> and compute 
standard deviation
<td>stdDevForDateRange:
<tr>
<td><a href="mTS.htm#totalForDateRange:"><i>totalForDateRange:</i></a>
<td>Extract date range indicated by <i>parameter</i> from
<i>recipient</i> and compute 
total
<td>ts totalForDateRange: drange .

</tr></table></Center>

<p>
<hr>
<h3><a name="methods">TimeSeries and Methods</a></h3>
<p>
As you have seen, time varying properties are evaluated relative to
a default date represented by the <i>magic word ^date</i>.
Methods that directly or indirectly reference time varying
properties will also evaluate as of the current evaluation date.
For example,, suppose you define a time varying property representing
a currency's exchange rate and a method that doubles this value:<pre><tt><b>
     #--  Define a time varying property
     Currency define: 'exchangeRate' ;

     #--  Define a method to double the value
     Currency defineMethod: 
     [ | doubleIt | 
       exchangeRate * 2
     ] ;

     #--  Populate some values
     Named Currency USD :exchangeRate asOf: 93 put: 1.2 ;
     Named Currency USD :exchangeRate asOf: 94 put: 2.3 ;
     Named Currency USD :exchangeRate asOf: 95 put: 3.4 ;

     #-- Display data over range of dates
     Named Currency USD do: [
     93 to: 95 by: 1 yearEnds . 
     evaluate: 
        [ 
        ^date print: 15 ;       #-- print the evaluation date
        exchangeRate print ;    #-- print value of ts
        doubleIt printNL ;      #-- print value of calculation
        ] ;
     ] ;
</b></tt></pre>
You should see the result:<pre><tt><b>
     12/31/1993          1.20     2.40
     12/31/1994          2.30     4.60
     12/31/1995          3.40     6.80
</b></tt></pre>
Notice that both the time series property and the method that
references this property are both automatically evaluated as of 
each date in the range.
In this program, there is no obvious difference between
the <i>exchangeRate</i> message and the <i>doubleIt</i>
message even though one refers 
to a time series property and the other refers to a method.
When Vision evaluates a method as of a date, all data required by the method
is accessed as of that date. As a result, you usually do not need to know
whether the message being sent is a method or a property. 
<p>
Messages such as <i>asOf:</i> also work with methods. For 
example:<pre><tt><b>
     Named Currency USD :doubleIt asOf: 94 .
</b></tt></pre>
In this case, all data required by the <i>doubleIt</i> method is accessed
as of 12/94. Many messages work interchangeably with time series and methods
including: <i>asOf:, lag:, changeLag:, pctChangeLag, extractForDateRange:
</i>and<i> aveForDateRange:</i>. Certain operations are only meaningful
in conjunction with pure time series data. For example:<pre><tt><b>
     Named Currency USD :doubleIt displayAll

</b>displays:<b>

     *** Message Is Not A Time Series *** 
     Defined As: 
     ===> [|doubleIt| exchangeRate * 2 ] 
</b></tt></pre>
Since <i>doubleIt</i> is not really a time series and can be evaluated
as of any point in time, you cannot display all its values. Instead, the
<i>displayAll</i> message displays the definition of the method. 
<p>
A method is a program that can be evaluated as of any date. Actual data
is stored in a time series, whereas no data is actually stored in a method.
Therefore messages such as <a href="mTS.htm#asOf:put:"><i>asOf:put:</i></a> 
are only meaningful for time series. For example:<pre><tt><b>
     Named Currency USD :doubleIt
         asOf: 93 put: 1000 ;
</b></tt></pre>
generates the warning:<pre><tt><b>
     >>> Selector 'asOf:put:' Not Found <<< 
</b></tt></pre>
Similarly the messages 
<i><a href="mTS.htm#count">count</a>, 
<a href="mTS.htm#firstDate">firstDate</a>,
<a href="mTS.htm#lastDate">lastDate</a>, 
<a href="mTS.htm#effectiveDate">effectiveDate</a>,
</i>and<i> <a href="mTS.htm#nextDate">nextDate</a></i> are only meaningful
for actual <i>TimeSeries</i> objects. 
<p>
To determine if an object is a method or time series, print out its
value. If it is a method, Vision will display the method definition; otherwise
the message <i>aTimeSeries</i> will be displayed. For example:<pre><tt><b>
     "--->  exchangeRate" printNL ;
     Named Currency USD :exchangeRate printNL ;
     "--->  doubleIt" printNL ;
     Named Currency USD :doubleIt printNL ;
</b></tt></pre>
<p>
The message 
<i><a href="mBlock.htm#extractForDateRange:">extractForDateRange:</a></i>
can be used to convert a method into a time series with values for each
point in the date range. For example:<pre><tt><b>
     !dr <- 94 to: 95 by: 1 yearEnds ;
     Named Currency USD :doubleIt
        extractForDateRange: dr . displayAll ;
</b></tt></pre>
The message <a href="mDRange.htm#extract:for:"><i>extract:for:</i></a>
is used to evaluate a block for an object over a date range, returning
a <i>TimeSeries</i> object.  For example:<pre><tt><b>
     94 to: 95 by: 1 yearEnds .
        extract: [ usExchange ] for: Named Currency CAD
</b></tt></pre>
returns a time series of two year-end exchange rates for the
Canadian currency.

<p>
<hr>
<h3><a name="props">TimeSeries and Properties</a></h3>
<p>
<i>TimeSeries</i> objects are available in two distinct forms in Vision: 
<p>
<ol type="1">
<li>As properties created with the <i>define:</i> message. 
<li>As stand-alone objects.
</ol>
<p>
The expression:<pre><tt><b>
     Currency define: 'tsProperty' ;
</b></tt></pre>
creates a new time series property for the class Currency.  The
expression:<pre><tt><b>
     Named Currency USD :tsProperty 
</b></tt></pre>
retrieves this property for the US currency as a <i>TimeSeries</i>
object.  The expressions:<pre><tt><b>
     !newTS <- TimeSeries new ;
and
     !newTS <- Named Currency USD :tsPropety
          extractForDateRange: (88 to: 90 by 1 years) ;
</b></tt></pre>
both
create stand-alone <i>TimeSeries</i> objects.  The expression:<pre><tt><b>
     newTS
</b></tt></pre>
retrieves this object.  
These two forms of 
<i>TimeSeries</i> object respond identically to the same set of
messages.  They differ only in the manner in which they are accessed.
<p>
By default, a property is evaluated as of the current date.  To
access the time series itself, you
need to place the <b><font size=+1>:</font></b>
character in front of the property name.  In
this case the message <i>:tsProperty</i> returns the 
<i>TimeSeries</i> object which respond to all the time series
messages.  The
stand-alone <i>TimeSeries</i> objects
respond to time series messages by default.  In other words,
they do not require the initial <b><font size=+1>:</font></b>
character.  The <i>value</i> message is sent to a time series to
evaluate it as of the current date.  This message is automatically
sent when you access a property without the 
initial <b><font size=+1>:</font></b>.  It is required if you
want a stand-alone time series to return one of its values.
<p>
Some examples should help clarify these distinctions: <pre><tt><b>
     #-- define property and stand-alone time series
     Currency define: 'tsProperty' ;
     !newTS <- TimeSeries new ;

     #-- populate values
     Named Currency USD :tsProperty asOf: 88 put: 880 ; 
     Named Currency USD :tsProperty asOf: 89 put: 890 ; 
     Named Currency USD :tsProperty asOf: 90 put: 900 ; 
     newTS asOf: 9501 put: 1 ;
     newTS asOf: 9502 put: 2 ;

     #-- Print the most recent value
     Named Currency USD tsProperty print ;
     newTS value printNL ;                               #- need value

     #--- Print the 1989 value
     Named Currency USD :tsProperty asOf: 89 . print ;   #- need :
     89 evaluate: [ Named Currency USD tsProperty print ] ; 
     newTS asOf: 89 . print ;                            #- no : 
     89 evaluate: [ newTS value printNL ] ;              #- need value

     #-- Count the elements in the time series
     Named Currency USD :tsProperty count print ;        #- need : 
     newTS count printNL ;                               #- no :
</b></tt></pre>

<p>
<hr>
<h3><a name="hfts">High Frequency TimeSeries</a></h3>
<p>
Prior to release 6 of <i>Vision</i>, only values of the class <b>Date</b>
could be used to index a <b>TimeSeries</b> object.  This constraint
was relaxed in release 6 which has been provided to new users and 
available as an upgrade since January 1998.
<p>
A new abstract class, <b>Time</b>, containing the two subclasses
<b>LowResolutionTime</b> and <b>HighResolutionTime</b> have been
added to the database to support higher resolution time indexing.
Instances of <b>LowResolutionTime</b> can record timestamps to the 
micro-second (i.e., 1e-6, 0.000001 seconds)
and instances of <b>HighResolutionTime</b> can record timestamps to
the femto-second (i.e., 1e-15, 0.000000000000001 seconds).
<p>
Creating a high frequency time series requires that you supply an
extra parameter indicating the resolution you wish when you create
the property.  For example, to define a property for tracking real-time
prices at security, you could use the expression:<b><pre>
   Security define: 'rtPrice' withTimeIndex: LowResolutionTime ;

</pre></b>
You can continue to use the <i>asOf:put:</i> message to update high frequency
time series.  The first parameter can be supplied in the form:<pre>
      yyyymmdd.hhmmssss
</pre>
to include both the date and time components.  For example, to update
IBM's price as of 3:03 pm on April 14, 2000, use: <b><pre>
     Named Security IBM :rtPrice asOf: 20000414.1503 put: 102.25 ;
</pre></b>
You can continue to use the <i>asOf:</i> message to access a high
frequency time series.  For example:<pre><b>
     #-- get the most recent price
     Named Security IBM rtPrice printNL ;

     #--  get the price as of 4pm on 4/14/2000
     Named Security IBM :rtPrice asOf: 20000414.16 . printNL ;

    #--  get the end of date price on 4/14/2000
    Named Security IBM :rtPrice asOf: 20000414 . printNL ;
</b></pre>
You can continue to use the standard <b>Collection</b> messages such
as <i>do:</i> to access the entire time series:<pre><b>
     Named Security IBM :rtPrice
     do: [ ^date print ; printNL ;
         ] ;
</b></pre>
<p>
When a time series object is indexed by time, it responds to the
messages <i>hours</i>, <i>minutes</i>, and <i>seconds</i> as well
as the messages <i>year</i>, <i>month</i>, and <i>day</i>.  For
example: <pre><b>
     Named Security IBM :rtPrice
     do: [ ^date asDate print: 12 ; 
           ^date hours print ; ^date minutes print; ^date seconds print ;
           printNL ;
         ] ;
</b></pre>
<p>
The <i>asNumber</i> message can be sent to a <b>Time</b> object to 
convert it into a decimal number where the integer portion of the
number represents the date in <i>YYYYMMDD</i> format and the decimal
portion of the number represents the time component in <i>HHMMSSSS</i>
format.  The message <i>formatAsTimeStamp</i> can be sent to a <b>Time</b>
object to format the date and time components in a standard way.
<p>
The messages <i>countSecondsTo:</i>, <i>countMinutesTo:</i>, and
<i>countHoursTo:</i> can be used to compute the nubmer of seconds,
minutes, or hours between two time points.
<p>
<hr>
<h3><a name="other">Related Topics</a></h3>
<p>
For additional information see:
<p>
<ul type=square>
<li><a href="clCollect.htm">The Collection Classes</a>
<li><a href="clDate.htm#creation">Creating Dates and DateOffsets</a>
<li><a href="clDate.htm#ts">Dates and TimeSeries Data</a>
<li><a href="clDate.htm#internal">Date Arithmetic</a>
<li><a href="clDate.htm#dr">The DateRange Class</a>
<li><a href="clCollect.htm#iterate">When to Iterate</a>
<li><a href="Classes.htm#cluster">Clustering Issues</a>
<li><a href="tuList.htm">Vision Tutorial: Using TimeSeries</a>
<li><a href="tinats.htm#">Technical Paper: Time is not a Time Series</a>
<li><a href="sdmts.htm#">Technical Paper: Sets Do More Than Select</a>
</ul>
<p>
<p>
<hr>

<table border=0 width="100%">
<tr>
<td align=left><font size=-1>Copyright &copy 1997 Innovative Systems Techniques, Inc.</font>
<td align=right><font size=-1>Updated June 19, 1997</font>
</tr>
</table>

</body>
</html>

