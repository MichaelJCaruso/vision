<!DOCTYPE html>
<html>
<head>
<title>Vision Class: IndexedList</title>
</head>
<body bgcolor=white>
<h2>Vision Class: IndexedList </h2>

<p>
     | <a href="FHome.htm">Home</a> | <a href="mIList.htm">Messages</a> | <a href="clXRef.htm">Class XRef</a> | <a href="clCollect.htm">The Collection Classes</a> | <a href="tuCase5.htm">Using IndexedLists</a> |
<hr> 
<h3>Topics Covered:</h3> 
<ul type=square> 
<li><a href="#overview">Overview</a>
<li><a href="#basic">IndexedList Basics</a>
<li><a href="#collect">Collection Message Summary</a>
<li><a href="#messages">Additional IndexedList Messages</a>
<li><a href="#subclass">Creating IndexedList Subclasses</a>
<li><a href="#index">Accessing the Index</a>
<li><a href="#errors">Common Errors with IndexedLists</a>
<li><a href="#cluster">
IndexedList Clustering and Property Assignment</a>
<li><a href="#other">Related Topics</a>
</ul>
<p>
<hr>
<h3><a name="overview">Overview</a></h3> 
<p> 
The <b>IndexedList</b>
class is an indirect subclass of the <i>Collection</i> class
which is also a superclass of the classes
<a href="clList.htm"><i>List</i></a> and 
<a href="clTS.htm"><i>TimeSeries</i></a>.
Instances of the class <i>IndexedList</i> consist of a collection of objects
that are accessed either by a user-defined index or as a set.  An
<i>IndexedList</i> is updated by adding index-object pairs.
<p>
The <i>IndexedList</i> class has been optimized to organize and
query large sets of data.  A large number of the messages defined
for this class have been written in Vision and can therefore be
modified and expanded as needed.  As always, you can define any
number of new messages for the class.
<p>
The <i>IndexedList</i> class is a direct subclass of IndexedCollection:
<font size=+1><pre>
          <a href="clObject.htm">Object</a>
             |
             Function
                |
                EnumeratedFunction
                   |
                   Collection
                      |
                      IndexedCollection
                         |
                         |-- <b>IndexedList</b>
                         |
                         |-- <a href="clTS.htm">TimeSeries</a>

</pre></font>
<p>
<hr>
<h3><a name="basic">IndexedList Basics</a></h3>
<p>
An <i>IndexedList</i> is used when you need to reference specific
elements in a <i>Collection</i> by something other than position.
You add elements to an <i>IndexedList</i> by supplying an object
to be used as the index and an object to be used as the value.
The index can be any object except a <i>String</i>.
The value can be any object.  The index and value can be the same object.
<p>
You use the <i>new</i> message to create a new <i>IndexedList</i> 
object:<pre><tt><b>
     !ilist <- IndexedList new ;
     ilist count printNL ;
</b></tt></pre>
Initially an <i>IndexedList</i> contains 0 elements.  The
<i>at:put:</i> message is used to update
this list:<pre><tt><b>
     ilist at: -100 put: 0 ; 
     ilist at:  -50 put: 10 ; 
     ilist at:   10 put: 20 ; 
</b></tt></pre>
<p>
The variable <i>ilist</i> now refers to an <i>IndexedList</i>
containing 3 elements.  The 
<i>at:</i>  message is used to access a specific
element in this list.  The supplied parameter is the object
representing the index associated with the object you wish to access.
If there is no object associated with that index, the <i>NA</i> value 
is returned.  For example, the expression:  <pre><tt><b>
     ilist at: 10 .
</b></tt></pre>
returns the value <i>20</i> and the expression:<pre><tt><b>
     ilist at: 3 .
</b></tt></pre>
returns the value <i>NA</i>.  
<p>
The <i>delete:</i> message is used to delete
an index from the list.  For example, the expression:  <pre><tt><b>
     ilist delete: -50 .
</b></tt></pre>
deletes this element from the list, leaving a list of 2 elements.
You can display these elements using:<pre><tt><b>
     ilist do: [ printNL ] ;
</b></tt></pre>
<p>
The index value need not be numeric.  For example, you could
create an <i>IndexedList</i> to override some currency exchange
rates using:<pre><tt><b>
     #--  Create new IndexedList to hold overrides
     !currencyOverrides <- IndexedList new ; 

     #--  Define overrides for specific Currencies
     currencyOverrides at: Named Currency USD put: 3.1 ;
     currencyOverrides at: Named Currency CAD put: 5.2 ;

     #--  Display value for USD
     currencyOverrides at: Named Currency USD . printNL ;

     #--  Display override for currency if it exists, 
     #--     exchange rate otherwise
     Currency instanceList
     do: [ !rate <- ^global currencyOverrides at: ^self ;
           code print: 10 ;
           rate else: usExchange . print ;
           rate isntNA
              ifTrue: [ " (override) " print ] ;
           newLine print ;
         ] ;

</b></tt></pre>
Any object can be used
as an index.  The object used with the <i>at:</i> message to
access a value must be <b>identical</b> to the object used as
the index with the <i>at:put:</i> message.  
Instances of the <i>String</i> class and objects that contain
extensions are not usually good index values and are a
common source of programming error
<a href="#errors">(see below)</a>.
<p>
Since the <i>IndexedList</i> class is a subclass of <i>Collection</i>,
messages such as <i>do:</i>, 
<i>send:</i>, <i>select:</i>, <i>groupedBy:</i>, <i>sortUp:</i>,
<i>decileDown:</i>, and <i>extendBy:</i> are
available to <i>IndexedList</i> objects as well. 
<p>
The <i>toList</i> message can be used to convert an
<i>IndexedList</i> into a standard <i>List</i> object.
For example:<pre><tt><b>
     currencyOverrides at: 1 .
</b></tt></pre>
returns <i>NA</i> since <i>1</i> has not been defined as an index
in this <i>IndexedList</i>.  The expression:<pre><tt><b>
     currencyOverrides toList at: 1 .
</b></tt></pre>
returns the value <i>3.1</i> which is the first value positionally
after the <i>IndexedList</i> has been converted to a <i>List</i>.
<p>
<hr>
<h3><a name="collect">Collection Message Summary</a></h3>
<p>
Since the <i>IndexedList</i> class is a subclass of <i>Collection</i>,
all messages defined for the <i>Collection</i> class are
available to <i>IndexedList</i> objects as well.  A subset of these
messages are documented in 
<a href="clCollect.htm"><i>Vision Class: Collection</i></a>
and are summarized below.

<p>
<dl>
<dt><b><a href="clCollect.htm#basic">Collection Basics</a></b>
<dd><a href="mIList.htm#count"><i>count</i></a>
<dd><a href="mIList.htm#do:"><i>do:</i></a>
<dd><a href="mIList.htm#basicDo:"><i>basicDo:</i></a>
<dd><a href="mIList.htm#send:"><i>send:</i></a>
<dd><a href="mIList.htm#basicSend:"><i>basicSend:</i></a>
<dd><a href="mIList.htm#extendBy:"><i>extendBy:</i></a>
<dd><a href="mIList.htm#basicExtend:"><i>basicExtend:</i></a>
<dd><a href="mIList.htm#collect:"><i>collect:</i></a>
<dd><a href="mIList.htm#numberElements"><i>numberElements</i></a>
<dd><a href="mIList.htm#linkElements"><i>linkElements</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#select">Creating Subsets</a></b>
<dd><a href="mIList.htm#select:"><i>select:</i></a>
<dd><a href="mIList.htm#first:"><i>first:</i></a>
<dd><a href="mIList.htm#last:"><i>last:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#sorts">Sorting and Ranking Collections</a></b>
<dd><a href="mIList.htm#sortUpBy:then:"><i>sortUpBy:then:</i></a>
<dd><a href="mIList.htm#sortDownBy:then:"><i>sortDownBy:then:</i></a>
<dd><a href="mIList.htm#rankUp:"><i>rankUp:</i></a>
<dd><a href="mIList.htm#rankDown:"><i>rankDown:</i></a>
<dd><a href="mIList.htm#rankDown:usingCollector:">
<i>rankDown:usingCollector:</i></a>
<dd><a href="mIList.htm#rankUp:usingCollector:">
<i>rankUp:usingCollector:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#groups">Grouping Collections</a></b>
<dd><a href="mIList.htm#groupedBy:"><i>groupedBy:</i></a>
<dd><a href="mIList.htm#groupedByString:"><i>groupedByString:</i></a>
<dd><a href="mIList.htm#groupedBy:in:"><i>groupedBy:in:</i></a>
<dd><a href="mIList.htm#groupedBy:intersect:"><i>groupedBy:intersect:</i></a>
<dd><a href="mIList.htm#groupedBy:union:"><i>groupedBy:union:</i></a>
<dd><a href="mIList.htm#groupedBy:usingCutoffs:"><i>groupedBy:usingCutoffs:</i></a>
<dd><a href="mIList.htm#groupedByCriteria:"><i>groupedByCriteria:</i></a>
<dd><a href="mIList.htm#groupPrintUsing:"><i>groupPrintUsing:</i></a>
<dd><a href="mIList.htm#mgroupedBy:"><i>mgroupedBy:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#compute">Collection Computation Messages</a></b>
<dd><a href="mIList.htm#average"><i>average</i></a>
<dd><a href="mIList.htm#average:"><i>average:</i></a>
<dd><a href="mIList.htm#average:withWeights:"><i>average:withWeights:</i></a>
<dd><a href="mIList.htm#compound"><i>compound</i></a>
<dd><a href="mIList.htm#compound:"><i>compound:</i></a>
<dd><a href="mIList.htm#correlate:with:"><i>correlate:with:</i></a>
<dd><a href="mIList.htm#gMean"><i>gMean</i></a>
<dd><a href="mIList.htm#gMean:"><i>gMean:</i></a>
<dd><a href="mIList.htm#harmonicMean"><i>harmonicMean</i></a>
<dd><a href="mIList.htm#harmonicMean:"><i>harmonicMean:</i></a>
<dd><a href="mIList.htm#harmonicMean:withWeights:"><i>harmonicMean:withWeights:</i></a>
<dd><a href="mIList.htm#max"><i>max</i></a>
<dd><a href="mIList.htm#max:"><i>max:</i></a>
<dd><a href="mIList.htm#median"><i>median</i></a>
<dd><a href="mIList.htm#median:"><i>median:</i></a>
<dd><a href="mIList.htm#min"><i>min</i></a>
<dd><a href="mIList.htm#min:"><i>min:</i></a>
<dd><a href="mIList.htm#mode"><i>mode</i></a>
<dd><a href="mIList.htm#mode:"><i>mode:</i></a>
<dd><a href="mIList.htm#product"><i>product</i></a>
<dd><a href="mIList.htm#product:"><i>product:</i></a>
<dd><a href="mIList.htm#rankCorrelate:with:"><i>rankCorrelate:with:</i></a>
<dd><a href="mIList.htm#regress:"><i>regress:</i></a>
<dd><a href="mIList.htm#stdDev"><i>stdDev</i></a>
<dd><a href="mIList.htm#stdDev:"><i>stdDev:</i></a>
<dd><a href="mIList.htm#total"><i>total</i></a>
<dd><a href="mIList.htm#total:"><i>total:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#tiles">Intra-List Messages</a></b>
<dd><a href="mIList.htm#decileUp:"><i>decileUp:</i></a>
<dd><a href="mIList.htm#decileDown:"><i>decileDown:</i></a>
<dd><a href="mIList.htm#quintileUp:"><i>quintileUp:</i></a>
<dd><a href="mIList.htm#quintileDown:"><i>quintileDown:</i></a>
<dd><a href="mIList.htm#percentileUp:"><i>percentileUp:</i></a>
<dd><a href="mIList.htm#percentileDown:"><i>percentileDown:</i></a>
<dd><a href="mIList.htm#tileUp:tiles:"><i>tileUp:tiles:</i></a>
<dd><a href="mIList.htm#tileDown:tiles:"><i>tileDown:tiles:</i></a>
<dd><a href="mIList.htm#decileUp:using:"><i>decileUp:using:</i></a>
<dd><a href="mIList.htm#decileDown:using:"><i>decileDown:using:</i></a>
<dd><a href="mIList.htm#quintileUp:using:"><i>quintileUp:using:</i></a>
<dd><a href="mIList.htm#quintileDown:using:"><i>quintileDown:using:</i></a>
<dd><a href="mIList.htm#percentileUp:using:"><i>percentileUp:using:</i></a>
<dd><a href="mIList.htm#percentileDown:using:"><i>percentileDown:using:</i></a>
<dd><a href="mIList.htm#tileUp:using:tiles:"><i>tileUp:using:tiles:</i></a>
<dd><a href="mIList.htm#tileDown:using:tiles:"><i>tileDown:using:tiles:</i></a>
<dd><a href="mIList.htm#runningTotal:"><i>runningTotal:</i></a>
<dd><a href="mIList.htm#runningAverage:"><i>runningAverage:</i></a>
<dd><a href="mIList.htm#normalize:"><i>normalize:</i></a>
<dd><a href="mIList.htm#weightedDecile:"><i>weightedDecile:</i></a>
<dd><a href="mIList.htm#weightedQuintile:"><i>weightedQuintile:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#inter">Inter-List Messages</a></b>
<dd><a href="mIList.htm#isEquivalentTo:"<i>isEquivalentTo:</i></a>
<dd><a href="mIList.htm#union:"<i>union:</i></a>
<dd><a href="mIList.htm#union:using:"<i>union:using:</i></a>
<dd><a href="mIList.htm#intersect:"<i>intersect:</i></a>
<dd><a href="mIList.htm#intersect:using:"<i>intersect:using:</i></a>
<dd><a href="mIList.htm#exclude:"<i>exclude:</i></a>
<dd><a href="mIList.htm#exclude:using:"<i>exclude:using:</i></a>
<dd><a href="mIList.htm#difference:"<i>difference:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#creation">Creation and Update Messages</a></b>
<dd><a href="mIList.htm#copyListElements"><i>copyListElements</i></a>
<dd><a href="mIList.htm#append:"><i>append:</i></a>
<dd><a href="mIList.htm#collectListElementsFrom:">
<i>collectListElementsFrom:</i></a>
</dl>
<p>
<a name="inquiry"> </a>
<dl>
<dt><b>Inquiry Messages</b>
<dd><a href="mIList.htm#all:"><i>all:</i></a>
<dd><a href="mIList.htm#any:"><i>any:</i></a>
<dd><a href="mIList.htm#excludesElement:"><i>excludesElement:</i></a>
<dd><a href="mIList.htm#includesElement:"><i>includesElement:</i></a>
</dl>

<p>
<hr>
<h3><a name="messages">Additional IndexedList Messages</a></h3>
<p>
You can redefine <i>Collection</i> messages and define new messages
directly for the <i>IndexedList</i> class.  You can define any number of
new methods and constants.  
You cannot define and update properties directly
for <i>IndexedList</i> objects; however, you can
<a href="#subclass">create subclasses</a> of <i>IndexedList</i>
and define and update properties for their instances.
<p>
The following messages are used to <b>access and update</b> <i>IndexedList</i>
objects:
<p>
<Center><table width="90%" border="1" cellspacing="2" cellpadding="8">
<tr>
<td><b>Message</b>
<td><b>Definition</b>
<td><b>Sample</b>
</tr>

<tr>
<td><a href="mIList.htm#at:"><i>at:</i></a>
<td>Return value in <i>recipient</i> associated with the index
specified by <i>parameter</i>
<td>ilist at: Named Currency USD .
<tr>
<td><a href="mIList.htm#at:put:"><i>at:put:</i></a>
<td>Update <i>recipient</i> using <i>parameter1</i> as
index and <i>parameter2</i> as object associated with index
<td>ilist at: Named Currency USD put: 1.2 ;
<tr>
<td><a href="mIList.htm#delete:"><i>delete:</i></a>
<td>Delete value in <i>recipient</i> associated with the index 
specified by <i>parameter</i>
<td>ilist delete: Named Currency USD .
<tr>
<td><i>deleteColumn:</i>
<td>Deletes this index from all instances in the <i>recipient's</i>
cluster <a href="#cluster">(see below) </a>
<td>ilist deleteColumn: Named Currency USD .
<tr>
<td><a href="mIList.htm#toList"><i>toList</i></a>
<td>Converts <i>recipient</i> to standard <i>List</i> object
<td>ilist toList
<tr>
<td><i>valueCell:</i>
<td>Returns the structure containing the value associated with the
<i>parameter</i> in the <i>recipient</i>
<td>(used by <i>at:</i> message)
<tr>
<td><i>newValueCell:</i>
<td>Returns structure that can be updated using the <i>parameter</i>
as an index
<td>(used by <i>at:put:</i> message)
</tr></table></Center>

<p>
<hr>
<h3><a name="subclass">Creating IndexedList Subclasses</a></h3>
<p>
You can create subclasses of the <i>IndexedList</i> class using
the <a href="Fund.htm#class">standard procedures</a>.  Although
you cannot create new properties for the <i>IndexedList</i> class
directly, you can create new properties at any subclasses you
create.  
<p>
<blockquote><hr>
<center><a name="ilistSubclass.warn"><b>Warning!! </b> </a></center>
Because the <i>IndexedList</i> class is a built-in class that is
created primitively as part of the Vision database bootstrap,
its subclasses do not inherit a place to store fixed property
values defined at parent classes.  As a result, you cannot set values
for the properties defined at <i>Object</i> in objects that
are subclasses of <i>IndexedList</i>.  If you want to use
these properties, you must redefine them at your subclass.
<hr></blockquote>

<p>
<hr>
<h3><a name="index">Accessing the Index</a></h3>
<p>
Once you store an object into an <i>IndexedList</i>, there is no
built-in way to retrieve its index value or to obtain a list of
the indices currently in use.  In many cases, the object will
be the same as the index or will contain information that allows
you to determine the index.  If this is not the case and you need
to be access the index, you can provide it as an extension to the
object being stored.  For example:<pre><tt><b>
     !ilist <- IndexedList new ;
     ilist at: Named Currency USD
          put: (3.1 extendBy: [ !index <- ^global Named Currency US ]) ; 
     ilist at: Named Currency CAD
          put: (5.2 extendBy: [ !index <- ^global Named Currency CAD ]) ; 
</b></tt></pre>
To display the index and value for each element in <i>ilist</i>
use:<pre><tt><b>
     ilist do: [ index print ; printNL ] ;
</b></tt></pre>
You could write a method to perform this function:<pre><tt><b>
     #--  Define Method
     IndexedList defineMethod:
     [ | at: index putAndIndex: object | 
       !xobject <- object extendBy: [ !index <- ^my index ] ;
       ^self at: index put: xobject ;
       ^self
     ] ;

     #--  And Run it
     ilist at: Named Currency DEM putAndIndex: 7.3 ;
     ilist do: [ index print ; printNL ] ;
</b></tt></pre>
<p>
<hr>
<h3><a name="errors">Common Errors with IndexedList</a></h3>
<p>
The object used as the index in the <i>at:</i> message must be
identical to the object used to update the <i>IndexedList</i> in the
first place.  If the object used as the index in the
<i>asOf:put:</i> message is an extension, you must use the
identical object with the <i>asOf:</i> message.  It is rarely
useful to use an extended object as the index.
It is therefore good practice to use the 
<a href="clObject.htm#extensions"><i>asSelf</i></a>
message to strip any extensions from the object used as
the index in the <i>at:put:</i> and <i>at:</i> messages.
<p>
Since two strings with the same content are not necessarily
the same object, it is not safe to use <i>String</i> objects as an
index.  If you want to use a <i>String</i> object as an index,
you need to ensure that the <i>Strings</i> used
are preserved and available to
applications needing to access objects from the <i>IndexedList</i>.
<a href="clString.htm#identity">Techniques are available</a>
to do this.  In general, if you want to use strings as your index,
you may want to consider using a 
<a href="clDict.htm"><i>Dictionary</i> object</a> instead.

<p>
<hr>
<h3><a name="cluster">IndexedList Clustering and Property Assignment</a></h3>
<p>
Unlike most user-defined classes, 
you do not usually need to look at all the instances of the
built-in classes as a single list.  
The expression:<pre><tt><b>
     IndexedList instanceList count printNL ;
</b></tt></pre>
displays the value <i>1</i>.  This does not mean that there is only
one <i>IndexedList</i> object in the database.  The <i>instanceList</i>
message actually returns the <i>List</i> of instances in the same
physical structure or
"cluster" as the recipient.  By default, new instances of
the <i>IndexedList</i> class are physically stored in separate, independent
structures.  
<p>
To create new instances in the same physical structure as the recipient,
you need to use the <i>clusterNew</i> message instead of the <i>new</i>
message to create the new <i>IndexedList</i> object.  These messages are
identical for most classes, since the default behavior is to cluster
new instances.  For example:<pre><tt><b>
     #-- create a new indexed list in its own cluster
     !newList <- IndexedList new ; 

     #-- a cluster contains the single list by default
     newList instanceList count printNL ;

     #-- create new lists in the same cluster
     !newList1 <- newList clusterNew ;
     !newList2 <- newList clusterNew ;
     !newList3 <- newList clusterNew ;

     #-- instanceList includes all lists in cluster
     newList instanceList count printNL ;

     #--  update the different lists in cluster
     newList1 at: 1 put: 10 ;
     newList1 at: 2 put: 20 ;
     newList2 at: Named Currency USD put: Named Currency USD ;

    #--   display counts for each list in cluster
    newList instanceList numberElements
    do: [ position print ;      #- position in cluster
          whatAmI print ;       #- each element is an indexed list
          count printNL ;       #- elements in indexed list
        ] ;

</b></tt></pre>
More information about 
<a href="Classes.htm#cluster">general clustering rules</a>
is available.
<p>
When you are creating <i>IndexedLists</i>
"on-the-fly", you do not need to worry
about clustering issues.  Clustering 
is important when you are updating properties with 
<i>IndexedList</i> values.
<p>
A property can be updated to contain an <i>IndexedList</i> using the
<a href="Fund.htm#update">standard assignment</a>
messages.  For example:<pre><tt><b>
     #-- Define a new class and some properties
     Object createSubclass: "NewClass" ;
     NewClass defineFixedProperty: "p1" ;

     #--  Update the properties with list values
     NewClass :p1 <- IndexedList new ;
     NewClass p1 at: 1 put: 10 ;
     NewClass p1 at: 2 put: 20 ;
</b></tt></pre>
For efficiency reasons, it is preferable to store an <i>IndexedList</i>
from the same
cluster when you update the same property for different instances.
By convention, a "prototype indexed list" is defined for the class.  Properties
are assigned to new instances in this prototype's cluster.  For
example:<pre><tt><b>
     #--  Define a prototype indexed list for p1 property
     NewClass define: 'p1PrototypeList' toBe: IndexedList new ;

     #-- Create new instance and update its value
     NewClass createInstance
     do: [ :p1 <- p1PrototypeList clusterNew ;
           p1 at: 1 put: 10 ;
           p1 at: 2 put: 20 ;
         ] ;

</b></tt></pre>
This initialization is normally added to the 
<a href="Classes.htm#instance"><i>initializeLocalAttributes</i> method</a>
for the class, since
this is automatically run when you create a new instance.
For example:<pre><tt><b>
     NewClass defineMethod:
     [ | initializeLocalAttributes | 
       ^super initializeLocalAttributes ;
       :p1 <- p1PrototypeList clusterNew ;
       ^self
    ] ;
</b></tt></pre>

<p>
<hr>
<h3><a name="other">Related Topics</a></h3>
<p>
For additional information see:
<p>
<ul type=square>
<li><a href="clCollect.htm">The Collection Classes</a>
<li><a href="clString.htm#identity">Why Strings are Bad Indices</a>
<li><a href="clDict.htm">Using Dictionaries to Index with Strings</a>
<li><a href="clCollect.htm#iterate">When to Iterate</a>
<li><a href="Classes.htm#cluster">Clustering Issues</a>
<li><a href="tuCase5.htm">Case Study: Advanced Classification Techniques</a>
<li><a href="sdmts.htm#">Technical Paper: Sets Do More Than Select</a>
</ul>
<p>
<p>
<hr>

<table border=0 width="100%">
<tr>
<td align=left><font size=-1>Copyright &copy 1997 Innovative Systems Techniques, Inc.</font>
<td align=right><font size=-1>Updated June 19, 1997</font>
</table>

</body>
</html>


