<!DOCTYPE html>
<html>
<head>
<title>Vision Programs </title>
</head>
<body bgcolor = white>

<h2>Vision Programs</h2>
<p>
| <a href="FHome.htm">Home</a> 
| <a href="Lang.htm">Language</a> 
| <a href="Syntax.htm">Syntax</a> 
| <a href="clBlock.htm">Blocks</a> 
| <a href="Execution.htm">Program Execution</a> 
| <a href="Error.htm">Errors</a> |

<hr>
<h3>Topics Covered:</h3>
<ul type="square">
<li><a href="#overview">Overview</a>
<li><a href="#block">Blocks</a>
<li><a href="#control">Control Structures</a>
<li><a href="#format">Formatting Conventions</a>
<li><a href="#named">Blocks and Parameters</a>
<li><a href="#methods">Writing Methods</a>
</ul>
<hr>
<h3><a name="overview">Overview</a></h3>
<p>
Whether you realize it or not, you have already written your first
Vision program.  
A <a name="program"><b>Program</b></a>
is merely a set of one or more Vision
expressions that are viewed together as a unit.  Most of the programs
you have seen so far have asked Vision to perform a single request.
There are situations where you would like to perform a set of
operations, one after another.  Vision provides a simple mechanism
for accomplishing this.  
<p>
<a name="statement"> </a>
The '<i>;</i>' character is used to separate expressions within a Vision
program.  Each expression in a program is known as 
a <b>Statement</b>.  Each
statement is executed in sequence.  Programs always return the value
of the last statement executed.  This value is automatically printed
by Vision.  For example, the following program can be used to
calculate a value and print out a descriptive message as well as the
result:  <pre><tt><b>
     !sum <- 2 + 2 ; 
     "The Answer Is: " print ; 
     sum printNL ;
</b></tt></pre>
This program contains 3 statements separated by the <i>;</i>
character.  The first statement computes the sum of <i>2 + 2</i> and
saves the result in the variable <i>sum</i>.  The second statement
prints the string containing the label "The Answer is: ".  The final
statement prints the sum followed by a carriage return.
<p>
Some expressions that can be written as a single expression, can be
subdivided into more manageable pieces by creating multiple
expressions.  For example:  <pre><tt><b>
     !count <- mylist union: yourlist . exclude: autolist . 
         select: [ score > 20] . count ; 
</b></tt></pre>
could be rewritten as:<pre><tt><b>
     !ourlist <- mylist union: yourlist ; 
     !universe <- ourlist exclude: autolist ; 
     !optimalList <- universe select: [score > 20 ] ; 
     !count <- optimalList count ; 
</b></tt></pre>
<p>
<hr>
<h3><a name="block">Blocks</a></h3>
<p>
A <b>Block</b> is a program that represents a deferred sequence of
actions.  Syntactically, a block is a program surrounded by square
brackets.  The general form for a block is illustrated below:<pre><tt>
     [ statement 1 ; 
       statement 2 ; 
         . . .  
     ]  
</tt></pre>
The block will be executed when it receives the unary message <i>value</i>.
For example, the following two programs have the same effect:  <pre><tt><b>
    !index <- 17 ; 
    :index <- index + 1 ; 
    index print ; 
</b>and<b>
    !index <- 17 ; 
    [:index <- index + 1 ] value ; 
    index print ; 
</b></tt></pre>
Blocks always return the value of the last statement executed.
<p>
Suppose every month you create a new screening universe which
consists of the union of two lists that have been created by two
other individuals at your firm.  You call this list <i>currentList</i>.  You
also produce a second list that represents the companies added to
<i>currentList</i>.  To accomplish this, you start out with two empty
lists that will be used to hold a current list and a list of changes.
You also create a block which will be used to update these 
lists:<a name="runBlock.samp" > </a><pre><tt><b>
     !currentList <- List new ;
     !changeList <- List new ;
     !myProgram <- [ !oldList <- currentList; 
                     :currentList <- joesList union: marysList; 
                     :changeList <- currentList exclude: oldList; 
                   ] ;
</b></tt></pre>
Each month, after Joe and Mary have updated their lists, you can
execute this program by typing the expression:  <pre><tt><b>
     myProgram value 
</b></tt></pre>
You can now access the updated values of the variables
<i>currentList</i> and <i>changeList</i>.  
<p>
You have actually already seen another use for blocks.  In the
expression:<pre><tt><b> 
     universe select: [ score > 20 ] 
</b></tt></pre>
the argument to the <i>select:</i> message is actually a block.  When
<i>universe</i> receives the message <i>select:</i>, 
it evaluates the block once for each of the elements contained in the list.  
<p>
Messages such as <i>select:</i> take advantage of the block's deferred
execution.  Essentially, the block is used to store the program to be
executed without actually running it.  The <i>select:</i> and other
messages are defined to evaluate the block when necessary.
<p>
More
<a href="clBlock.htm">detailed information about blocks</a> is available.
<p>
<hr>
<h3><a name="control">Control Structures</a></h3>
<p>
<b>Control Structures</b> are used in all programming languages to control
the order of expression evaluation.  By default, all statements in a
Vision program are evaluated sequentially.  Blocks can be used to
create new control structures that alter the flow of a program.
These control structures are invoked either by sending a message to a
block or by sending a message with one or more blocks as arguments.  
<p>
<a href="clBoolean.htm#control"><i>TRUE</i> and <i>FALSE</i> </a>
objects respond to several messages that support conditional execution:
<p>
<ul type="disc">
<li><i>ifTrue: trueBlock ifFalse: falseBlock</i>
<li><i>ifTrue: trueBlock ifFalse: falseBlock else: elseBlock</i>
<li><i>ifTrue: trueBlock</i>
<li><i>ifTrue: trueBlock else: elseBlock</i>
<li><i>ifFalse: falseBlock</i>
<li><i>ifFalse: falseBlock else: elseBlock</i>
</ul>
<p>
For example:<pre><tt><b>
     myList count > 100 
         ifTrue: [ "This is a big list."  ] 
        ifFalse: [ "This is a small list." ] 
</b></tt></pre>
If the number of elements in the list <i>myList</i> is greater than 100 the
text "This is a big list" will be displayed; otherwise, the text
"This is a small list" will be displayed.  
<p>
The value returned by these messages is the value of
the block that was executed.  In the example:<pre><tt><b>
     !result <- myList count > 100 
                  ifTrue: [ 100 ] 
                 ifFalse: [ -100 ] 
                    else: [ 0 ] 
</b></tt></pre>
the variable <i>result</i> will be assigned to the value 
<i>100</i>, <i>-100</i>, or <i>0</i>
depending on the number of elements in <i>myList</i>.  
<p>
The <i>ifTrue:</i> or <i>ifFalse:</i> message can be used if there
is only one conditional consequence of interest.  For example:<pre><tt><b>
     count <= cutoff 
       ifTrue: [ :total <- total + 100 ] 
</b></tt></pre>
This expression is identical to:<pre><tt><b>
     count <= cutoff 
       ifTrue: [ :total <- total + 100 ] 
      ifFalse: [ NA ] 
</b></tt></pre>
Since the arguments in these messages are blocks, they can contain
complex expressions as well, including nested control structures as
shown below:<pre><tt><b>
     myList count > 100 
        ifTrue: [ myList count > 1000 
                     ifTrue: [ "This is a very big list." ] 
                    ifFalse: [ "This is a big list." ] 
                ] 
       ifFalse: [ "This is a small list." ] 
</b></tt></pre>
This program will return one of the 3 strings, depending on the
number of elements in the list <i>myList</i>.  Since there is no
terminating <i>;</i> at the end of this program, the returned string
will print.
<p>
It is often useful to repeat an operation until a particular event is
reached.  This conditional repetition of an activity is provided by
sending the <i>whileTrue:</i> message to a block with a second block
as its argument.  For example, this message could be used to print
out the squares of the first ten numbers as shown below:  <pre><tt><b>
     !maxCount <- 10 ; 
     !count <- 1 ; 
     [ count <= maxCount ] 
        whileTrue: [ count print ; 
                     (count * count ) printNL ; 
                     :count <- count + 1 ; 
                   ] ; 
</b></tt></pre>
The <i>whileTrue:</i> message is defined to evaluate the recipient
block.  If it returns the value <i>TRUE</i>, the block supplied as
a parameter is evaluated and the <i>whileTrue:</i> message is invoked
again.  Otherwise, the message terminates.  
<p>
<blockquote><hr>
<center><a name="loop.warn"><b>Warning!! </b> </a></center>
The condition
in the recipient block is a test on the value of the <i>count</i>
variable which is updated in the block supplied as a parameter.
The form for updating this variable is <i>:count</i> not
<i>!count</i>.  If you used <i>!count</i> to update the variable,
you would actually be defining a new variable local to the block
in which it is defined.  As a result, the variable representing the
counter would never get updated and your <i>whileTrue</i>: would
never terminate.
<hr></blockquote>
<p>
You can write new Vision methods that create additional control
structures.  The <i>whileTrue:</i>  message could be written as
illustrated below:<a name="controlMethod.samp"> </a><pre><tt><b>
     Block defineMethod:
     [ | whileTrue: aBlock|
       !test <- ^self value ;       #- evaluate the recipient
       test ifTrue:                 #- if it evaluates to TRUE
         [ 
         aBlock value;              #- evaluate the parameter
         ^self whileTrue: aBlock    #- invoke whileTrue again
         ]
                                    #- otherwise do nothing
     ] ;
</b></tt></pre>
<p>
More
<a href="clBlock.htm#control">detailed information about 
control structure messages</a> is available.
<p>
<p>
<hr>
<h3><a name="format">Formatting Conventions</a></h3>
<p>
Formatting conventions are not that important when you are creating
expressions that you are executing immediately; however, when you
define programs that you plan to reuse, you should concentrate on
developing a clear, consistent style so that you can read and modify
them at a later date.  
<p>
Programs can be created using spaces, tabs, and carriage returns
wherever needed to enhance readability.  For example, multiple
keyword messages are often written with each keyword-argument pair on
different lines, as shown below:<pre><tt><b>
     value within: 10 
        percentOf: oldvalue 
</b>or<b>
     condition
        ifTrue: [ ] 
        ifFalse: [ ] 
        else: [ ] 
</b></tt></pre>
Upper and lower case letters are distinct characters in Vision.  A
convention evident in the examples above is that names formed by
concatenating several English words capitalize each word following
the first one.  By convention, names that identify classes usually
begin with an upper case letter.  These conventions are not enforced
by Vision.  
<p>
<a name="comment">The <i>#</i> character </a>
is used to begin a comment.  All characters
appearing on a line that follow this character are ignored.  For
example:  <pre><tt><b>
     ####################
     #   Sample Program Using Comments
     ####################
     
      !x <- 10 ; 	# create variable x to hold first value
      !y <- 5 ;  	# create variable y to hold second value
      x + y             # print result
</b></tt></pre>
<p>
<hr>
<h3><a name="named">Blocks and Parameters</a></h3>
<p>
Blocks can be named by providing a valid selector enclosed within
vertical bars (i.e., the '<i>|</i>' character) as shown below:  <pre><tt>
     [ | sample | 
       statement1 ; 
       statement2 ; 
       . . . 
     ] ; 

     [ | sampleP1: a  P2: b | 
       statement1 ; 
       statement2 ; 
       "Parameter 1: " print ; a print ; 
       "Parameter 2: " print ; b print ;
       . . . 
     ] ; 
</tt></pre>
The first example names the block <i>sample</i>.  This is equivalent
to defining a block with no parameters.  This is the format used to 
<a href="#method">define methods</a> that do not require parameters.
<p>
The second example defines a block which requires 2 parameters to
execute.  You use the <i>valueWith:</i> message to evaluate a block
with one parameter, the <i>valueWith:and:</i> to evaluate a block
with two parameters, and so on.  For example:<pre><tt><b>
     !block <-
           [ | sampleP1: a  P2: b | 
             "Parameter 1: " print ; a printNL ; 
             "Parameter 2: " print ; b printNL ;
           ] ; 
     block valueWith: 10 and: 5

</b>produces:<b>

     Parameter 1:       10
     Parameter 2:        5
</b></tt></pre>
The names <i>a</i> and <i>b</i> are <b>Local Variables</b>
that are only available inside the block.  They take on the values
supplied when you run the method.
You can use the variables within the block just like any other
messages.
<p>
If a block is defined to require parameters and you do not supply
the correct number, you will get an error message.  For example,
if you supplied the above block with a single value:<pre><tt><b>
     block valueWith: 10
</b></tt></pre>
You would see the error message:<pre><tt><b>
     >>> Parameter 'a' Unavailable <<<
</b></tt></pre>
Note that stand-alone blocks such as the one defined here do not utilize the
full block name, in this case <i>sampleP1:P2:</i>.  This name is
important when the block is used to <a href="#method">define
methods.</a>.  If you are using the block as a stand-alone, you can
use the following short-hand to define the block:<pre><tt><b>
     !block <- 
           [ | :a :b | 
             "Parameter 1: " print ; a printNL ; 
             "Parameter 2: " print ; b printNL ;
           ] ;
</b></tt></pre>
This block works exactly the same way as the previously named block
in that it defines two parameters named <i>a</i> and <i>b</i>.
Execution is identical to before:<pre><tt><b>
     block valueWith: 10 and: 5
</b></tt></pre>
and produces the same results.
<p>
<hr>
<h3><a name="method">Writing Methods</a></h3>
<p>
The method <i>defineMethod:</i> requires a named block as its parameter.
To define a method that requires no parameters, use the form:<pre><tt>
     object
     defineMethod:
     [ | messageName |
       statement1 ;
       statement2 ;
     ] ;
</tt></pre>
For example, to define a method that prints the count of the number
of elements in a list use:<pre><tt><b>
     List
     defineMethod:
     #-- name the method <i>printCount</i> with 0 parameters
     [ | printCount |
       count print ;
     ] ;
</b></tt></pre>
This defines the method <i>printCount</i> as a message for the
class <i>List</i> that requires 0 parameters.  To run it use:<pre><tt><b>
     !myList <- 1, 2, 3 ;
     myList printCount ;          #- prints 3
</b></tt></pre>
To define a method that adds a supplied value to the list count and
prints the result, use:<pre><tt><b>
     List
     defineMethod:
     #-- name the method <i>printCountPlus:</i> with 1 parameters
     [ | printCountPlus: n |
       (count + n) print ;
     ] ;
</b></tt></pre>
This defines the method <i>printCount:</i> as a message for the
class <i>List</i> that requires 1 parameter.  To run it use:<pre><tt><b>
     !myList <- 1, 2, 3 ;
     myList printCountPlus: 5 ;     #- prints 8
</b></tt></pre>
To define a method that adds a supplied value to the list count,
multiplies the result by a second supplied value, and
prints the result, use:<pre><tt><b>
     List
     defineMethod:
     #-- name the method <i>printCountPlus:times:</i> with 2 parameters
     [ | printCountPlus: p1 times: p2 |
       ( (count + p1) * p2 ) print ;
     ] ;
</b></tt></pre>
This defines the method <i>printCount:times:</i> as a message for the
class <i>List</i> that requires 2 parameters.  To run it use:<pre><tt><b>
     !myList <- 1, 2, 3 ;
     myList printCountPlus: 5 times: 2 ;        #- prints 16
</b></tt></pre>
More detailed information about messages
<a href="Fund.htm#method">in general</a> and about 
<a href="Execution.htm#methods">method execution</a> is available.
<p>
<hr>

<table border=0 width="100%">
<tr>
<td align=left><font size=-1>Copyright &copy 1997 Innovative Systems Techniques, Inc.</font>
<td align=right><font size=-1>Updated June 19, 1997</font>

</table>

</body>
</html>
