<!DOCTYPE html>
<html>
<head>
<title>Vision Class: List</title>
</head>
<body bgcolor = white>

<h2>Vision Class: List</h2>
<p>
     | <a href="FHome.htm">Home</a> | <a href="mList.htm">Messages</a> | <a href="clXRef.htm">Class XRef</a> | <a href="clCollect.htm">The Collection Classes</a> | <a href="tuList.htm">List Tutorial</a> |
<hr> 
<h3>Topics Covered:</h3> 
<ul type=square> 
<li><a href="#overview">Overview</a><br>
<li><a href="#basic">List Basics</a><br>
<li><a href="#collect">Collection Message Summary</a><br>
<li><a href="#messages">Additional List Messages</a><br>
<li><a href="#complex">Complex List Structures</a><br>
<li><a href="#cluster">
List Clustering and Property Assignment</a><br>
<li><a href="#other">Related Topics</a><br>
</ul>

<p>
<hr>
<h3><a name="overview">Overview</a></h3> 
<p> 
The <b>List</b> class is an indirect subclass of the <i>Collection</i> class
which is also a superclass of the 
<a href="clIList.htm"><i>IndexedList</i></a> and
<a href="clTS.htm"><i>TimeSeries</i></a> classes.
Instances of the class <i>List</i> consist of a collection of objects
that are accessed either by position or as a set.  A <i>List</i>
is updated by appending objects to its end.
<p>
The <i>List</i> class has been optimized to organize and
query large sets of data.  A large number of the messages defined
for this class have been written in Vision and can therefore be
modified and expanded as needed.  As always, you can define any
number of new messages for the class.
<p>
The <i>List</i> class is a direct subclass of <i>SequencedCollection</i>:
<font size=+1><pre>
          <a href="clObject.htm">Object</a>
             |
             Function
                |
                EnumeratedFunction
                   |
                   Collection
                      |
                      SequencedCollection
                         |
                         |-- <b>List</b>

</pre></font>
<p>
<hr>
<h3><a name="basic">List Basics</a></h3>
<p>
To create a <i>List</i>, you use the <font size=+2><b><i>,</i></b></font>
message to append one or more elements together.  For example:<pre><tt><b>
     !sampleList <- 10, -3, 20, 132 ;
</b></tt></pre>
creates a list of four integers and saves the list as the variable named
<i>sampleList</i>.  Any type of object can be included in a list and
the list can contain objects from multiple classes.  For example:<pre><tt><b>
     !mixedList <- 1, "xyz", TRUE, NA, -3.45 ;
</b></tt></pre>
creates a list of five objects representing five distinct classes.
<i>List</i> objects respond to the message 
<a href="mList.htm#count"><i>count</i></a>.  To count the
number of elements in the list <i>mixedList</i>, use the 
expression:<pre><tt><b>
     mixedList count
</b></tt></pre>
To create an empty list (i.e., a list with 0 elements), use the
expression:<pre><tt><b>
     !newList <- List new ;
     newList count printNL ;
</b></tt></pre>
The variable <i>newList</i> returns a list of 0 elements.  You can
then append elements to this list in the normal way.  For example:<pre><tt><b>
     newList, 1, 2, 3 ;
     newList count printNL ;
</b></tt></pre>
The variable <i>newList</i> is now a list of 3 elements.  
You can display these elements using:<pre><tt><b>
     newList do: [ printNL ] ;
</b></tt></pre>
<p>
<blockquote><hr>
<center><a name="listAppend.note"><b>Note: </b> </a></center>
Notice that you do not have to reassign the results back into the variable
<i>newList</i>.  The <font size=+1><i>','</i></font> message
changes the recipient <i>List</i> object directly.  
The expression:<pre><tt><b>     newList, 10 ;
</b></tt></pre>
appends the number <i>10</i> as the fourth element of <i>newList</i>.
<hr></blockquote>
<p>
The <i>asList</i> message can be used to produce a 1 element list
from a single object.  For example:<pre><tt><b>
     !myList <- 10 asList ;
     myList count printNL ;
</b></tt></pre>
produces a list object that contains 1 element, the integer
<i>10</i>.  You can append additional objects to <i>myList</i> in
the normal way.
<p>
Individual objects in a list can be accessed directly using the
<a href="mList.htm#at:"<i>at:</i></a>
message.  For example:<pre><tt><b>
     1, 10, 3, 9 at: 2 . print ;
</b></tt></pre>
returns the second element of this list.  In this case, the integer
<i>10</i> is returned and printed.  
The <a href="mList.htm#at0:"<i>at0:</i></a>
message works in the same manner, counting the first element as 0.
For example:<pre><tt><b>
     1, 10, 3, 9 at0: 2 . print ;
</b></tt></pre>
returns and prints the value <i>3</i>.
<p>
The message
<a href="mNumber.htm#sequence"><i>sequence</i></a> 
can be sent to an <i>Integer</i> to generate a list
of consecutive integers starting from 1 and ending with
the value of the recipient integer.  For example:<pre><tt><b>
     !list5 <- 5 sequence ;
</b></tt></pre>
creates a list containing the integers 1 through 5.  This list is
identical to:<pre><tt><b>
     !list5alt <- 1, 2, 3, 4, 5 ;
</b></tt></pre>
The message
<a href="mNumber.htm#sequence0"><i>sequence0</i></a> 
can be used to generate a list of consecutive integers starting with
0.  For example:<pre><tt><b>
     3 sequence0

</b>and<b>

     0, 1, 2
</b></tt></pre>
produce lists with the same elements in the same order.
<p>
The <i>instanceList</i> message can be sent to an object and
returns a <i>List</i> containing all the instances in the recipient's
class.  <i>Collection</i> messages such as <i>do:</i>,
<i>send:</i>, and <i>extendBy:</i> apply to <i>List</i> objects.
For example:<pre><tt><b>
     Currency instanceList
     do: [ displayInfo ] ;
</b></tt></pre>
generates a list of all currency instances and displays basic 
information for each element.  
<p>
The <a href="mObject.htm#send:"><i>send:</i></a> message provides
a useful technique for creating a list of 
<a href="clEntity.htm#access">named entities</a>.
To create a list of the currency objects named <i>USD</i>,
<i>CAD</i>, and <i>DEM</i>, use:<pre><tt><b>
   !currencyList <- Named Currency 
       send: [ USD, CAD, DEM ] ;
   currencyList do: [ displayInfo ] ;
</b></tt></pre>
The <i>send:</i> message
returns the result of evaluating the <i>Block</i> supplied as its
parameter.  In this case, the result of sending the block to the
<i>Named Currency</i> dictionary object
is a <i>List</i> of <i>Currency</i> objects.
This is equivalent to:<pre><tt><b>
     !currencyList <- 
         Named Currency USD,
         Named Currency CAD,
         Named Currency DEM ;
</b></tt></pre>

<p>
<hr>
<h3><a name="collect">Collection Message Summary</a></h3>
<p>
Since the <i>List</i> class is a subclass of <i>Collection</i>,
all messages defined for the <i>Collection</i> class are
available to <i>List</i> objects as well.  A subset of these
messages are documented in 
<a href="clCollect.htm"><i>Vision Class: Collection</i></a>
and are summarized below.

<p>
<dl>
<dt><b><a href="clCollect.htm#basic">Collection Basics</a></b>
<dd><a href="mList.htm#count"><i>count</i></a>
<dd><a href="mList.htm#do:"><i>do:</i></a>
<dd><i>basicDo:</i></a>
<dd><a href="mList.htm#send:"><i>send:</i></a>
<dd><i>basicSend:</i></a>
<dd><a href="mList.htm#extendBy:"><i>extendBy:</i></a>
<dd><i>basicExtend:</i></a>
<dd><a href="mList.htm#collect:"><i>collect:</i></a>
<dd><a href="mList.htm#numberElements"><i>numberElements</i></a>
<dd><a href="mList.htm#linkElements"><i>linkElements</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#select">Creating Subsets</a></b>
<dd><a href="mList.htm#select:"><i>select:</i></a>
<dd><a href="mList.htm#first:"><i>first:</i></a>
<dd><a href="mList.htm#last:"><i>last:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#sorts">Sorting and Ranking Collections</a></b>
<dd><a href="mList.htm#sortUpBy:then:"><i>sortUpBy:then:</i></a>
<dd><a href="mList.htm#sortDownBy:then:"><i>sortDownBy:then:</i></a>
<dd><a href="mList.htm#rankUp:"><i>rankUp:</i></a>
<dd><a href="mList.htm#rankDown:"><i>rankDown:</i></a>
<dd><a href="mList.htm#rankDown:usingCollector:">
<i>rankDown:usingCollector:</i></a>
<dd><a href="mList.htm#rankUp:usingCollector:">
<i>rankUp:usingCollector:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#groups">Grouping Collections</a></b>
<dd><a href="mList.htm#groupedBy:"><i>groupedBy:</i></a>
<dd><a href="mList.htm#groupedByString:"><i>groupedByString:</i></a>
<dd><a href="mList.htm#groupedBy:in:"><i>groupedBy:in:</i></a>
<dd><a href="mList.htm#groupedBy:intersect:"><i>groupedBy:intersect:</i></a>
<dd><a href="mList.htm#groupedBy:union:"><i>groupedBy:union:</i></a>
<dd><a href="mList.htm#groupedBy:usingCutoffs:"><i>groupedBy:usingCutoffs:</i></a>
<dd><a href="mList.htm#groupedByCriteria:"><i>groupedByCriteria:</i></a>
<dd><a href="mList.htm#groupPrintUsing:"><i>groupPrintUsing:</i></a>
<dd><a href="mList.htm#mgroupedBy:"><i>mgroupedBy:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#compute">Collection Computation Messages</a></b>
<dd><a href="mList.htm#average"><i>average</i></a>
<dd><a href="mList.htm#average:"><i>average:</i></a>
<dd><a href="mList.htm#average:withWeights:"><i>average:withWeights:</i></a>
<dd><a href="mList.htm#compound"><i>compound</i></a>
<dd><a href="mList.htm#compound:"><i>compound:</i></a>
<dd><a href="mList.htm#correlate:with:"><i>correlate:with:</i></a>
<dd><a href="mList.htm#gMean"><i>gMean</i></a>
<dd><a href="mList.htm#gMean:"><i>gMean:</i></a>
<dd><a href="mList.htm#harmonicMean"><i>harmonicMean</i></a>
<dd><a href="mList.htm#harmonicMean:"><i>harmonicMean:</i></a>
<dd><a href="mList.htm#harmonicMean:withWeights:"><i>harmonicMean:withWeights:</i></a>
<dd><a href="mList.htm#max"><i>max</i></a>
<dd><a href="mList.htm#max:"><i>max:</i></a>
<dd><a href="mList.htm#median"><i>median</i></a>
<dd><a href="mList.htm#median:"><i>median:</i></a>
<dd><a href="mList.htm#min"><i>min</i></a>
<dd><a href="mList.htm#min:"><i>min:</i></a>
<dd><a href="mList.htm#mode"><i>mode</i></a>
<dd><a href="mList.htm#mode:"><i>mode:</i></a>
<dd><a href="mList.htm#product"><i>product</i></a>
<dd><a href="mList.htm#product:"><i>product:</i></a>
<dd><a href="mList.htm#rankCorrelate:with:"><i>rankCorrelate:with:</i></a>
<dd><a href="mList.htm#regress:"><i>regress:</i></a>
<dd><a href="mList.htm#stdDev"><i>stdDev</i></a>
<dd><a href="mList.htm#stdDev:"><i>stdDev:</i></a>
<dd><a href="mList.htm#total"><i>total</i></a>
<dd><a href="mList.htm#total:"><i>total:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#tiles">Intra-List Messages</a></b>
<dd><a href="mList.htm#decileUp:"><i>decileUp:</i></a>
<dd><a href="mList.htm#decileDown:"><i>decileDown:</i></a>
<dd><a href="mList.htm#quintileUp:"><i>quintileUp:</i></a>
<dd><a href="mList.htm#quintileDown:"><i>quintileDown:</i></a>
<dd><a href="mList.htm#percentileUp:"><i>percentileUp:</i></a>
<dd><a href="mList.htm#percentileDown:"><i>percentileDown:</i></a>
<dd><a href="mList.htm#tileUp:tiles:"><i>tileUp:tiles:</i></a>
<dd><a href="mList.htm#tileDown:tiles:"><i>tileDown:tiles:</i></a>
<dd><a href="mList.htm#decileUp:using:"><i>decileUp:using:</i></a>
<dd><a href="mList.htm#decileDown:using:"><i>decileDown:using:</i></a>
<dd><a href="mList.htm#quintileUp:using:"><i>quintileUp:using:</i></a>
<dd><a href="mList.htm#quintileDown:using:"><i>quintileDown:using:</i></a>
<dd><a href="mList.htm#percentileUp:using:"><i>percentileUp:using:</i></a>
<dd><a href="mList.htm#percentileDown:using:"><i>percentileDown:using:</i></a>
<dd><a href="mList.htm#tileUp:using:tiles:"><i>tileUp:using:tiles:</i></a>
<dd><a href="mList.htm#tileDown:using:tiles:"><i>tileDown:using:tiles:</i></a>
<dd><a href="mList.htm#runningTotal:"><i>runningTotal:</i></a>
<dd><a href="mList.htm#runningAverage:"><i>runningAverage:</i></a>
<dd><a href="mList.htm#normalize:"><i>normalize:</i></a>
<dd><a href="mList.htm#weightedDecile:"><i>weightedDecile:</i></a>
<dd><a href="mList.htm#weightedQuintile:"><i>weightedQuintile:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#inter">Inter-List Messages</a></b>
<dd><a href="mList.htm#isEquivalentTo:"<i>isEquivalentTo:</i></a>
<dd><a href="mList.htm#union:"<i>union:</i></a>
<dd><a href="mList.htm#union:using:"<i>union:using:</i></a>
<dd><a href="mList.htm#intersect:"<i>intersect:</i></a>
<dd><a href="mList.htm#intersect:using:"<i>intersect:using:</i></a>
<dd><a href="mList.htm#exclude:"<i>exclude:</i></a>
<dd><a href="mList.htm#exclude:using:"<i>exclude:using:</i></a>
<dd><a href="mList.htm#difference:"<i>difference:</i></a>
</dl>
<p>
<dl>
<dt><b><a href="clCollect.htm#creation">Creation and Update Messages</a></b>
<dd><a href="mList.htm#copyListElements"><i>copyListElements</i></a>
<dd><a href="mList.htm#append:"><i>append:</i></a>
<dd><a href="mList.htm#collectListElementsFrom:">
<i>collectListElementsFrom:</i></a>
</dl>
<p>
<a name="inquiry"> </a>
<dl>
<dt><b>Inquiry Messages</b>
<dd><a href="mList.htm#all:"><i>all:</i></a>
<dd><a href="mList.htm#any:"><i>any:</i></a>
<dd><a href="mList.htm#excludesElement:"><i>excludesElement:</i></a>
<dd><a href="mList.htm#includesElement:"><i>includesElement:</i></a>
</dl>

<p>
<hr>
<h3><a name="messages">Additional List Messages</a></h3>
<p>
You can redefine <i>Collection</i> messages and define new messages
directly for the <i>List</i> class.  You can define any number of
new methods and constants.  You cannot define and update
properties for <i>List</i> objects.  
<p>
<a name="create"> </a>
The following messages are used to <b>create and update</b> <i>List</i>
objects:
<p>
<Center><table width="90%" border="1" cellspacing="2" cellpadding="8">
<tr>
<td><b>Message</b>
<td><b>Definition</b>
<td><b>Sample</b>
</tr>

<tr>
<td><a href="mList.htm#,"><i><font size=+2>,</font></i></a>
<td>Appends <i>parameter</i> to <i>recipient</i>, returning modified
<i>recipient</i> 
<td>3 sequence , 10
<tr>
<td><a href="mList.htm#append:"><i>append:</i></a>
<td>Appends elements in <i>parameter</i> collection to
<i>recipient</i>, returning new <i>List</i>
<td>3 sequence append: 4 sequence .
<tr>
<td><a href="mList.htm#appendListElementsFrom:"><i>appendListElementsFrom:</i></a>
<td>Appends elements in <i>parameter</i> collection to
<i>recipient</i>, returning modified <i>recipient</i>
<td>3 sequence appendListElementsFrom: 4 sequence .
<tr>
<td><a href="mList.htm#at:put:"><i>at:put:</i></a>
<td>Replaces the object stored at position <i>parameter1</i> in 
<i>recipient</i> with object supplied as <i>parameter2</i>
<td>5 sequence at: 3 put: "xyz" .
</tr></table></Center>

<p>
<a name="access"> </a>
The following messages are used to <b>access</b> <i>List</i>
objects positionally:
<p>
<Center><table width="90%" border="1" cellspacing="2" cellpadding="8">
<tr>
<td><b>Message</b>
<td><b>Definition</b>
<td><b>Sample</b>
</tr>

<tr>
<td><a href="mList.htm#at:"><i>at:</i></a>
<td>Return object in <i>recipient</i> at position indicated by
<i>parameter</i>, a number; returns <i>NA</i> if <i>parameter</i>
greater than <i>recipient</i> count
<td>4 sequence at: 3 .
<tr>
<td><a href="mList.htm#at0:"><i>at0:</i></a>
<td>Return object in <i>recipient</i> at 0-based position indicated by
<i>parameter</i>, a number; returns <i>NA</i> if <i>parameter</i>
greater than <i>recipient</i> count
<td>4 sequence at0: 3 .
<tr>
<td><a href="mList.htm#uniformAt:"><i>uniformAt:</i></a>
<td>Return object in <i>recipient</i> at position indicated by
<i>parameter</i>, a number; returns object at position 1
if <i>parameter</i> greater than <i>recipient</i> count
<td>4 sequence uniformAt: 5 .
<tr>
<td><a href="mList.htm#uniformAt0:"><i>uniformAt0:</i></a>
<td>Return object in <i>recipient</i> at 0-based position indicated by
<i>parameter</i>, a number; returns object at position 0 if <i>parameter</i>
greater than <i>recipient</i> count
<td>4 sequence uniformAt0: 5 .
</tr></table></Center>

<p>
<a name="math"> </a>
These messages can be used to perform 
<b>vector arithmetic</b> between two <i>List</i> 
objects.  If the parameter is a scalar, that value is applied to
each element in the recipient <i>List</i>.  If the parameter is a 
<i>List</i>, the operation is applied positionally.  
These messages return a new <i>List</i> containing the same
number of elements in the recipient list.
These messages assume that the recipient contains numeric values
and that the parameter is a <i>Number</i> or a
<i>List</i> of <i>Numbers</i>.
<p>
<Center><table width="90%" border="1" cellspacing="2" cellpadding="8">
<tr>
<td><b>Message</b>
<td><b>Definition</b>
<td><b>Sample</b>
</tr>

<tr>
<td><a href="mList.htm#+"><i>+</i></a>
<td>Add <i>parameter</i> to <i>recipient</i>
<td>5 sequence + 5 sequence
<tr>
<td><a href="mList.htm#-"><i>-</i></a>
<td>Subtract <i>parameter</i> from <i>recipient</i>
<td>5 sequence - 3 
<tr>
<td><a href="mList.htm#*"><i>*</i></a>
<td>Multiply <i>recipient</i> by <i>parameter</i>
<td>5 sequence * 5 sequence
<tr>
<td><a href="mList.htm#/"><i>/</i></a>
<td>Divide <i>recipient</i> by <i>parameter</i>
<td>5 sequence / 2
</tr></table></Center>

<p>
<hr>
<h3><a name="complex">Complex List Structures</a></h3>
<p>
The elements of a list can be any type of object including other
lists.  For example, to create a list whose first element is a list
of 3 elements and whose second element is a list of 10 elements, 
use:<pre><tt><b>
     #--  Create an Empty List
     !listOfLists <- List new ;                

     #-- Append 2 list objects
     listOfLists, 3 sequence, 10 sequence ;

     listOfLists count printNL ;
</b></tt></pre>
The variable <i>listOfLists</i> refers to a list object with 2
elements.  Each of these elements is also a list object, the first
containing 3 elements (the numbers 1 - 3) and the second containing
10 elements (the numbers 1 - 10).  
To display the contents of
<i>listOfLists</i>, use:<pre><tt><b>
     #-- number the elements in the outer list
     listOfLists numberElements
     do: [ "Outer List Number: " print ;      #-- display position
           position print ;                   #--    in outer list
           " Contains " print ;               #-- display element
           count print ;                      #--   count in
           " Elements" printNL ;              #--   outer list

           #- number elements in inner list and display
           ^self numberElements               #-- ^self is optional
           do: [ " element" print ;           #-- display position
                 position print ;             #--   in inner list
                 ":   " print ;               #-- display value of
                printNL ;                     #--   element 
               ] ;
           newLine print;                     #-- skip line
          ] ;
</b></tt></pre>
<p>
A mistake often made when constructing nested lists is to use the
<font size=+2><b>,</b></font> message to append a <i>List</i> object
to an existing <i>List</i>.  For example:<pre><tt><b>
     !list1 <- 5 sequence ;
     !list2 <- 10 sequence ;
     !newList <- list1, list2 ;
     newList count printNL ;
</b></tt></pre>
The variable <i>newList</i> contains 6 elements: the first 5
elements are the numbers 1 through 5; the last element is a
<i>List</i> object.  This can be confirmed using:<pre><tt><b>
     newList do: [ whatAmI printNL ] ;

</b></tt></pre>
The definition of the <font size=+2><b>,</b></font> message
at <i>List</i> is to modify the recipient <i>List</i> by appending
the object supplied as a parameter to the recipient.  The result
of this operation will always be a <i>List</i> whose count is increased
by one.  In the
expression <i>list1, list2</i> , the object represented by
<i>list2</i> is added to <i>list1</i>.  The fact that the object
being added is itself a <i>List</i> does not affect the operation.
<p>
Two messages are available too append the elements of <i>list2</i>
to <i>list1</i>, returning a single <i>List</i> containing the combined
elements of the two lists.
The <i>appendListElementsFrom:</i> message has been defined to 
append the elements in the parameter to the recipient <i>List</i>,
modifying the recipient.  The <i>append:</i> message copies the
recipient <i>List</i> before appending the elements in the parameter.
For example:<pre><tt><b>
     #--  Create a separate list which contains the combined elements
     !newList <- list1 append: list2 ;
     #-- Print the counts
     list1 count print ; 
     newList count printNL ;

     #--  Modify list1 to contain the combined elements
     list1 appendListElementsFrom: list2 ;
     #-- Print the count
     list1 count printNL;

</b></tt></pre>
To create a <i>List</i> of the two lists, <i>list1</i> and <i>list2</i>,
define an empty <i>List</i> and use the
<font size=+2><b>,</b></font> message to add the two elements:<pre><tt><b>
     !newList <- List new ; 
     newList , list1, list2 ;
     newList count printNL ;
     newList
       do: [ whatAmI print; count printNL ] ;

</b></tt></pre>
Since the <font size=+2><b>,</b></font> message adds its parameter
as a single object, the expression:
<i>newList, list1</i> returns a <i>List</i> of 1 element.  When you
send the <i>, list2</i> message to this <i>List</i>, it returns a <i>List</i>
of 2 elements.  
<p>
<hr>
<h3><a name="cluster">List Clustering and Property Assignment</a></h3>
<p>
Unlike most user-defined classes, 
you do not usually need to look at all the instances of the
built-in classes as a single list.  
The expressions:<pre><tt><b>
     List instanceList count printNL ;
and
     10 sequence instanceList count printNL ;
</b></tt></pre>
display the value <i>1</i>.  This does not mean that there is only
one <i>List</i> object in the database.  The <i>instanceList</i>
message actually returns the <i>List</i> of instances in the same
physical structure or
"cluster" as the recipient.  By default, new instances of
the <i>List</i> class are physically stored in separate, independent
structures.  
<p>
To create new instances in the same physical structure as the recipient,
you need to use the <i>clusterNew</i> message instead of the <i>new</i>
message to create the new <i>List</i> object.  These messages are
identical for most classes, since the default behavior is to cluster
new instances.  For example:<pre><tt><b>
     #-- create a new list in its own cluster
     !newList <- List new ; 

     #-- a cluster contains the single list by default
     newList instanceList count printNL ;

     #-- create new lists in the same cluster
     !newList1 <- newList clusterNew ;
     !newList2 <- newList clusterNew ;
     !newList3 <- newList clusterNew ;

     #-- instanceList includes all lists in cluster
     newList instanceList count printNL ;

     #--  update the different lists in cluster
     newList1, 5, 10, 20 ;
     newList2 appendListElementsFrom: 5 sequence ;

    #--   display counts for each list in cluster
    newList instanceList numberElements
    do: [ position print ;      #- position in cluster
          whatAmI print ;       #- each element is a list
          count printNL ;       #- elements in list
        ] ;

</b></tt></pre>
More information about 
<a href="Classes.htm#cluster">general clustering rules</a>
is available.
<p>
When you are creating lists "on-the-fly", you do not need to worry
about clustering issues.  Clustering 
is important when you are updating properties with list values.
<p>
A property can be updated to contain a <i>List</i> using the
<a href="Fund.htm#update">standard assignment</a>
messages.  For example:<pre><tt><b>
     #-- Define a new class and some properties
     Object createSubclass: "NewClass" ;
     NewClass defineFixedProperty: "p1" ;
     NewClass define: "ts1" ;

     #--  Update the properties with list values
     NewClass :p1 <- 10 sequence ;
     NewClass :ts1 asOf: 94 put: 4 sequence ;
     NewClass :ts1 asOf: 95 put: 5 sequence ;
</b></tt></pre>
For efficiency reasons, it is preferable to store lists from the same
cluster when you update the same property for different instances.
By convention, a "prototype list" is defined for the class.  Properties
are assigned to new instances in this prototype's cluster.  For
example:<pre><tt><b>
     #--  Define a prototype list for p1 property
     NewClass define: 'p1PrototypeList' toBe: List new ;

     #-- Create new instance and update its value
     NewClass createInstance
     do: [ :p1 <- p1PrototypeList clusterNew ;
           p1 appendListElementsFrom: 5 sequence ;
         ] ;

</b></tt></pre>
This initialization is normally added to the 
<a href="Classes.htm#instance"><i>initializeLocalAttributes</i> method</a>
for the class, since
this is automatically run when you create a new instance.
For example:<pre><tt><b>
     NewClass defineMethod:
     [ | initializeLocalAttributes | 
       ^super initializeLocalAttributes ;
       :p1 <- p1PrototypeList clusterNew ;
       ^self
    ] ;
</b></tt></pre>

<p>
<hr>
<h3><a name="other">Related Topics</a></h3>
<p>
For additional information see:
<p>
<ul type=square>
<li><a href="clCollect.htm">The Collection Classes</a>
<li><a href="clCollect.htm#iterate">When to Iterate</a>
<li><a href="Classes.htm#cluster">Clustering Issues</a>
<li><a href="tuList.htm">Vision Tutorial: Using Lists</a>
<li><a href="sdmts.htm#">Technical Paper: Sets Do More Than Select</a>
</ul>
<p>
<p>
<hr>

<table border=0 width="100%">
<tr>
<td align=left><font size=-1>Copyright &copy 1997 Innovative Systems Techniques, Inc.</font>
<td align=right><font size=-1>Update June 19, 1997</font>

</table>

</body>
</html>
