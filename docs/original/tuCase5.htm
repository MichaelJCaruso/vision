<!DOCTYPE html>
<html>
<head>
<title>Case Study 5: Advanced Classification Techniques</title>
</head>

<body>
<body bgcolor=white>
<h2>Case Study 5: Advanced Classification Techniques</h2>

<p>
     | <a href="FHome.htm">Home</a> 
     | <a href="vtutor.htm">Tutorials</a> 
     | <a href="clClassify.htm">Classifications</a> 
     | <a href="clIList.htm">IndexedLists</a> |
<hr>
<p>

<blockquote><hr>
<center><b><font size+1>Reminder!</font></b> </a></center>
To run these examples, you should first start a new session and then load the sample database using:
<pre><tt><b>     "/localvision/samples/general/sample.load" asFileContents evaluate ;</b></tt></pre>
and load <i>testList</i> using:
<ul type=disc><pre><b>!testList <- Company masterList 
    rankDown: [ sales ] . 
    select: [ rank <= 20 ] ; </b></pre></ul>


Any other files referenced can be read from the <i>/localvision/samples/general/</i>
directory.
<p>
<b>Note:</b> The <i>sample.load</i> file runs by default on a <i>Unix</i> environment.  If you are using a <i>Windows NT</i> platform, this location may be prefixed by a drive  and optional path (e.g. <i>d:/visiondb/localvision/samples/general/sample.load</i>).  Check with your Vision Administrator for further details.<hr></blockquote>
<p>
<hr>
<p>
<h3>Topics Covered:</h3>
<ul type="square">
<li><a href="#overview">Overview</a><br>
<li><a href="#sample">Sample Region Data</a><br>
<li><a href="#hierarchy">Using the Hierarchy</a><br>
<li><a href="#many">Multiple Regions</a><br>
</ul>
<hr>
<h3><a name="overview">Overview</a></h3>
<p>
The goal of the examples in this section is to illustrate some techniques that
support complex classification requirements. In many of the other examples,
you have seen basic techniques for grouping companies into industries
and/or sectors.  In this example, two additional requirements are
considered:
<p>
<ol type="1">
<li><a href="#hierarchy">
Support for a hierarchical grouping scheme with varying numbers
of parents.</a>
<li><a href="#many">
Support for many-to-many relationships.</a>
</ol>
<p>
<hr>
<h3><a name="sample">Sample Region Data</a></h3>
<p>
The examples in this section use the class <i>Region</i>.
A region can reference a large area such as "Northeast" or
can refer to a more specific area such as "New York City".
Some regions can aggregate into larger regions.  For example,
"New York City" is part of the region "Tri-State Area" which is part
of the "Northeast" region.
<p>
The <a href="clClassify.htm"><i>Classification</i></a> class is
used to manage entity classes whose instances are primarily
used for grouping purposes and which may aggregate into
other instances of the same class.  Classes such as <i>Industry</i>
and <i>Region</i> are normally created as subclasses of <i>Classification</i>.
The following Vision code creates the
<i>Region</i> class and some sample instances:<pre><tt><b>
     #--  Create Region subclass
     Classification createSubclass: "Region" ;

     #--  Create Region instances and link to parent region
     Region createInstance: "Northeast" .
         setNameTo: "North East Region" ;
     Region createInstance: "TriState" .
         setNameTo: "NY, NJ, Conn Tri-State Region" .
         setParentTo: Named Region Northeast ;
     Region createInstance: "NYC" .
         setNameTo: "New York City" .
         setParentTo: Named Region TriState ;
     Region createInstance: "ConnS" .
         setNameTo: "Southern Connecticut" .
         setParentTo: Named Region TriState ;
     Region createInstance: "NJN" .
         setNameTo: "Northern New Jersey" .
         setParentTo: Named Region TriState ;
     Region createInstance: "NewEngland" .
         setNameTo: "New England" .
         setParentTo: Named Region Northeast ;
     Region createInstance: "ConnN" .
         setNameTo: "Northern Connecticut" .
         setParentTo: Named Region NewEngland ;
     Region createInstance: "Mass" .
         setNameTo: "Massachusetts" .
         setParentTo: Named Region NewEngland ;
     Region createInstance: "NYS" .
         setNameTo: "New York State ex NYC" .
         setParentTo: Named Region Northeast ;
     Region createInstance: "MidAtlantic" .
         setNameTo: "Middle Atlantic" .
         setParentTo: Named Region Northeast ;
     Region createInstance: "Other" .
         setNameTo: "Rest of the World" ;
</b></tt></pre>
<p>
The first step is to create the new class, <i>Region</i> using the
<a href="clEntity.htm#subclass"><i>createSubclass:</i></a> message.
By creating <i>Region</i> as a subclass of <i>Classification</i>
(which is a subset of <i>Entity</i>), the
<a href="clEntity.htm#access"><i>Named Region</i></a>
dictionary is automatically created
for storing references to individual region instances.  
The property <i>parent</i> is defined at Classification and is used
to store a reference
to another instance of the class that represents the <i>parent</i>
instance.  The message <i>setParentTo:</i> allows you to set up these
relationships.  
<p>
You can reference a specific region using:
<pre><tt><b>     Named Region NYC name printNL ;</b></tt></pre>
You can reference a specific region's parent region using:
<pre><tt><b>     Named Region NYC parent name printNL ;</b></tt></pre>
You can reference a specific region's parent's parent using:
<pre><tt><b>     Named Region NYC parent parent name printNL ;</b></tt></pre>
The message <i>displayHierarchy</i> displays 
the region's full parent hierarchy:
<pre><tt><b>     Named Region NYC displayHierarchy ;</b></tt></pre>
<p>
When new instances are created, the <i>parent</i> property is
initialized to return the new instance.  The <i>isParent</i> message
returns <i>TRUE</i> if the recipient is its own parent instance.
<p>
<hr>
<h3><a name="hierarchy">Using the Hierarchy</a></h3>
<p>
The following Vision code can be used to assign a primary region
to each company in the sample database:<pre><tt><b>
     #--  Create property to store the region
     Company defineFixedProperty: 'primaryRegion' 
                     withDefault: Named Region Other ;

     #--  Assign Region values
     Named Company send: [ AET, CI, TIC ] .
        do: [ :primaryRegion <- ^global Named Region ConnN ] ;
     Named Company send: [ T, XON ] .
        do: [ :primaryRegion <- ^global Named Region NJN ] ;
     Named Company send: [ CMB, CCI ] .
        do: [ :primaryRegion <- ^global Named Region NYC ] ;
     Named Company send: [ DEC ] .
        do: [ :primaryRegion <- ^global Named Region Mass ] ;
     Named Company send: [ EK ] .
        do: [ :primaryRegion <- ^global Named Region NYS ] ;
     Named Company send: [ ARC, BLS, DOW, DD, MO ] .
        do: [ :primaryRegion <- ^global Named Region MidAtlantic ] ;
     Named Company send: [ C, F, GM ] .
        do: [ :primaryRegion <- ^global Named Region Northeast ] ;
     Named Company send: [ GTE, GE ] .
        do: [ :primaryRegion <- ^global Named Region NewEngland ] ;
     Named Company send: [ IBM, NYN, PEP ] .
        do: [ :primaryRegion <- ^global Named Region TriState] ;
</b></tt></pre>
<p>
The first step is to define a new property at the <i>Company</i>
class which will be used to store the value of a company's
primary region.  
Since the <a href="Messages.htm#default"><i>withDefault:</i></a>
parameter is supplied for this new property, current company 
instances will have this property initialized with the region
<i>Other</i> and new company instances
created with the <i>createInstance:</i> message will have their
<i>primaryRegion</i> property initialized to use this <i>Region</i>.
<p>
Specific companies are then assigned to regions.  Note
that some companies are assigned to very specific regions such
as <i>NJN</i> (e.g., XON in northern New Jersey) while other companies are
assigned to fairly broad regions such as <i>Northeast</i>.  The
<i>displayHierarchy</i> message will display the number of levels
appropriate for the region.  For example:<pre><tt><b>
     Named Company XON primaryRegion displayHierarchy
</b></tt></pre>
includes three levels (northern New Jersey, tri-state area, northeast) 
while:<pre><tt><b>
     Named Company DOW primaryRegion displayHierarchy
</b></tt></pre>
includes two levels (mid-atlantic, northeast) and:<pre><tt><b>
     Named Company GM primaryRegion displayHierarchy
</b></tt></pre>
includes one level (northeast).  To display the region for each
company:<pre><tt><b>
     Company masterList
     do: [ code print: 10 ; primaryRegion code printNL ] ;
</b></tt></pre>
To display the region for each company, grouping the companies by parent
region use:<pre><tt><b>
     Company masterList groupedBy: [ primaryRegion parent ] .
     do: [ "Parent: " print ; name printNL ;
           groupList
           do: [ code print: 10 ; name print: 30 ; 
                 primaryRegion printNL ;
               ];
           newLine print ;
         ] ;
</b></tt></pre>
It is often useful to be able to return the most aggregate parent
in a classification hierarchy.  You can define a method to return
the "major" region using:<pre><tt><b>
     Region defineMethod: [ | major |
          isParent ifTrue: [ asSelf ] ifFalse: [ parent major ] 
     ] ;
</b></tt></pre>
This method checks to see if an instance is its own parent.  If
it is, you have reached the top of the hierarchy and the value
of the instance is returned; otherwise, the <i>major</i> message
is sent to the current instance's parent object.  For example:<pre><tt><b>
     Company masterList groupedBy: [ primaryRegion major ] .
     do: [ "Major: " print ; code print: 10 ; name printNL ;
           groupList
           do: [ code print: 10 ; name print: 30 ; 
                 primaryRegion printNL ;
               ];
           newLine print ;
         ] ;
</b></tt></pre>
<p>
<blockquote><hr>
<center><a name="recursion.warn"><b>Warning!! </b> </a> </center>
This method recursively
calls the <i>major</i> message until the parent object is the same
as the current recipient.  This implies that an instance in the
region hierarchy must have its value of <i>parent</i> defined to
return itself.  Otherwise your method will not terminate.
<hr></blockquote>
<p>
<hr>
<h3><a name="many">Multiple Regions</a></h3>
<p>
The <i>primaryRegion</i> property allows you to associate a specific
region instance with a company instance.  The following Vision code can be
used to assign multiple regions to each company in the sample 
database:<pre><tt><b>
     #--  Create property to store regions
     Company defineFixedProperty: 'regions'  ;

     #--  Assign an empty indexed list as the value for this property
     #--  for each company; this indexed list will enables easy access
     #--  to the set of regions or specific regions associated with the
     #--  company
     Company instanceList
       do: [ :regions <- ^global IndexedList clusterNew ] ;
</b></tt></pre>
<p>
The first step is to define a new property at the <i>Company</i>
class which will be used to store an indexed list of regions in
which the company does business.  This property is initialized 
to be a new instance of the <i>IndexedList</i> class.  The
<i>clusterNew</i> version of the <i>new</i>
message is used to keep all the new indexed list objects in the same physical
storage cluster.  
<a href="clIList.htm#cluster">More information</a>
about clustering and other initialization issues is available.
<p>
Initially, this <i>regions</i> message returns an empty list
for all companies.  For example:<pre><tt><b>
     Named Company IBM regions count printNL ;
</b></tt></pre>
displays the value <i>0</i>.  To add the 
value of the <i>primaryRegion</i> as an entry in the <i>regions</i>
list, use:<pre><tt><b>
     #--  Add the primaryRegion as an initial region for all
     Company instanceList
        do: [ regions at: primaryRegion put: primaryRegion ] ;
</b></tt></pre>
The <a href="mIList.htm#at:put:"><i>at:put:</i></a> message
is used to add the object supplied as the second parameter to the
recipient indexed list and store a direct index to this object using
the first parameter.  Each company will now have one region in its
<i>regions</i> list.  To access all the regions for a company use:<pre><tt><b>
     Named Company IBM regions
     do: [ displayInfo ] ;
</b></tt></pre>
To test if a company is part of a specific region use:<pre><tt><b>
     Named Company IBM regions at: Named Region TriState
</b></tt></pre>
If the region is in IBM's region list, the region object will be returned;
otherwise, the value <i>NA</i> is returned.  To find all the companies
that do business in the <i>Mass</i> region use:<pre><tt><b>
     Company masterList 
         select: [ regions at: ^global Named Region Mass . isntNA ] .
     do: [ displayInfo ] ;
</b></tt></pre>
To include additional regions for some companies use:<pre><tt><b>
     #--  Add other regions for some companies
     Named Company IBM regions
          at: Named Region Mass put: Named Region Mass ;
     Named Company IBM regions
          at: Named Region NJN put: Named Region NJN ;
     Named Company CI regions
          at: Named Region NJN put: Named Region NJN ;
</b></tt></pre>
Now the expression:<pre><tt><b>
     Named Company IBM regions count printNL ;
</b></tt></pre>
displays the value <i>3</i> and the expression:<pre><tt><b>
     Named Company IBM regions
     do: [ displayInfo ] ;
</b></tt></pre>
displays the regions <i>TriState, NJN,</i> and <i>Mass</i>.
Rerun the query to find the companies that do business
in the <i>Mass</i> region:<pre><tt><b>
     Company masterList 
         select: [ regions at: ^global Named Region Mass . isntNA ] .
     do: [ displayInfo ] ;
</b></tt></pre>
This list now includes IBM.
<p>
You can define a property at the <i>Region</i> class that tracks
all companies that do business in that region:<pre><tt><b>
     #--  Define the property
     Region defineFixedProperty: 'companyList' ;

     #--  Update the lists
     Company masterList mgroupedBy: [ regions ] .
     do: [ :companyList <- groupList ] ;
</b></tt></pre>
The <a href="mList.htm#mgroupedBy:"><i>mgroupedBy:</i></a> message
provides an efficient way to generate groups from multi-valued properties.
<p>
To display the number of companies in the <i>Mass</i> region use:
<pre><tt><b>     Named Region Mass companyList count</b></tt></pre>
To display the companies in this region, use:
<pre><tt><b>     Named Region Mass companyList
     do: [ displayInfo ] ;</b></tt></pre>
<p>
<hr>

| <a href="tuBasic.htm">Vision Basics</a> 
| <a href="tuLoad.htm">Creating a Demo Database</a>
| <a href="tuSingle.htm">Single Object Access</a> 
| <a href="tuList.htm">Using Lists</a> 
| <a href="tuTS.htm">Using Dates and TimeSeries</a> |

<hr>

<table border=0 width="100%">
<tr>
<td align=left><font size=-1>Copyright &copy; 1999 Innovative Systems Techniques, Inc.</font>
<td align=right><font size=-1>Updated January 25, 1999</font>
</table>

</body>
</html>

