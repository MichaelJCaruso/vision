<!DOCTYPE html>
<html>
<head>
   <title>Updating the Vision Network</title>
</head>
<body>
<body bgcolor=white>

<h2>Updating the Vision Network</h2>

| <a href="FHome.htm">Home</a> 
| <a href="Running.htm">Running Vision</a> 
| <a href="admDBA.htm">GeneralAdministration</a> | 
<hr>

<p>
<h3>Topics Covered:</h3>
<ul type="square">
<li><a href="#overview">Overview</a>
<li><a href="#Saving A Session">Saving A Session</a>
<li><a href="#Processing Submitted Updates">Processing Submitted Updates</a>
<li><a href="#New Object Spaces">New Object Spaces</a>
<li><a href="#Private Workspace Extensions">Private Workspace Extensions</a>
<li><a href="#Error Messages">Error Messages</a>
</ul>
<hr>

<a name="overview"><h3>Overview</h3>

There are two basic types of update that can be performed: 
<i>Global Updates</i> which can create and change any object  
or message and <i>Private User Updates</i> which can only create 
and change objects in a particular object space.  The <i>dbadmin</i>  
user code usually performs global updates.  Other users can perform 
private user updates within their object space.  A utility is available 
that allows non-<i>dbadmin</i> users to submit changes for global update.
<p>

Within any Vision session, any user can create new classes or instances, 
define or modify methods, and create or update property values.  
During your session, you can safely modify classes and instances that 
you do not control (i.e., shared <i>object space 3</i> objects), since 
these changes will only impact your session.  Any definitions or 
modifications made during your session will apply throughout your  
session and will disappear when you exit the session without saving your changes.
<p>

An update is really just a Vision session whose actions are committed to 
the permanent database. Although any user can change shared objects  during 
a session, only the <i>dbadmin</i> can save the changes as a permanent part 
of the database.  Global (i.e., <i>dbadmin</i>) updates can affect objects 
in one or more object spaces.  Private users can permanently save changes made 
to objects that they own.  Private user updates commit changes to a single object space.
<p>

When Vision saves changes to the network, new segments are created.  
Private saves will create segments in the top level object space only.  
Global updates may create segments in several object spaces.
<p>

If you choose to commit a Vision session to the permanent database, Vision 
will attempt to do a global update if the following conditions are met:

<ul type=disc>
<li>The user code appears in the file <i>/localvision/network/NDF.GURL</i>.

<li>The session has the VisionAdm environment variable set.
</ul>

If both of these conditions are not met, Vision will perform a private user update.
<p>

The <i>NDF.GURL</i> file contains a list of user codes that have permission to 
perform global updates.  By default, this file contains only the <i>dbadmin</i> 
user code.  You can edit this file to contain any number of users, one per line:  
however, it is usually preferable to limit the number of users with global update 
rights.
<p>

All updates to the Vision network are recorded in the <i>NDF.JOURNAL</i> file 
located in <i>/localvision/network</i>.  Minimally, this Ascii file lists the 
segments created with each update.  When you use the 
<a href="#The dbSubmit Utility"><i>dbSubmit</i></a> utility and the database 
<a href="admTools.htm">network maintenance tools</a>, additional annotations 
will be placed in this file for each update.  The 
<a href="admTools.htm#NDF.JOURNAL File"><i>NDF.JOURNAL</i></a> and related 
tools are described further in the section, <a href="admTools.htm">Network Administration Tools</a>
<hr>

<a name="Saving A Session"><h3>Saving A Session</h3></a>

Unless you are creating a new object space, all Vision updates are  
performed using a specific object space as the top-level.  The <i>dbadmin</i>  
user can specify any object space as its top level, depending on  
the nature of the update.  This is usually <i>object space 3</i> for general  
maintenance activities.  The object space defined for a private user  
should be specified for private updates.
<p>

If you are going to update the network, you should start your Vision 
session with an explicit object space number or set the <i>UserOSI</i>
environment variable.  For example, the <i>dbadmin</i> user would start 
a session in <i>object space 3</i> using:
<pre><b>
	vision -U3
</b></pre>

The session should look identical to any other Vision session.  
You should execute whatever Vision code is needed to define or 
modify Vision objects.  It is good practice to test all changes interactively  
in a session that you are not planning to commit.  You can then create a 
single file of Vision code which can be loaded, executed, and saved.
<p>

There are several ways to commit an update to the database.  You can  
explicitly save your session using the expression:
<pre><b>
	Utility updateNetwork ;
</b></pre>

If you are the <i>dbadmin</i>, you should see the message:
<pre><b>
	>>> Object Network Updated. <<<
</b></pre>

If you are a private user, you should the message:
<pre><b>
	>>> User Space Updated. <<<
</b></pre>

To include a comment with the save, use the form:
<pre><b>
	Utility updateNetworkWithAnnotation: "This is an important save." ;
</b></pre>

This is the most direct way to commit a set of changes to the Vision  
network.  Private users can use this approach; however, it is recommended 
that global (<i>dbadmin</i>) updates are managed using one of the approaches 
described below.

<a name=Saving Your Session on Exit><h4>Saving Your Session on Exit</h4></a>

If you are the <i>dbadmin</i> user and you use the Vision Editor, 
this first option is available to you.  Otherwise, you should use the 
<a href="#The dbSubmit Utility"><i>dbSubmit</i></a> option.
<p>

After you have made all your changes, exit from your session in the normal way.  
Before finishing, Vision will ask if you wish to update the shared network with 
your changes.  Type the single character <i>y</i> to indicate that you want to 
commit your changes.  You will then be prompted for a password.  This password 
is normally distinct from the <i>dbadmin</i> password, since not all users who 
are allowed to perform some database activities (e.g., tape loading) should be 
allowed to change the shared network.  Type your password, followed by a carriage  
return.  If you do not provide the correct password after three tries, Vision will 
terminate without saving your changes.
<p>

After you have supplied the correct password, you will be prompted for your initials. 
Your changes will then be saved as part of the shared network.  You will be informed 
when the save has successfully completed.  In addition to confirmation, you will be 
provided with a log file number which corresponds to a log of your entire session which 
is saved in the directory <i>$DBUpdateLogs</i>.
<p>

Note that for this option to work, you must have a user code named <i>dbupdate</i> set
up.  The password for this user code is the password you should use for the save.  This 
user code should be set up to run the <i>/bin/passwd</i> program as its shell.
<p>

By convention, updates installed in this manner are read in from files maintained in the 
directory <i>/localvision/source/changes</i> directory.  Master files which contain a logical 
grouping of class and message definition are often maintained in the <i>/localvision/source/latest</i> 
directory.  For example, if you used the file <i>DEFcompany</i> to define all your company 
messages initially and need to modify a specific method, you could create a Vision script named 
<i>changes.company.1</i> that just includes the modification, update the Vision database with this 
script, and edit the <i>DEFcompany</i> file to reflect this change.  The <i>DEFcompany</i> file 
becomes the unofficial master of all company methods.

<blockquote><hr>
<center><b><font size+1>Note:</font></b></center>
This is a convention that requires cooperation among all updaters.  
There is no guarantee that the code in this file is the latest version.  
The only way to be sure you have the latest code for a particular method 
is to check within the Vision database itself.
<hr></blockquote>

<a name="The dbSubmit Utility"><h4>The dbSubmit Utility</h4></a>

The previous approach is adequate for installations that have a single 
user who performs shared updates.  Environments that have several users 
who need to make global changes and/or the environments which have production 
update processing throughout the day are better served by the <i>dbSubmit utility</i>.
<p>

The <i>dbSubmit</i> utility is a Unix script that accepts a file containing Vision code  
from any user and submits it for update by the <i>dbadmin</i> user.  Requests submitted 
in this manner are validated for basic syntax errors, then added to a batch queue for 
later processing.  This batch queue can be processed as often as every minute, 
depending on your organization's needs.
<p>

To submit Vision code for update type:
<pre><b>
	dbSubmit
</b></pre>

at the Unix prompt.  You will be prompted as follows:
<pre><b>
	Input File:	                #-  enter name of file of Vision code

	Run in Space [3]:		#-  carriage return or alternative
 	                        	#-  space number

	Test File Before Submitting?	#- Yes/No
</b></pre>

If the supplied file is okay, you will see a message of the form:
<pre><b>
	***  File Update Pending.  File: update.xyz.nn

	where  xyz  is your user code
	and nn is the next available number for your user code
</b></pre>

The actual processing of this file is described in more detail in the next section.
<hr>

<a name="Processing Submitted Updates"><h3>Processing Submitted Updates</h3></a>

Updates that have been submitted with the <i>dbSubmit</i> utility that are waiting to 
be processed are stored in the directory:
<pre><b>
	$transArea/pending
</b></pre>

Updates that have already been processed are stored in the directory:
<pre><b>
	$transArea/posting
</b></pre>

and serve as an audit trail of changes made to the database over time.   
The directory
<pre><b>
	$transArea/logs
</b></pre>

contains daily log files that indicate which updates were committed on a 
particular day and any output generated by these updates.
<p>

The script that processes any submitted jobs is:
<pre><b>
	$transArea/scripts/processUpdate
</b></pre>

This script performs the following functions:
<ul type=disc>
<li>Creates a token <i>$tokens/manual.</i> in <i>Progress</i> which 
prevents other updates from starting.

<li>Starts a Vision session in the correct object space, executes the 
next pending script, and updates the network.

<li>Moves the pending script from the <i>pending</i> to the <i>posted</i> directory.

<li>Processes the next pending script.
</ul>

There are several different options for running this script.
<p>

If an automated <i>daemon</i> is not running at your installation,  
you can execute the following:
<pre><b>
	cd $transArea/scripts
	processUpdate
</b></pre>

To start the daemon manually, execute:
<pre><b>
	$adminArea/restart.manual
</b></pre>

This starts a job in background that periodically looks for pending  
files and processes them.
<p>

If the <i>daily. daemon</i> is running at your installation, any pending files  
will be executed as part of the standard production cycle.  
<hr>

<a name="New Object Spaces"><h3>New Object Spaces</h3></a>

Note that if you do not start Vision with a top level space and 
you are the <i>dbadmin</i>, Vision will create a new object space if 
you perform an update.  Although this is a way to create a new space,  
it is not recommended because you will not run any of the procedures 
used to make the space easily accessible to other users.  If desired, 
the following steps can be used to bypass the <i>installSpace</i> script 
to create a new space and run the initialization procedures:

<ul type=disc>
<li>Start a Vision session without the <i>-U</i> option
<pre><b>
        vision
</b></pre>

<li>Execute the method:
<pre><b>
	Environment MaintenanceTools
	setupSpaceFor: "code"
	as: "type"
	description: "description of space"

	where:
	code	        a code indicating a short name for the space
	type	        "DBA", "DB", or "User" indicating space's function
	description	a string describing the function
</b></pre>

For example, to set up a general administration space, use the 
Vision expression:
<pre><b>
	Environment MaintenanceTools
	setupSpaceFor: "General"
	           as: "DBA"
	  description: "Miscellaneous Admin Tools"
</b></pre>

The object space number assigned to General will be displayed.
<p>

<li>Save the session.
<pre><b>
	Utility updateNetwork
</b></pre>
</ul>

<blockquote><hr>
<center><b><font size+1>Note:</font></b></center>
In general there is no reason to use this approach since the 
<i>installSpace</i> script performs these steps and generates a 
centralized audit file.
<hr></blockquote>
<hr>

<a name = "Private Workspace Extensions"><h3>Private Workspace Extensions</h3>

Private updates can be used to store:

<ul type=disc>
<li>Variables defining frequently used names or constants.
<li>Variables defining lists of entities that are frequently used.
<li>Private classes and the messages and instances of these classes.
</ul>

Since you cannot make permanent changes to classes you do not own, 
several messages have been defined that allow individual users to define 
and maintain extensions to the core entity classes that can be saved in 
private workspaces.  If you changed objects that you do not own during 
your session, the save will be successful in most cases; however, any 
changes you made to objects that you do not own will not actually be saved.   
For example, suppose you define and use a temporary property at the shared 
class <i>Security</i> and create some methods at <i>Object</i> and <i>List</i>.   
You can use these new messages to update data in your private classes.   
When you save your session, the messages you defined at <i>Security</i>,  
<i>Object</i>, and <i>List</i> will be ignored and the new data in your 
private classes and extensions will be saved.
<p>

One common use for private spaces is to store lists of entities that are 
frequently needed.  For example:
<pre><b>
	!canadaList <- Security masterList select: [ country isCanada ] ;
</b></pre>

This list is available throughout your session.  If you save your session  
prior to exiting, this list will have the same contents when you start 
your next session.  You can save additional information for the elements  
in this list using extensions.  For example:
<pre><b>
	!canadaList <- Security masterList select: [ country isCanada ] .
	extendBy: [ !item1 <- sales * 2 ;	] ;
</b></pre>

If you save this session, and start a new one, you will still be able 
to access the value item1 for the elements of this list.  Note that if 
additional securities have been added since this list was created, they 
will not be in the list.  The variable <i>canadaList</i> refers to the list 
that was created when your session was saved.  You can define a method that 
you can run at startup that always updates this list.  For example:
<pre><b>
	^global
	defineMethod:
	[ | runStartup |
	^global defineFixedProperty: 'canadaList' ;
	^global :canadaList <-
	Security masterList select: [ country isCanada ] .
	extendBy: [ !item1 <- sales * 2 ] ;
	] ;
</b></pre>

Save the session in which you defined this method.  When you start a 
new session and execute <i>runStartup</i>, a new version of <i>canadaList</i> 
will be defined.
<p>

You can also create your own subclasses, messages, and instances.   
Private subclasses of <i>Object</i>, <i>Entity</i>, or <i>Dictionary</i> 
can be created using the <i>specializeAs:</i> message.  You should 
send this message to the class <i>MyObject</i>, <i>MyEntity</i>, or  
<i>MyDictionary</i>.  For example, to create a private set of industries
that reference a shared sector use the following expressions:
<pre><b>
	MyEntity specializeAs: "MyIndustry" ;
	MyIndustry newAs: "ind1" . setNameTo: "Industry 1" ;
	MyIndustry newAs: "ind2" . setNameTo: "Industry 2" ;
	MyIndustry defineFixedProperty: 'sector' ;
	Named MyIndustry ind1 :sector <- Named Sector Retail ;
	Named MyIndustry ind2 :sector <- Named Sector Finance ;
</b></pre>

If you save this session, the class <i>MyIndustry</i> with its two instances 
and the property values set for sector will be saved.
<p>

Although private users can save references to shared objects in properties of 
their private objects (as illustrated in the last example), they cannot make 
permanent changes to classes that they do not own.  Most of the core entity classes 
are shared by all users.  Users have "read" access to these classes and can make any  
modifications desired during their sessions; however, these modifications cannot be 
saved as part of the permanent database.  Several methods have been defined that allow 
individual users to define and maintain additional information about shared objects 
in their private workspaces.  Other users will be able to access this data in the same
manner used to access data in external database classes.
<p>

To create a private extension in which to define additional messages for a core entity 
class, you send the <i>createPrivateStructure</i> message to the class.  For example,  
to create a structure for maintaining private data about securities use:
<pre><b>
	Security createPrivateStructure
</b></pre>

This creates a private class named <i>SecurityRecord</i> in your private space.  
This class can be thought of as an extension to the <i>Security</i> class and gives you 
a place to define messages that you can save.  Although you can reference the class 
directly as <i>SecurityRecord</i> in your private space, a direct access path from <i>Security</i>  
instances to <i>SecurityRecord</i> instances is automatically defined.  This path is 
available to all users independent of their top-level object space.  The code defined  
when the space was created defines this path.  For example, if the code name for this 
object space is <i>xyz</i>, the expression:
<pre><b>
	Named Security IBM xyzData
</b></pre>

will return xyz's private data about IBM if it has been defined. The expression:
<pre><b>
	Security xyzData = SecurityRecord
</b></pre>

will return TRUE when executed in user xyz's private space.
<p>

To create a private data record for each security that does not 
currently have one, use the expression:
<pre><b>
	Security xyzData createMissingLinksForClass
</b></pre>

This will create an instance in your local class for every "real"  
Security.  The first time you run this, you will get an instance for 
each Security.  If you know that you will never track data for any security 
that is not a US security, you can restrict the creation to this subset using:
<pre><b>
	Security xyzData createMissingLinksForList:
	(Security masterList select: [ country isUS ] );
</b></pre>

When you save your session, the private security instances will be saved.  
When you start a new session and execute:
<pre><b>
	Security xyzData createMissingLinksForClass
</b></pre>

you will only create new private instances for shared securities that 
have been created since your last private save.
<p>

You can define properties and methods for your private class using:
<pre><b>
	Security xyzData
	defineFixedProperty: 'fp' .
	define: 'ts' .
	defineMethod:
	[ | m1 |
	"fp: " print; fp printNL ;
	"ts: " print ; :ts count printNL ;
	:ts displayAll
	] ;
</b></pre>

The message <i>entity</i> is defined at the private class to return the 
corresponding entity in the shared class.  You can use this entity to update 
the private properties.  For example:
<pre><b>
	Security xyzData instanceList
	do: [ 
	     :fp <- entity sector ;
	     90 to: 92 by: 1 years .
	     evaluate: [ :ts put: entity sales ] ;
	    ] ;
</b></pre>

To access this data for a specific Security, use the expression:
<pre><b>
	Named Security IBM xyzData :ts displayAll ;
</b></pre>

To find all securities that do have xyz data but do not have a value for <b>fp</b>, 
use the expression:
<pre><b>
	Security masterList select: [ xyzData isntDefault ] .
	select: [ xyzData fp isNA ] .
	do: [ # your code goes here
	    ] ;
</b></pre>

Note that the <i>xyzData</i> message needs to execute several lookups  
to link the security to the private data.  If you are planning to do a 
number of operations in a list that reference <i>xyzData</i>, you will find 
it is faster to create a local variable inside your <i>do:</i> or <i>extend:</i> block.  
For example:
<pre><b>
	Security masterList
	do: [ !xyz <- xyzData ;
	      !calc1 <- xyz fp1 + xyz fp2 + xyz ts1 ;
	      !calc2 <- calc1 - xyz calc1 ;
	      #---
	    ] ;
</b></pre>

When you save your session, any new private entity instances, messages,  
and property values are saved.  This data can be accessed by any user via 
the <i>xyzData</i> message but can only be updated if you start with the 
correct object space and have write permission for this space.
<p>

In summary, to create private records that extend shared entity classes, 
use the expression:
<pre><b>
	Security createPrivateStructure createMissingLinksForClass
</b></pre>

to create the private structure and initial instances.  This is normally  
done once for each class and saved.  Each time you start a session you 
can execute the expression:
<pre><b>
	Security xyzData createMissingLinksForClass
</b></pre>

to create private instances for any security that has been added 
since your last save.
<hr>

<a name="Error Messages"><h3>Error Messages</h3></a>

When a save is successful, you will see the message:
<pre><b>
	>>> Object Network Updated. <<<
</b></pre>
or
<pre><b>
	>>> User Space Updated. <<<
</b></pre>

There are several situations that can prevent a private save from 
completing  successfully.   In most cases, it is because a private 
user has defined something at a shared class that is needed in order  
to make the private save meaningful.  For example, the expressions:
<pre><b>
	Security newAs: "12345610" ;
	Security xyzData createMissingLinksForClass ;
</b></pre>

can be used to create a new shared security and a private extension that
is linked to it.  The property <i>entity</i> for the object <i>Named Security \12345610 xyzData</i>
will return the new security (i.e., <i>Named Security \12345610</i>).  
When you try to save this session, you will see the message:
<pre><b>
	>>> Local Update Would Disrupt Network Integrity  <<<
</b></pre>

When Vision tries to save your <i>SecurityRecord</i>, it discovers 
that the entity property references something that cannot be saved  
and the save is aborted.
<hr>

<table border=0 width="100%">
<tr>
<td align=left><font size=-1>Copyright &copy 1997 Innovative Systems Techniques, Inc.</font>
<td align=right><font size=-1>Updated June 20, 1997</font>
</table>

</body>
</html>