<!DOCTYPE html>
<html>
<head>
<title>External Database Access and Investment Databases</title>
</head>

<body bgcolor=white>
<h2>External Database Access and Investment Databases</h2>
| <a href="FHome.htm">Home</a>
| <a href="appClasses.htm">Application Classes</a> |
<hr>

<h3>Topics Covered:</h3>
<ul type=disc>
<li><a href="#Overview">Overview</a>
<li><a href="#The General Model">The General Model</a>
<li><a href="#Database Availability and Access">Database Availability and Access</a>
<li><a href="#Database Coverage">Database Coverage</a>
</ul>
<hr>

<a name="Overview"><h3>Overview</h3></a>

The Vision database provides access to a variety of  database  sources
that  are  updated  by  an  external vendor on a regular basis.  These
databases are linked to specific entities such  as  the  IBM  security
object or the Nestles company object during an update process known as
reconciliation.  The reconciliation process addresses any  adjustments
that  are  local  to  the specific external database so that access to
multiple databases can  appear  as  homogeneous  as  possible.   Cusip
changes,  split  adjustments,  and  fiscal  year  management  are  all
addressed in a uniform manner so that arbitrary decisions  defined  by
the individual database vendors become irrelevant.
<p>

Each  external  database  source  supplies  one  or  more  tables   of
information  usually related to a specific entity type such as Company
or Security.  Each table of information can contain  multiple  records
for  a  specific  entity,  representing data as of different points in
time. Access to this data is provided via a set of messages defined to
link  a  specific  entity  instance with its corresponding data in the
external source.
<p>

A specific data source may  send  incremental  updates  for  each  new
period  of  time  or may resend many periods of data with each update.
The former approach is referred to as  an  <i>Incremental</i>  or  <i>Append</i>
type   of  update;  the  latter  is  known  as  a  <i>Full  Refresh</i>  or
<i>Replacement</i> type of update.  The individual records in one of  these
tables are often referred to as <i>snapshots</i> since they represent a set
of data values for a specific entity as of a specific point in time.
<p>

<hr>

<a name="The General Model"><h3>The General Model</h3></a>
           
Each table of information supplied  by  an  external  data  source  is
mapped  to  its  own  Vision class, which is a subclass of the DataSet
class.  An additional class is created for each data source to  manage
the  links  between  core entity instances such as Company objects and
the specific tables associated with the data source.  Therefore,  each
data source minimally involves two classes.
<p>

Unlike the core entity classes, you almost never access  the  external
database  classes  directly.  Instead, you access the specific records
you need via messages that link  the  core  entity  instances  to  the
specific  records  with  which  they  are associated.  These links are
established as part of the  reconciliation  process.   Note  that  the
external database classes are accessed directly during reconciliation.
<p>

Assume the XYZ database supplies one table of information that relates
to company instances.  This data source provides an incremental update
once a month.  The table supplies twenty pieces of information  (e.g.,
item1,  item2, ... item20) as well as a localId code and a date.  Each
record will therefore contain values for each of these data items.
<p>

To support this database, two new  classes  are  defined.   The  class
<i>snapshot</i>  would  refer  to  the table of information that is updated
monthly by the vendor.  The class <i>LocalEntity</i>  would  refer  to  the
class  that  manages  the  links  between  Company  instances  and the
instances of XYZ snapshot.   Classes  such  as  <i>snapshot</i>  are  often
referred  to  as data sets and instances of these classes are referred
to as data records.
<p>

Each company in the XYZ database will have  an  instance  in  the  XYZ
LocalEntity  class.  These instances are created and maintained during
the reconciliation process.  Initially, there  will  be  a  one-to-one
correspondence  between the instances of LocalEntity and the instances
of snapshot if we assume that the initial  update  provides  a  single
month's information.  During subsequent updates, new instances will be
created in the LocalEntity class as new companies are added to the XYZ
database.   One  or more snapshot records will be associated with each
LocalEntity instance, each representing a specific point in time.
<p>

To establish the connection between  specific  Company  instances  and
their  corresponding instances in the XYZ LocalEntity class, the fixed
property <i>XYZData</i> is defined at the class Company.  The value of this
property  is  the  actual  instance  in the XYZ LocalEntity class that
represents the data for the specific company.  The expression:

<pre><b>    Named Company IBM XYZData </b></pre>

will therefore return the instance in the XYZ LocalEntity  class  that
represents IBM's data.  This is illustrated pictorially below:

<pre>    Company                                 XYZ LocalEntity
    ================================        ==============================
    | ticker | name | ... | XYZData|        |  id       | ...            |
    |________|______|_____|________|        |____________________________|
    |  GM    |      |     |        |        |   id1     |                |
    |  IBM   |      |     |  ======|===|    |   id2     |                |
    |  XON   |      |     |        |   |    |   id3     |                |
    |  . . .                       |   |====|=> idIBM   |                |
    |______________________________|        | . . .                      |
                                            |____________________________|
</pre>

The <i>XYZData</i> property establishes a  permanent  relationship  between
the  two  instances.  As a result, the user is sheltered from any <i>id</i>
changes in either the Company or the XYZ LocalEntity classes.
<p>

Because the value of this property  is  the  actual  instance  in  the
LocalEntity class, it responds to the messages defined for that class.
In this example, the expression:

<pre><b>    Named Company IBM XYZData id </b></pre>

returns the string value <i>idIBM</i>.  Since the message <i>showMessages</i>
lists  all  the messages defined for the recipient object's class, the
expression:

<pre><b>    Named Company IBM XYZData showMessages </b></pre>
or
<pre><b>    Named Company IBM XYZData showMessagesX </b></pre>

displays all the messages defined for the XYZ LocalEntity class.
<p>

It is likely that the XYZ database will  not  supply  information  for
every  Company  instance.  To keep access to the database uniform, any
company not having actual XYZ data will have the default  instance  of
the  XYZ  LocalEntity class assigned to its <i>XYZData</i> property.  Every
company will therefore return an instance of the XYZ LocalEntity class
in  response  to  the message <i>XYZData</i>.  The messages <i>isDefault</i> and
<i>isntDefault</i> are defined for all objects to determine if the value is
the  default  instance of the class.  For example, assume that the XYZ
database does not supply information for GM.  The expression:

<pre><b>    Named Company GM XYZData isDefault </b></pre>

returns the value TRUE, the expression:

<pre><b>    Named Company IBM XYZData isDefault </b></pre>

returns the value FALSE, and the expression:

<pre><b>    Company masterList select: [ XYZData isntDefault ] </b></pre>

returns the list of Company instances that have <i>real</i> XYZ data.
<p>

It is also possible that XYZ will provide data for companies  that  do
not  have  a  corresponding  Company  instance.   In  this  case,  the
information will be tracked in  the  XYZ  LocalEntity  class  and  not
linked  to  a specific Company instance.  If the company is created as
an instance in the future, the link can be established  at  that  time
and any XYZ data history collected will be automatically accessible.
<p>

To establish the connection between specific LocalEntity instances and
the  corresponding  instances  in  the snapshot class, the time series
property <i>history</i> is defined at the class LocalEntity.  The values of
this  property  are  the  actual  records  in  the snapshot class that
correspond to the data for the instance as  of  a  specific  point  in
time.  The expression:

<pre><b>    Named Company IBM XYZData history </b></pre>

returns the instance in the snapshot class that represents IBM's  most
recent data in the XYZ database and the expression:

<pre><b>    Named Company IBM XYZData :history asOf: 9211 . </b></pre>
or
<pre><b>    9211 evaluate:
      [ Named Company IBM XYZData history ] </b></pre>

returns the instance in  the  snapshot  class  that  represents  IBM's
November   1992  data  in  the  XYZ  database.   This  is  illustrated
pictorially below:

<pre>
    LocalEntity                           snapshot
    ==============================       ================================
    | id      | ... | history    |       | localId   | date | item1 | ...
    |---------|-----|------------|       |-----------|------|-------|-----
    | id1     |     | 9211-------|-------|--> id1    | 9211 |
    |         |     | 9212-------|-----  |    id2    | 9211 |
    |         |     | 9301-------|--  |  |    id3    | 9211 |
    | . . .   |     |            | |  |--|--> id1    | 9212 |
    |               |            | |     |    id2    | 9212 |
    |               |            | |     |    id3    | 9212 |
    |               |            | |-----|--> id1    | 9301 |
    |               |            |       |           |      |
    |_______________|____________|       |___________|______|_____________

</pre>

The <i>history</i> property establishes a  permanent  relationship  between
the  LocalEntity  instance  and the set of snapshot records associated
with that instance over time.
<p>

Because the values in the <i>history</i> property are actual  instances  in
the  snapshot  class,  they  respond  to the messages defined for that
class.  The expression:

<pre><b>    Named Company IBM XYZData history item1 </b></pre>

returns the value of <i>item1</i>.   Since  the  message  <i>displayMessages</i>
lists  all  the messages defined for the recipient object's class, the
expression:

<pre><b>    Named Company IBM XYZData history displayMessages </b></pre>
or
<pre><b>    Named Company IBM XYZData history displayMessagesX </b></pre>

displays  all  the  messages  defined  for  the  snapshot  class.   To
determine the date of the record retrieved, use the <i>date</i> message:

<pre><b>    Named Company IBM XYZData history date </b></pre>

Continuing with the example introduced above, the expressions:

<pre><b>    Named Company IBM XYZData :history asOf: 9211 . item1 </b></pre>
or
<pre><b>    9211 evaluate:
      [ Named Company IBM XYZData history item1 ] </b></pre>

can be used to access the value of XYZ <i>item</i> as  of  November  1992.
<p>

Because  the  expression <i>XYZData history</i> will be used to access most
of the useful data in  this  database,  a  cover  method  is  normally
defined  to simplify this access.  For example, the method <i>xyz</i> could
be defined at the class Company to  execute  the  expression  <i>XYZData
history</i>.  The previous expression would then be rewritten as:

<pre><b>    Named Company IBM :xyz asOf: 9211 . item1 </b></pre>
or
<pre><b>    9211 evaluate:
      [ Named Company IBM xyz item1 ] </b></pre>


The default instance for the snapshot class is stored in the <i>history</i>
time  series  as of <i>earliestPossibleDate</i> (i.e., 1/1/1).  The default
entry is stored in the time series so that you do  not  get  <i>Selector
Not  Found</i>  errors  if you access data from a date prior to the first
<i>real</i> date.  If this value were not stored and the first <i>real</i>  date
were November 1992, the expression:

<pre><b>    9206 evaluate:
      [
        Named Company IBM XYZData history

        do: [ date print ;
              item1 print ;
              item2 print ;
              item3 printNL ;
            ] ;
      ] ; </b></pre>

would display the errors:

<pre><b>    >>> Selector 'item1' Not Found <<<
    >>> Selector 'item2' Not Found <<<
    >>> Selector 'item3' Not Found <<<  </b></pre>

because the <i>history</i> message would return the value NA.

All LocalEntity instances will  minimally  have  this  single  default
record  in  the time series.  Therefore, if you ask for a company that
does not have any data or a company that does not  have  data  as  far
back  as you have requested, you will not get the <i>Selector Not Found</i>
errors.
<p>

The expression:

<pre><b>    Company masterList select: [ XYZData history isntDefault ] . </b></pre>

selects the companies that have <i>real</i> snapshot records.
<p>
   
Since  the  message  <i>xyz</i>  translates  into  <i>XYZData  history</i>,  the
expression:

<pre><b>    Company masterList select: [ xyz isntDefault ] . </b></pre>

is identical to

<pre><b>    Company masterList select: [ XYZData history isntDefault ] . </b></pre>

To select those companies that have some XYZ data but do not have  any
data on or before December 1992, use:

<pre><b>    92 evaluate:
       [ Company masterList
           select: [ XYZData isntDefault && XYZData history isDefault ]
       ] </b></pre>
or
<pre><b>    Company masterList
        select: [ XYZData isntDefault && :xyz asOf: 92 . isDefault ] </b></pre>

<hr>

<a name="Database Availability and Access"><h3>Database Availability and Access</h3></a>

The class DataSource has been defined to track information  about  the
external  databases  maintained  in Vision and the data sets that they
provide.  A summary report listing the current data sources with their
latest  and  earliest data dates can be displayed using the expression
<i>DataSource displayUpdateStatus</i>.
<p>

For example, when executed on December 21, 1993, the following  output
may have been generated:

<pre><b>    Vision Database Update Status
           As Of:  12/21/1993


    Source                 Latest        Earliest

    EE                  12/ 2/1993     10/14/1993
    IbesIntl            12/16/1993      9/30/1993
    MSCI                10/31/1993      7/31/1993
    WS                  11/30/1993      9/30/1993 </b></pre>


The message <i>profile</i> produces a detailed report showing  data  source
characteristics  such  as  its  update frequency, the entity class for
which data is provided, and its data sets and  their  characteristics.
For example:

<pre><b>    Named DataSource IbesIntl profile </b></pre>

produces a report of the form:

<pre><b>    Data Source: IbesIntl
    Object Space:  25   Environment DB IbesIntl
    Entity Type:        Company
    Access Via:         Company IbesData
    Frequency:          7 Days
    Last Processed:     12/7/1993
    Last Update As Of:  12/2/1993
    Previous Update:    11/24/1993
    Available For:      9/30/1993 - 12/2/1993

    Data Source Includes the Following Data Sets:
    Data Set:           annEst
    Update Mode:        Append
    Access Via:         Company IbesData annEstHistory
    Duration:           12 MonthEnds
    First Available:    11/30/1993

    Data Set:           qtrEst
    Update Mode:        Append
    Access Via:         Company IbesData qtrEstHistory
    Duration:            3 MonthEnds
    First Available:    11/30/1993

    Data Set:           snapshot
    Update Mode:        Append
    Access Via:         Company IbesData history
    Duration:            7 Days
    First Available:    11/30/1993

    Data Set:           static
    Update Mode:        Replace
    Duration:          NA
    First Available:    11/30/1993 </b></pre>

This profile displays general information about the data source at the
top.  The  remainder  of  the  report  then  profiles  each  data  set
associated with the data source.  Any data set profile  that  includes
the line <i>Access Via</i> can be accessed via the local entity instance.
<p>

<i>Object Space</i> indicates the  environment  in  which  the  specialized
messages  designed  to  reconcile  this data source to the core entity
data are stored.  <i>Entity Type</i> refers to the default instance of the
class  associated  with  the  data  source.  <i>Frequency</i> indicates the
expected frequency at which the data source will  update.   The  <i>Last
Processed</i>  date  refers  to  the actual date that the last update was
installed and available in Vision.   The  <i>Last  Updated  As  Of</i>  and
<i>Previous  Update</i>  dates refer to the as of dates associated with the
most recent two updates  of  the  data.   The  <i>Available  For</i>  range
indicates the first and last periods of data availablility.
<p>
   
The <i>Access Via</i> expression in the top portion of the profile  is  the
access path that can be used to navigate from a core entity to a local
entity for this data source.  In most cases, the message name  is  the
data  source  name  with  the  suffix <i>Data</i>.  In the case of the data
source IbesIntl  the  access  name  from  Company  is  <i>IbesData</i>  not
<i>IbesIntlData</i>.   This allows access to US and international Ibes data
to look homogeneous from the company class. For example, to access the
Ibes  local entity associated with the company Nestles', you would use
the expression:

<pre><b>    Named Company \461669 IbesData </b></pre>

A partial list of messages defined at the class  DataSource  is  shown
below:
<p>

<center><table border=1 cellspacing=2 cellpadding=8>
<tr><td><b>Message</b><td><b>Description</b>
<tr><td>dataSetList<td>list of data sets for source
<tr><td>earliestUpdateDate<td>asof date of first update
<tr><td>entityType<td>returns underlying Entity class
<tr><td>lastProcessDate<td>actual date last update was run
<tr><td>localEntity<td>returns LocalEntity class
<tr><td>mostRecentUpdateDate<td>asof date of latest update
<tr><td>objectSpace<td>returns object space environment
<tr><td>previousUpdateDate<td>asof date of prior update
<tr><td>profile<td>report method
<tr><td>updateFrequency<td>expected update frequency
</table></center>
<p>
                 
The message <i>earliestUpdateDate</i> refers to the initial update that was
processed  in  the  Vision  database.   Data sets which provide only a
single record per update will not have any history prior to this date.
Data  sets  which  supply several periods of data with each update, on
the  other  hand,  may  have  history  prior  to   this   date.  The
<i>mostRecentUpdateDate</i> is the as of date for the latest update.  The
<i>lastProcessDate</i> represents the actual date that the last update was
installed and available in Vision.  For example, the expression:

<pre><b>     Named DataSource IbesIntl
        do: [ earliestUpdateDate print: 15 ;
              mostRecentUpdateDate print: 15 ;
              lastProcessDate printNL ;
            ] </b></pre>

might display:

<pre><b>    9/30/1993     12/ 2/1993     12/7/1993</b></pre>

which indicates that the database was last updated on Dec 7 with  data
as of Dec 2.  The first data available was as of Sept 30.
<p>

The message <i>updateFrequency</i> returns the expected frequency at  which
the data source updates.  For example, the expression:

<pre><b>    Named DataSource IbesIntl updateFrequency </b></pre>

returns the value <i>7 days</i> indicating that the data should be  updated
once  a  week.   Note that the frequency for the data source indicates
the expected update cycle for refreshing or adding to each  data  set.
In  general, updates will occur using this schedule, but an occasional
update may be skipped.  The  previous  update  date  can  be  used  to
determine the current update schedule.
<p>

The message <i>entityType</i> returns the default  instance  of  the  class
associated with this DataSource.  For example, the expression:

<pre><b>    Named DataSource MSCI entityType </b></pre>

returns the default Security and the expression:

<pre><b>    Named DataSource WS entityType </b></pre>

returns the default Company.  The message  <i>localEntity</i>  returns  the
default  instance  of the local entity class associated with this data
source.  The expression:

<pre><b>    Named DataSource WS localEntity instanceList</b></pre>

returns the list of all local entities that have been  installed  with
the WorldScope database.
<p>

The profile report for a data source includes a profile of  each  data
set  associated  with  the  data  source.  For example, the DataSource
profile displayed above for IbesIntl included the section:

<pre><b>    Data Set:           snapshot
    Update Mode:        Append
    Access Via:         Company IbesData history
    Duration:            7 Days
    First Available:    11/30/1993 </b></pre>


If the <i>Update Mode</i> is <i>Append</i> this data set is used to  append  new
points  to  a  time  series  defined  at the local entity for the data
source.  If the <i>Update Mode</i> is <i>Replace</i> this data set is  used  for
local  reconciliation  purposes  and  is  not  accessed  via the local
entity.  The <i>Access Via</i> expression is the access path  that  can  be
used  to  navigate  from the local entity to a specific record in this
data set.  The <i>Duration</i> is used to limit access to old data.  <i>First
Available</i> indicates the first date that this data source was updated.
<p>

Recall that time series properties are defined at each  data  source's
local entity class to link a data set's instances to the local entity.
Any data set profile that includes  the  line  <i>Access  Via:</i>  can  be
accessed via the local entity instance.  For example, the expression:

<pre><b>    Named Company \461669 IbesData history </b></pre>

is used to access ibes snapshot records.  To access all snapshots over
time, use the expression:

<pre><b>    Named Company \461669 IbesData :history
    do: [ #---
        ] ; </b></pre>

Although <i>history</i> is typically the name of the time series that links
snapshot  records,  many  data sources provide several data sets, each
linked by its own time series property.  For example, in the  IbesIntl
profile there are three data sets that include the <i>Access Via</i> line:

<pre><b>    Data Set:           annEst
    Access Via:         Company IbesData annEstHistory
    Data Set:           qtrEst
    Access Via:         Company IbesData qtrEstHistory
    Data Set:           snapshot
    Access Via:         Company IbesData history </b></pre>

This indicates that access to the IbesIntl data sets  from  the  local
entity    is   via   the   time   series   messages   <i>annEstHistory</i>,
<i>qtrEstHistory</i>, and <i>history</i>.
<p>

The message <i>dataSetList</i> at DataSource returns the  list  of  DataSet
classes  that  are  provided  by  a  given  data  source.  The message
<i>profile</i> defined at DataSet produces a report showing characteristics
of the data set.  
<p>

The following is a partial list of messages defined  for  the  DataSet
class:
<p>

<center><table border=1 cellspacing=2 cellpadding=8>
<tr><td><b>Message</b><td><b>Description</b>
<tr><td>accessName<td>local entity property that links data records
<tr><td>className<td>name of data set class
<tr><td>dataSource<td>returns DataSource instance
<tr><td>duration<td>used to limit access to <i>old</i> data
<tr><td>firstAvailableDate<td>date record first available in Vision
<tr><td>localId<td>id of local entity to which record is linked
<tr><td>profile<td>report method
<tr><td>updateMode<td>indicates type of update for data records
<tr><td>updateModeIsAppend<td>method (returns boolean)
<tr><td>updateModeIsReplace<td>method (returns boolean)
</table></center>
<p>                  

The expression:

<pre><b>    Named DataSource MSCI dataSetList
     select: [ updateModeIsAppend ] .
         do: [ className print: 15; accessName printNL ]; </b></pre>

lists the name of each data set in the MSCI database and the  property
that links the records in that data set to MSCI LocalEntity instances.
<p>

<hr>
              
<a name="Database Coverage"><h3>Database Coverage</h3></a>


LocalEntity instances for  each  data  source  are  linked  to  Entity
instances  such  as  Company  or  Security.  The message <i>globalEntry</i>
defined at the LocalEntity classes returns the actual Entity instance.
Cover  methods  such  as  <i>company</i>  or <i>security</i> are also defined to
access the Entity instance.  The expression:

<pre><b>    Named Security \461669 MSCIData globalEntry </b></pre>

returns:

<pre><b>    Named Security \461669 </b></pre>

and the expression:

<pre><b>    Named Security 461669 MSCIData globalEntry MSCIData </b></pre>

returns:

<pre><b>    Named Security \461669 MSCIData </b></pre>


The following are frequently used messages defined for the LocalEntity
class in each data source:
<p>
<center><table border=1 cellspacing=2 cellpadding=8>
<tr><td><b>Message</b><td><b>Description</b>
<tr><td>dataSource<td>returns DataSource instance
<tr><td>displayFullInfo<td>method
<tr><td>displayInfo<td>method
<tr><td>globalEntry<td>returns Entity instance
<tr><td>hasBeenUpdated<td>returns boolean
<tr><td>hasntBeenUpdated<td>returns boolean
<tr><td>id<td>vendor identifier
<tr><td>isReconciledGlobally<td>returns boolean
<tr><td>isntReconciledGlobally<td>returns boolean
<tr><td>lastUpdateDate<td>returns date
</table></center>
<p>                  

Although each data  source  is  updated  according  to  its  scheduled
frequency,  not  all  entities  that were previously updated will have
data  in  the  current  update.   The  messages  <i>hasBeenUpdated</i>  and
<i>hasntBeenUpdated</i>  defined  at  the  LocalEntity classes indicate the
update status of a given instance  as  of  its  data  source's  latest
update.
<p>

For example, to find the securities which have actual  Ibes  data  but
have not been updated by the latest update, use the following:

<pre><b>    Security masterList
       select: [ IbesData isntDefault &&
                 IbesData hasntBeenUpdated
               ] . </b></pre>

Substituting  MSCIData  in  the  above  expression  will  return   the
securities which do not have <i>current</i> MSCI data.
<p>

To display the last update date for Ibes data in securities which have
not been updated by the latest Ibes update, use:

<pre><b>    Security masterList
      select: [ IbesData isntDefault &&
                IbesData hasntBeenUpdated
              ] .
      sortUp: [ id ] .
          do: [ IbesData lastUpdateDate print: 12;
                displayInfo;
              ]; </b></pre>

Each data source may also provide  data  for  entities  that  are  not
currently  in  the  Company  or Security universe.  This data is still
maintained at the LocalEntity class for  each  data  source,  but  the
local  entity  is  not  linked  to  a  global entity (e.g., Company or
Security   instance).    The   messages   <i>isReconciledGlobally</i>   and
<i>isntReconciledGlobally</i> have been defined to flag this state.
<p>

For example, to find the local entities in the IbesIntl database  that
are not globally reconciled, use:

<pre><b>    Named DataSource IbesIntl localEntity masterList
      select: [ isntReconciledGlobally ] . </b></pre>

or

<pre><b>    Security IbesData masterList
      select: [ isntReconciledGlobally ] . </b></pre>


The  method  <i>displayGlobalExceptionReport</i>  defined  for   DataSource
instances  lists  the  local  entities in the data source that are not
globally reconciled.  To produce this report  for  IbesIntl,  use  the
expression:

<pre><b>    Named DataSource IbesIntl displayGlobalExceptionReport </b></pre>

The local IbesIntl  entities  that  are  globally  reconciled  can  be
accessed by the expression:

<pre><b>    Named DataSource IbesIntl localEntity masterList
      select: [ isReconciledGlobally ] . </b></pre>

Since globally reconciled local entities are linked to actual  Company
instances,  the  following  expression  returns  the Company instances
which have actual Ibes data:

<pre><b>    Named DataSource IbesIntl localEntity masterList
      select: [ isReconciledGlobally ] .
      send: [ company ] . </b></pre>

which is equivalent to:

<pre><b>    Company masterList select: [ IbesData isntDefault ] .</b></pre>

Besides tracking general update information at the data source  level,
such  as  frequency and update dates, individual update information is
also maintained for each data set.   The  following  lists  additional
messages defined for the instances of DataSet classes:
<p>

<center><table border=1 cellspacing=2 cellpadding=8>
<tr><td><b>Message</b><td><b>Description</b>
<tr><td>date<td>record data date
<tr><td>processDate<td>actual date record was processed
<tr><td>refreshCount<td>number of times record was refreshed
<tr><td>updateDate<td>source update date which provided record
</table></center>
<p>
                 
These properties, as well as those described earlier in this  section,
are  often  used in various status reports and are grouped into useful
formats by the following methods defined at DataSet classes:

<dl>
<dt><i>displayCharacteristics</i>
<dd> - displays className, updateMode and duration in a single line
<p>
<dt><i>displayFullInfo</i>
<dd> - displays localId, refreshCount, firstAvailableDate, processDate, updateDate and some data values in a single line
<p>
<dt><i>profile</i>
<dd> - displays the data set name, updateMode, duration, LocalEntity property it updates, and the date the
       data set was first made available for use in a multi-line format.
</dl>
<p>

<hr>

<table border="0" width="100%">
<tr>
<td align="left"><font size="-1">Copyright &copy 1997 Innovative Systems Techniques, Inc.</font>
<td align="right"><font size="-1">Created June 11, 1997</font>
</table>
<hr>

</center></font>
</body>
</html>
