<!DOCTYPE html>
<html><head><title>Vision Release Notes 5.9.4</title></head>
<body bgcolor=white><h2>Vision Release Notes 5.9.4</h2>
<hr><h3>Topics Covered:</h3>
<ul type=square><br><li><a href="#description">Description</a>
<br><li><a href="#adminnotes">Administrative Notes</a> 
<br><li><a href="#newfc">New Features and Capabilities</a> 
<br><li><a href="#newadmin">New Administrative Methods</a> 
<br><li><a href="#newprim">New Primitives</a> 
<br><li><a href="#bcbf">Behavior Changes and Bug Fixes</a> 
<br><li><a href="#newmessages">New Messages</a> 
</ul>
<p><hr><p>
<h3><a name=description>Description</a></h3>

This document outlines the changes made in Vision release 5.9.4 and describes
the new <i>AdminTools</i> protocol that was added for improved database maintenance.
Revisions to existing <i>/localvision/admin</i> and <i>Cleanup</i> scripts, as well as suggested
usage examples, are provided.<p><p>

The release includes the following two top-level directory trees:
<ul type=disc>vision.5.9.4<br>
rel.5.9.4<br>
</ul>
The <i>vision.5.9.4</i> directory is the latest version and contains all executables
and standard scripts.  The executables can be copied to your <i>/vision</i> directory
when the release is to be promoted into production.  A comparison of this
release's <i>vision</i> directory with your on-site directory will indicate which
other files may have been changed or deleted.  It is left to the administrator
to make the site-specific <i>/vision</i> directory compatible with the latest version.<p><p>

The <i>rel.5.9.4</i> directory contains Vision protocol that is specific to this
release and modifications or additions to existing administrative procedures.
From this directory, the script <i>Install</i> can be used to install the necessary
scripts and update the Schema.  It assumes the scripts are located in the
<i>rel5.9.4</i> directory and reads in <i>install.5.9.4</i> which installs the following
files containing Vision code:<p>
<ul type=disc><table width=85%>
  <tr align=left valign=right><td><i><b>EXTadmin.5.9.4</b></i>  <td>Creates <b>ToolKit AdminTools</b> - core classes and protocol to
                  support network administration (analysis and maintenance)
   <tr align=left valign=right><td><i><b>FIXcore.5.9.4</b></i>  <td>Provides messages that have been modified for efficiency or
                  to correct errors
   <tr align=left valign=right><td><i><b>EXTcore.5.9.4</b></i>  <td>Provides messages that have been added to core Vision classes
</table></ul><p>
Please note that the FIX files redefine some standard Vision messages.  You may
wish to evaluate whether these changes are practical for your installation.<p><p>

</ul>
<b><hr><a name=adminnotes>Administrative Notes</a></b><p><p>


The operational task of aligning and cleaning structures, which the Vision
system defers at the time of modification, has been problematic in two ways:<p>

<ul type=disc><li>Some structures get missed in the current <i>Cleanup</i> methods.  To correctly modify the default method requires knowledge of the new structures.  The
    modification does not necessarily accompany new structure development.<p>

<li>As structures grow, <i>Cleanup</i> scripts periodically break due to process
    address space constraints.  The scripts must be modified so that less
    data is being updated per cleanup session.<p>
</ul>
This release introduces new primitives, a new class <i>AdminTools</i> and top-level
administrative methods defined at this class that address this problem in a
flexible yet complete manner.  Modifications are no longer needed when new
structures are added.  In addition, new statistics are available to help
database administrators design optimal maintenance procedures for a given site.
A final benefit is the introduction of a memory allocation threshold parameter
which is used to insure that updates always succeed in any dynamic environment.
Detailed descriptions of these administrative methods and primitives are found
in <a href="#newadmin">New Administrative Methods</a> and  
<a href="#newprim">New Primitives</a> .<p>

The following modified or new (*) scripts have been provided to make use of
these new primitives and administrative methods:

<ul type=disc><pre><b>   scripts file             replaces
   ---------------------    ----------------------------------
   runNetworkMaintenance    /localvision/admin/scripts/runNetworkMaintenance
   RunDaily                 /localvision/update/Cleanup/RunDaily
   cleanupNetwork.S         /localvision/update/Cleanup/scripts/cleanupClasses.S

   helpers file             replaces
   ---------------------    ----------------------------------
   setup.Friday             /localvision/admin/helpers/setup.Friday
   setup.Monday             /localvision/admin/helpers/setup.Monday
   setup.Thursday           /localvision/admin/helpers/setup.Thursday
   setup.Tuesday            /localvision/admin/helpers/setup.Tuesday
   setup.Wednesday          /localvision/admin/helpers/setup.Wednesday

   add ltools file          to
   ---------------------    ----------------------------------
 * Clean                    /localvision/tools
   Compact                  /localvision/tools
   DeleteSegs               /localvision/tools
   GCandCompact             /localvision/tools
   GCollect                 /localvision/tools
   cleanupOSD               /localvision/tools</b></pre></ul>


The addition of scripts currently in <i>/vision/tools</i> to <i>/localvision/tools</i> is
to separate <i>read</i>-only <i>/vision</i> executables or scripts from local site-specific
scripts in <i>/localvision</i>. The duplicates will eventually be removed from <i>/vision</i>
in future releases.  Note that the scripts provided in the <i>ltools</i> directory were
modified to reference <i>/localvision/tools</i> for the expected scripts.<p>

In cases where replacement is required, preserve the original version. Any site-specific modifications made to the original should be reviewed and added to the current release version as needed.<p>

<ul type=disc>
<li><i>runNetworkMaintenance</i>
<ul type=circle><li>adds a <i>Full Network Cleanup</i> step before the <i>Garbage Collection</i> step;
    this is run by <i>ltools/Clean</i>, which will run if <i>$tokens/clean</i> exists
<li>the allocation threshold should be set (edit and uncomment the corresponding
    statement in <i>Clean</i>) based on site-specific memory resources.  The example of
    200 MB can be used until it is proven that it should be lowered to insure
    updates are successful.
<li>note that there will be many intermediate updates resulting from the cleanup
    and that this number will likely change from day to day
<li>note also that any error in <i>Clean</i> will be reported and flagged by producing
    the token <i>$tokens/Error.Clean.runNetworkMaintenance</i>, but the process will
    not be halted since there is nothing critical about the cleanup failing

</ul><p>
Recall that all steps in <i>runNetworkMaintenance</i> are managed by tokens that are
set up by <i>/localvision/admin/helpers/setup.$dayOfWeek</i>.  The setup scripts in
the current release add the <i>$tokens/clean</i> prompt, to be uncommented as needed.

It is expected that the first time a full network cleanup runs, it will take
several hours to complete given the iterative nature of this process.  The
ensuing garbage collection and compaction will clean out a considerable amount
of data.  It is probably best to schedule it for the Friday evening cycle to
allow for the extra time.  Subsequent full network cleanups may take as little
as half an hour; this, of course, depends on the number and nature of updates
that have occurred between cleanups.<p>

<li><i>RunDaily</i>
<ul type=circle><li>consists of three steps, run by scripts
     <i>cleanupDataSources.S, updateSchema.S, cleanupNetwork.S</i>
<li>note that <i>cleanupClasses.S</i> or any of its variants are no longer required
<li>to insure that network cleanup succeeds, the allocation threshold should be
     set (edit and uncomment the corresponding statement) based on site-specific
     memory resources.  The example of 200 MB can be used until it is proven
     that it should be lowered to insure updates are successful.
</ul><p>
<li><i>cleanupNetwork.S</i>
<ul type=circle><li>standard script which runs a <i>Full Network Cleanup</i>
</ul><p>
</ul>
It is left to the Database Administrator to determine the optimal schedule for
running the cleanup.  Although <i>runNetworkMaintenance</i> is run at the start of each
cycle, each step is executed only if the corresponding token is set. If the full
network cleanup is run on any day, a modified cleanup can be run by <i>DailyCleanup</i>.
<p>
The files <i>cleanNetworkExcl.S</i> and <i>cleanNetworkIncl.S</i> in the <i>scripts</i> directory have been provided as examples which could be used to define additional versions of <i>RunDaily</i>. They can be added to <i>/localvision/update/Cleanup/scripts</i> and used as needed.  Note also that <i>ltools/Clean</i> is a site-specific script, so that it can also be modified if needed.<p>


<b><hr><a name=newfc>New Features and Capabilities</a></b>

<p>
<ol type=a start=a><li>  Size-based Container Segregation
<p>
This release implements partitioned saves where <i>large</i> containers are stored in
separate segments from <i>small</i> containers. This was motivated by the observation
that many of the frequently accessed pieces of data and meta-data (e.g. schemas)
are stored in small containers. By isolating these pieces from larger containers
which hold actual data, a process will spend less of its address space mapping in
unneeded large containers.
<p>
There are several ways to define <i>small</i> and <i>large</i>:<p>

<ol type=1><li>Accept the supplied default threshold of 10,000 bytes.  Any containers
      larger than 10,000 bytes will be stored in a separate segment.
<p>
<li>Adjust the threshold via Environment variable <i>VisionLargeContainerSize</i>.
      The system constrains the supplied value to be a minimum of 100 bytes.
      Setting the threshold to less than 100 bytes results in defining a
      threshold of exactly 100 bytes.  Note: by setting this variable to a
      high value, the update behavior will remain as it has been - containers of
      all sizes will be stored in the same segment.<p>

<li>Adjust the threshold for each space via a <i>Utility SessionAttribute</i>.
      The <i>VisionLargeContainerSize</i> is space attribute 7, and can be installed
      into a Vision network via the following method:

<ul type=disc><pre><b>Utility SessionAttribute
defineMethod: 
[ | largeContainerSize: space |
    (space * 65536 + 7) asInteger asPointerTo: super
];</b></pre></ul>

      For example, space 3's threshold could be set to 20,000 via the following
      expression:

<ul type=disc><pre><b>Utility SessionAttribute largeContainerSize: 3 . <- 20000;</b></pre></ul>
</ul>
      This option not only gives the flexibility to provide a space-specific
      override to the threshold, but allows the threshold to be set at runtime,
      perhaps after performing some network analysis.

<p>
<li>Private Memory Allocation Statistics
<p>
This release introduces the maintenance of statistics regarding memory
consumption by <i>read-write</i> containers and a subset of internal objects. This
information is accessible via debugger and primitive methods described in
<a href="#newprim">New Primitives</a>.  This feature gives Vision sessions the opportunity to monitor the
growth in the allocation of <i>read-write</i> containers.  If appropriate, when the
amount of space consumed by <i>read-write</i> containers grows past a safety threshold,
the Vision session can save the changes made. This will move the <i>read-write</i>
containers to <i>read</i>-only space and reclaim room in <i>read-write</i> space; the Vision
session will continue without encountering a private memory allocation error.
<p></ol></ol>
<b><hr><a name=newadmin>New Administrative Methods</a></b>
<p>
This release introduces a new ToolKit class <i>AdminTools</i>, which includes the
following <u>top-level administrative methods</u> added for network update and
maintenance purposes.  Other cluster profiling protocol available in this
release will be described in a later document.

<b><pre>Class	  AdminTools
Message	  cleanNetwork</pre></b>

<ul type=disc>Top-level method designed to align and clean all containers in the network.
It is implemented to serially traverse all object spaces in the network and
should be run by administrative scripts that perform regularly scheduled
database maintenance. To achieve optimal benefit, it should run before garbage
collection. To insure that updates succeed, <i>updateNetworkIfSpaceIsLow</i> is
called at critical junctures. It is expected that the allocation threshold is
tuned by the calling scripts for each installation as memory resources dictate.
<p>
</ul><b><pre>Class	  AdminTools
Message	  cleanNetworkInclude: osList</pre></b>

<ul type=disc>Top-level method designed to align and clean all containers in the object spaces
provided by the argument <i>osList</i>, which can be a single integer or a list of
integers.  These integers refer to object space numbers, but they can be recast
as <i>ObjectSpace</i> instances. For example, the following expressions are equivalent:

<ul type=disc><b><pre>AdminTools cleanNetworkInclude: (3, 5) ;

AdminTools cleanNetworkInclude: (3 asObjectSpace, 5 asObjectSpace) ;</pre></b></ul>

and indicate that only object spaces 3 and 5 should be cleaned.
<p>
It should be run by administrative scripts that perform regularly scheduled
database maintenance.  To achieve optimal benefit, it should run before garbage
collection. To insure that updates succeed, <i>updateNetworkIfSpaceIsLow</i> is
called at critical junctures.  It is expected that the allocation threshold is
tuned by the calling scripts for each installation as memory resources dictate.
</ul>
<b><pre>Class	  AdminTools
Message	  cleanNetworkExclude: osList</pre></b>

<ul type=disc>Top-level method designed to align and clean all containers in the network
except for the object spaces provided by the argument <i>osList</i>, which can be a
single integer or a list of integers.  These integers refer to object space
numbers, but they can be recast as <i>ObjectSpace</i> instances.  For example, the
following expressions are equivalent:

<ul type=disc><b><pre>    AdminTools cleanNetworkExclude: 3 ;

    AdminTools cleanNetworkExclude: 3 asObjectSpace ;</pre></b></ul>

and indicate that object space 3 should be excluded from the cleanup; all other
spaces in the database network will be cleaned.
<p>
It should be run by administrative scripts that perform regularly scheduled
database maintenance.  To achieve optimal benefit, it should run before garbage
collection. To insure that updates succeed, <i>updateNetworkIfSpaceIsLow</i> is
called at critical junctures.  It is expected that the allocation threshold is
tuned by the calling scripts for each installation as memory resources dictate.

</ul>
<b><pre>Class	  AdminTools
Message	  updateNetworkIfSpaceIsLow</pre></b>

<ul type=disc>This message is used to force updates if the total network memory allocation
exceeds the memory allocation threshold set for the session.  The default
threshold is expected to be 2 GB and can be changed for a session by the method
<i>setAllocationThresholdTo:</i> at <i>AdminTools</i>.  Typical usage would be to add
this at critical points in an update method which has the potential to fail
due to limited memory resources or due to the size of internal structures that
are temporarily built to support the update.</ul>

<b><pre>Class	  AdminTools
Message	  setAllocationThresholdTo: bytes</pre></b>

<ul type=disc>This message is used to temporarily change the default (2 GB) memory allocation
threshold for a session.  It is typically used by scripts which run update
methods that internally call <i>updateNetworkIfSpaceIsLow</i> to insure that updates
succeed given the available memory resources.<p>

For example,

    <ul type=disc><pre><b>AdminTools setAllocationThresholdTo: 200000000 ;</b></pre></ul>

would change the threshold to 200 MB for the session.  Upon exiting the session
and starting up again, the original default value would still be in effect.
</ul><p>

The following <u>support method</u>s are used by the methods described above.

<b><pre>Class	  AdminTools ObjectSpace
Message	  cleanSpace</pre></b>

<ul type=disc>This message is the basic method used to align and clean all the containers
in a given object space.  It consists of three methods - <i>cleanTables</i>, 
<i>cleanIndexedLists</i> and <i>cleanLists</i> - each of which forces an update if
memory is low by calling <i>updateNetworkIfSpaceIsLow</i> as it iterates over
its containers.  This message must be sent to an <i>ObjectSpace</i> instance;
for example:

    <ul type=disc><pre><b>3 asObjectSpace cleanSpace</b></pre></ul>

would be used to clean object space 3.  Note that this should only be used
in analysis mode - to avoid unwanted updates, make sure that the allocation
threshold has not been changed from the default (2 GB).
</ul>
<b><pre>Class	  AdminTools ObjectSpace
Message	  cleanTables</pre></b>

<ul type=disc>Aligns and cleans all containers of type <i>Table</i> in an object space.  As it
iterates over the containers, it calls <i>updateNetworkIfSpacesIsLow</i> to insure
a successful update.  It is used by <i>cleanSpace</i> as part of network maintenance,
but can also be used for analysis purposes as long as the allocation threshold
has not been changed from the default (2 GB) to avoid unwanted updates.
For example:

    <ul type=disc><b><pre>3 asObjectSpace cleanTables</pre></b></ul>

will clean the Tables in object space 3.  In addition, it provides statistical
information such as the number of Tables to be considered, the current network
allocation, the current allocation threshold and the number of Tables cleaned.</ul>

<b><pre>Class	  AdminTools ObjectSpace
Message	  cleanIndexedLists</pre></b>

<ul type=disc>Aligns and cleans all containers of type <i>IndexedList</i> in an object space. As it
iterates over the containers, it calls <i>updateNetworkIfSpacesIsLow</i> to insure
a successful update.  It is used by <i>cleanSpace</i> as part of network maintenance,
but can also be used for analysis purposes as long as the allocation threshold
has not been changed from the default (2 GB) to avoid unwanted updates.
For example:

    <ul type=disc><b><pre>3 asObjectSpace cleanIndexedLists</pre></b></ul>

will clean the <i>IndexedLists</i> in object space 3. In addition, it provides
statistical information such as the number of <i>IndexedLists</i> to be considered,
the current network allocation, the current allocation threshold and the number
of <i>IndexedLists</i> cleaned.</ul>

<b><pre>Class	  AdminTools ObjectSpace
Message	  cleanLists</pre></b><ul type=disc>

Aligns and cleans all containers of type <i>List</i> in an object space.  As it
iterates over the containers, it calls <i>updateNetworkIfSpacesIsLow</i> to insure a
successful update.  It is used by <i>cleanSpace</i> as part of network maintenance,
but can also be used for analysis purposes as long as the allocation threshold
has not been changed from the default value to avoid unwanted updates.
For example:

<ul type=disc><pre><b>3 asObjectSpace cleanLists</pre></b></ul>

will clean the Lists in object space 3. In addition, it provides statistical
information such as the number of Lists to be considered, the current network
allocation, the current allocation threshold and the number of Lists cleaned.

</ul><pre><b>Class	  AdminTools ObjectSpace
Message	  getSpace</pre></b><ul type=disc>

Returns the actual Environment for the <i>ObjectSpace</i> instance or NA if the network
does not contain a particular object space number.  To get to the object space
Environment <i>(^global)</i>, you can start a session with the <i>-U</i> option or use
<i>getSpace</i> if <i>-U</i> was omitted at session startup.
For example, the following are equivalent:

<ul type=disc><pre><b>vision -U15                vision
displayMessages ;          15 asObjectSpace getSpace displayMessages ;</b></pre></ul>

Note that if a network does not contain object space 15, <i>asObjectSpace</i> will
return NA.  To avoid getting Selector errors, the test <i>15 asObjectSpace isntNA</i>
should be used before sending the <i>getSpace</i> message.

</ul><pre><b>Class	  Integer
Message	  asObjectSpace</pre></b><ul type=disc>

Converts an integer into an <i>ObjectSpace</i> instance.  Typically used by network
maintenance and analysis methods, but is also useful for navigating to other
object space Environments via the <i>ObjectSpace</i> method <i>getSpace</i>.
For example:

<ul type=disc><b><pre>5 asObjectSpace getSpace displayInfo</pre></b></ul>

displays

<ul type=disc><b><pre>Object Space Number:         5
This Space Contains: Schema Management Tools
Shared Access Via: Environment DBA Schema</pre></b></ul>

and the two navigational paths are equivalent:

<ul type=disc><b><pre>5 asObjectSpace getSpace = Environment DBA Schema   #-- returns TRUE</pre></b></ul>

Note that not all integers can be converted into an <i>ObjectSpace</i> instance since
the network may not have an actual object space Environment for that number.
The test <i>N asObjectSpace isntNA</i> should be used before sending the <i>getSpace</i>
message.
<p>
</ul>

<b><hr><a name=newprim>New Primitives</a></b><p>

This release makes available the following primitives which have been used to
implement network analysis tools and operations support.

<p>
 <b> <i>totalNetworkAllocation</i></b>
     <ul type=disc>
  This is a nilary message which returns the total byte count of <i>read-write</i>
  containers in the Object Network.<p>

 </ul> <b><i>spacesInNetwork</i></b><ul type=disc>
  This is a nilary message which returns the number of object spaces in the
  accessed Object Network, including space 0. It is useful for implementing
  methods which iterate over the spaces in the network, but space 0 should
  be excluded as needed.<p>
</ul>
 <b> <i>totalSpaceAllocation</i></b>
<ul type=disc>
  This is a unary message whose recipient is an object space number. It returns
  the number of bytes used by <i>read-write</i> containers for the space.
</ul><p>
  <b><i>containerTableSize</i></b>
<ul type=disc>
  This is a unary message whose recipient is an object space number. It returns
  the number of container table entries which have been allocated for the space.
  Not all of the entries will necessarily reference an actual container. 
</ul><p>
  <b><i>containerAsObj</i></b>
<ul type=disc>
  This is a unary messages whose recipient is a POP. For containers which
  represent tables, properties, lists, or indexed lists, this primitive will
  return a Vision object referencing the store. For all other containers, this
  primitive returns an NA.
</ul><p>
  <b><i>containerSize</i></b>
<ul type=disc>
  This is a unary messages whose recipient is a POP. If the entry at the
  specified index in the table for the space references an actual container, then
  the size in bytes is returned. Otherwise, an NA is returned.
</ul><p>
  <b><i>containerType</i></b>
<ul type=disc>
  This is a unary messages whose recipient is a POP. If the entry at the
  specified index in the table for the space references an actual container, then
  the internal type index (an integer) is returned. Otherwise, an NA is	returned.
</ul><p>
  <b><i>containerSegment</i></b>
<ul type=disc>
  This is a unary messages whose recipient is a POP. If the entry at the
  specified index in the table for the space references an actual container, then
  the segment number of the segment in which the container is stored is	returned.
  Otherwise, an NA is returned.
<p>
</ul>
  <b><i>containerSegmentOffset</i></b>
<ul type=disc>
  This is a unary messages whose recipient is a POP. If the entry at the
  specified index in the table for the space references an actual container, then
  the byte offset into the segment in which the container is stored is returned.
  Otherwise, an NA is returned.
</ul><p>
  <b><i>containerAddrType</i></b>
<ul type=disc>
  This is a unary messages whose recipient is a POP. If the entry at the
  specified index in the table for the space references an actual container, then
  an indication of whether the container is <i>read-write</i> (1) or <i>read</i>-only (0) is
  returned. Otherwise, an NA is returned. An additional special return value of
  (3) is possible for certain containers in object space 0 used for clustering.
</ul><p>
  <b><i>containerPOPCnt</i></b>
<ul type=disc>
  This is a unary messages whose recipient is a POP. If the entry at the
  specified index in the table for the space references an actual container, then
  the number of containers that this container directly references is returned.
  Otherwise, an NA is returned.
</ul><p>
  <b><i>_packPOP:</i></b>
<ul type=disc>
  This is a binary message whose recipient is an object space number and whose
  parameter is an index into the container table for the space. If the space
  number isn't greater than the maximum object space number (1,023) and the
  parameter isn't greater than the maximum container table size (4,194,303), then
  an internal container reference, known as a POP (Physical Object Pointer) is
  returned. Otherwise, an NA is returned. Note that the POP may not reference an
  existing space or container.
<ul type=disc>
  <pre><b>Binary Converse Message required: _packPOPWithSpace:</pre></b>
</ul></ul>
 <p> <b><i>_extractSpace</i>
</b><ul type=disc>
  This is a unary message whose recipient is a POP. It returns the object space
  component of the POP.
</ul><p>
 <b> <i>extractCntnrIndex</i></b>
<ul type=disc>
  This is a unary message whose recipient is a POP. It returns the container
  index component of the POP.
</ul><p>
 <b> <i>_getNthPOP:</i></b>
<ul type=disc>
  This is a binary message whose recipient is a POP and whose parameter is an
  index into the <i>array</i> of POPs referenced by the recipient. If the Recipient
  references an actual container, and the Parameter is within range of the
  Recipient's array of POPs, then the requested POP is returned. If either
  condition is not met, an NA is returned. 
<p>
<ul type=disc><b>  Binary Converse Message required:  <i>_nthPOPReferencedBy:</i></b></ul>
<p>
</ol></ul>
<b><hr><a name=bcbf>Behavior Changes and Bug Fixes</a></b><p>
<ol type=a>

<li>(Solaris 2) signal handling.
<p>
For certain signals (Segmentation Fault, Alarm Clock, Termination, ...) the
backend would catch and handle the first occurrence of the signal, but then
would block all subsequent occurrences of any signal.  If one such signal
occurred in a session run from the Vision editor, when the user exited, the
backend would fail to see the termination signal sent from the editor.  This
would result in an orphaned batchvision that would continue to use system
resources such as swap space.  This problem only occurred on the Solaris
platform and is fixed in this release.
<p>

<li><i>preproc2</i> NA specification
<p>
Added two optional command line arguments to <i>preproc2</i>:<p>
   <table width =85%><tr align=left valign=right><td><b><i>dnavalue</b></i>	<td>specify a value to be interpreted as a decimal NA.
		<i>navalue</i> is converted to a floating point number and compared
		to the decimal items of the input file being processed. If the
		value is the same as the value in the input file, it is
		converted to a value the incorporator will interpret as NA.

 <tr align=left valign=right><td><b><i>inavalue</b></i>	<td>specify a value to be interpreted as an integer NA.
		<i>navalue</i> is converted to an integer and compared to the integer
		items of the input file being processed. If the	value is the
		same as the value in the input file, it is converted to a value
		the incorporator will interpret as NA.</table>
<p> <li>Handling of special Compustat NA values </b><p>
This release ensures that all incorporated variants of Compustat NAs are
classified as unique types instead of generic NAs.

<p> <li> Incorporator segment creation</b><p>
    
This release fixes a rare bug in which the incorporator failed to grow its
output file large enough. The result was a segmentation violation.

<p> <li> Duplicate item names in <i>inc.</i> layout files</b><p>

This release checks if an item name has not already been processed.  This
prevents a segmentation fault in the incorporator and indicates, presumably,
a typo in the layout file.

<p>
</ol>
<b><hr>
<a name=newmessages>New Messages</a></b><p>

<b><pre>********************
   FIXcore.5.9.4
********************</pre></b>

The standard protocol has been modified to allow you to distinguish between
an NA value, and the <i>non-value</i> returned when a block is terminated with a
semi-colon (i.e., when a block does not return anything).  The class <i>NoValue
</i>is a subclass of NA.  The FIX file adds the <i>whatAmI</i> and <i>isNoValue</i> messages
to make it easier to distinguish between the two forms.  For example:  

<ul type=disc><b><pre>[ ; ] value
   do: [ whatAmI print: 30 ; isNoValue print ; isNA printNL ] ;
NA
   do: [ whatAmI print: 30 ; isNoValue print ; isNA printNL ] ;</pre></b></ul>
In addition, these methods have been modified:

<b><pre>Class     NoValue
Message   else:
          elseIf:</pre></b>

<ul type=disc>These message have been modified so that the parameter is not evaluated when
the recipient is the <i>NoValue</i> instance of NA.  As a result, the expression:

<ul type=disc><b><pre>3 &lt; 5 ifTrue: [ "yes" print ; ] .
        else: [ "no" print ; ] ;</pre></b></ul>

only runs the <i>ifTrue</i>: block.  Prior to this patch, both blocks would have
executed.

</ul>
<b><pre>Class     Object
Message   masterList
          activeList</pre></b>

<ul type=disc>These messages have been modified to send the <i>asSelf</i> message to <i>^self</i> prior
to sending the <i>instanceList</i> message.  This enables these messages to work
correctly from within a block without needing the <i>^self</i> in front of the
message invocation.  For example, in the past the following code would have been
necessary if you wanted to use <i>masterList</i> inside the <i>run</i> method:

<ul type=disc><b><pre>className
defineMethod: [ | run | 
  !list &lt;- ^self getInstances ;
  list count print ; " found." printNL ;
] .
defineMethod: [ | getInstances | 
   ^self masterList
] ;</pre></b></ul>

The new version of <i>masterList</i> allows you to eliminate the <i>^self</i> messages:

<ul type=disc><b><pre>className
defineMethod: [ | run | 
  !list &lt;- getInstances ;
  list count print ; " found." printNL ;
] .
defineMethod: [ | getInstances | 
   masterList
] ;</pre></b></ul>

Note that the <i>^self</i> is still needed with <i>instanceList</i> since this is a
primitive message that would otherwise return the list of instances associated
with <i>^current</i>.
</ul>
<b><pre>Class     Collection
Message   groupedBy:in:</pre></b><ul type=disc>

This message has been modified to preserve the sort order of the list supplied
as the second parameter.

</ul><b><pre>Class     Collection
Message   iterate:</pre></b><ul type=disc>

This message has been modified to work with collections of lists correctly.

</ul><b><pre>Class     TimeSeries
Message   from:to:</pre></b><ul type=disc>

This message has been modified to work correctly with NA values.  If the <i>from</i>
parameter cannot be converted to a valid date, the first date in the time series
is used.  If the <i>to</i> parameter cannot be converted to a valid date, the last
date in the time series is used.  If both dates are NA the recipient time series
is returned.  In the prior implementation, the original time series was returned
if either date was NA.  
</ul><b><pre>Class     Integer
Message   mod:</pre></b><ul type=disc>

This message has been modified to work with 0 as a recipient.  <i>0 mod: n</i>
always returns 0.  In the prior implementation, the value NA was returned
if the recipient was 0 or negative.

</ul><b><pre>Class     String
Message   asLines</pre></b><ul type=disc>

This message has been modified to strip extra control M characters (\015) from
the file before determining line boundaries.  These extra characters appear in
files transferred between PC and Unix environments.  Once stripped, the line
boundary continues to be the <i>newLine</i> character.

</ul><b><pre>Class     Named
Message   at:</pre></b><ul type=disc>

This message has been modified to check the upper case version of the supplied
parameter if the supplied parameter is not explicitly in the naming dictionary.
If the supplied parameter is not a string, NA is always returned.

</ul><b><pre>Class     RangeClassification
Message   getClassificationFor: input</pre></b><ul type=disc>

This message has been modified to return the <i>defaultInstance</i> of the class when
the input is NA.

</ul><b><pre>Class     Schema
Message   getClassesNeedingUpdate</pre></b><ul type=disc>

This message has been modified so that object space changes are only posted if
one or more properties or methods have been defined since the last Schema update.
Previously, all object spaces were updated in each run.

</ul><b><pre>Class     Schema ClassDescriptor
Message   inheritsFrom:</pre></b><ul type=disc>

This message has been modified to strip extensions off the supplied parameter
prior to checking for inheritance.  

</ul><b><pre>Class     Schema ClassDescriptor
Message   setNamingDictionaryTo:</pre></b><ul type=disc>

This message has been modified to automatically add the <i>Default</i> entry when an
explicit naming dictionary is assigned to a Schema <i>ClassDescriptor</i>.

</ul><b><pre>Class     Schema ClassDescriptor
Message   isObjectDescriptor</pre></b><ul type=disc>

Strips any extensions off recipient before testing if it is the class descriptor
associated with the <i>Object</i> class.
<p>
</ul><pre><b>********************
   EXTcore.5.9.4
********************</b></pre>

These methods have been added to the core classes as a supplement to release 5.9.4.

<b><pre>Class     Object
Message   define: name withDefault: default</pre></b><ul type=disc>

Creates a new time series property and sets a default value which is used to
initialize new instances.

</ul><b><pre>Class     Object
Message   respondsTo: message</pre></b><ul type=disc>

Returns a Boolean value indicating whether recipient responds to supplied message.
For example:
     <ul type=disc><b><pre>3.0 respondsTo: "absoluteValue" . printNL ;
3.0 respondsTo: "mod:" . printNL ;
3.0 respondsTo: "+" . printNL ;
3.0 respondsTo: "within:percentOf:" . printNL ;</pre></b></ul>

</ul><b><pre>Class     Object
Message   subclassList</pre></b><ul type=disc>

Returns a list containing the default instance of each subclass of recipient.
For example:
<ul type=disc><b><pre>Entity subclassList
do: [ whatAmI print: 30 ; masterList count printNL ] ;</pre></b></ul>

</ul><b><pre>Class     String
Message   as: type</pre></b><ul type=disc>

Converts the recipient String to an instance of the class indicated by the
parameter, if possible.  If the type is a string that is not the default String,
the supplied type will be evaluated to determine its class.  The implementation
of <i>convertFrom:</i> defined for that class will be used to convert the string to
the correct class.  The version <i>at</i> <i>Object</i> looks up the string in the class'
default naming dictionary, if it exists.  If the recipient String contains the
"," character, this method returns a list of objects of the supplied type.  Any
String that cannot be converted to the supplied class returns NA.

</ul><b><pre>Class     Object, String, Number, Integer, Double, Float, Date, Boolean, Block
Message   convertFrom: string</pre></b><ul type=disc>

This message converts the supplied string to an instance of the recipient's
class if applicable, returning NA otherwise.  The definition at <i>Object</i> will look
up the string in the class' naming dictionary, if defined. The version at <i>String</i>
returns the recipient stripped of any extensions.  The versions at <i>Number</i>,
<i>Integer</i>, <i>Double</i>, and <i>Float</i> convert the recipient to a numeric value if possible.
The version at <i>Date</i> converts the recipient to a Date using the <i>asDate</i> message
defined at String.  The version at Boolean returns TRUE if the recipient contains
an upper/lower case combination of <i>true</i> and FALSE if the recipient contains an
upper/lower case combination of <i>false</i>.  The version at Block returns a block 
containing the string as a message.  This message is called by the <i>as:</i> message
at String.

</ul><b><pre>
Class     Entity
Message   validateInputString: string</pre></b><ul type=disc>

This message modifies the version at Object which uses the class's default
naming dictionary to use the <i>locateId:</i> message to search one or more naming
dictionaries, if defined.

</ul><b><pre>Class     Entity
Message   locateIds: stringList</pre></b><ul type=disc>

This message returns a list of objects of the recipient's class, one for each
identifier included in the comma-separated string supplied as the parameter.  Any
id that does not return a valid instance of the class will be eliminated from
the returned list.  For example:

<ul type=disc><b><pre>Currency locateIds: "USD, XYZ, CAD" .
do: [ displayInfo ] ;</pre></b></ul>

displays:

<ul type=disc><b><pre>USD United States Dollar
CAD Canadian Dollar</pre></b></ul>

</ul><b><pre>Class     String
Message   pad: n</pre></b><ul type=disc>

Pads the string with blanks if number of characters in the string is less than
supplied parameter. If <i>n</i> is negative, string is padded on the left; otherwise,
it is padded on the right.

</ul><b><pre>Class     String
Message   from: pos</pre></b><ul type=disc>

Returns a substring of recipient starting from the position indicated by the parameter.
If <i>pos</i> is numeric, the substring starting with this character position to the
end of the string is returned.  If <i>pos</i> is a character, the substring starting
from the first occurrence of this character to the end of the string is returned.

</ul><b><pre>Class     String
Message   to: pos</pre></b><ul type=disc>

Returns a substring of recipient from start of recipient to position indicated
by parameter.  If <i>pos</i> is numeric, the substring ending with this character
position is returned.  If <i>pos</i> is a character, the substring starting from the
beginning of the recipient through to the first occurrence of this character is
returned.

</ul><b><pre>
Class     String
Message   asDate</pre></b><ul type=disc>

Converts the recipient String into a Date object.  The recipient can contain a
value in one of the following forms: 
<ul type=disc><b><pre>"yy", "yymm", "yymmdd", "yyyymmdd"
"m/d/y"     where m is 1-12; d is 1-31; y is yy or yyyy
"m-d-y"     where m is 1-12; d is 1-31; y is yy or yyyy
"+ # offset", where # is integer and offset is a DateOffset
"- # offset", where # is integer and offset is a DateOffset
"today"
"yesterday"</pre></b></ul>

The <i>offset</i> formats add/subtract the offset from the current value of <i>^date</i>.
For example:
<ul type=disc><b><pre>"961231" asDate      --> 12/31/96
"1/3/95" asDate      --> 1/3/95
"+ 3 days"           --> current date + 3 days
"today"              --> today's date</pre></b></ul>

</ul><b><pre>Class     String
Message   howManyOf: charset</pre></b><ul type=disc>

Returns the number of occurrences of any of the characters in the supplied
character set in the recipient String.  For example:
<ul type=disc><b><pre>"1/15/96" howManyOf: "/" . printNL ;</pre></b></ul>

</ul><b><pre>Class     String
Message   translateString: fromString to: toString</pre></b><ul type=disc>

Replaces all occurrences of <i>fromString</i> with <i>toString</i> in recipient.  Note that
this differs from <i>translate:to:</i> which translates any character present in the
first parameter to the string supplied as the second parameter. This method does
not currently work for the situation where overlapping replacements would be
necessary.  In this case, an error message is printed and <i>NA</i> is returned.

</ul><b><pre>Class     Block
Message   asRowsColumns</pre></b><ul type=disc>

Captures any printing done within the recipient block as a list of strings
representing the rows of the output extended by the variable <i>columns</i> which
is a list of strings representing the columns for each row. The value of
<i>columns</i> is a list of strings where each element in this list corresponds to
the value printed in the block.  The list <i>columns</i> is extended by the variable
<i>position</i> which returns the column number of the corresponding element.

</ul><b><pre>Class     Number, NA
Message   printWithLeadingZeros: width
          printWithLeadingZerosNL: width</pre></b><ul type=disc>

Displays the recipient with leading 0s to fill out the supplied width if width
is positive.  If width is negative, no padding is done.

</ul><b><pre>
Class     DateOffset
Message   evaluate: block</pre></b><ul type=disc>

Adds the recipient to the current ^date and evaluates the supplied block.
For example:
<ul type=disc><b><pre>-3 monthEnds evaluate: [ ^date printNL ] ;</pre></b></ul>

</ul><b><pre>Class    String, Selector
Message  asSelector</pre></b><ul type=disc>

Returns the recipient as a selector object.  The version at Selector returns
recipient.

</ul><b><pre>Class     Value
Message   incrementBy: counter
          increment</pre></b><ul type=disc>

This message is used to increment the value of a fixed property by the amount
supplied as the parameter.  The unary version of the message uses 1 as an
increment.  The message is sent to the intensional form of the property.
For example:
<ul type=disc><b><pre>!x &lt;- 10 ;
:x increment ;
:x incrementBy: 3 ;
x printNL ;</pre></b></ul>

</ul><b><pre>Class     Value
Message   decrementBy: counter
          decrement</pre></b><ul type=disc>

This message is used to decrement the value of a fixed property by the amount
supplied as the parameter.  The unary version of the message uses 1 as a
decrement.  The message is sent to the intensional form of the property.
For example:
<ul type=disc><b><pre>!x &lt;- 10 ;
:x decrement ;
:x decrementBy: 3 ;
x printNL ;</pre></b></ul>

</ul><b><pre>Class     NA
Message   asCurrency</pre></b><ul type=disc>

This message returns NA when sent to the NA class.

</ul><b><pre>Class     Object, Schema ClassDescriptor
Message   asClassDescriptor</pre></b><ul type=disc>

Returns the class descriptor instance in Schema <i>ClassDescriptor</i> for the
recipient except when the recipient is a class descriptor, in which case,
the recipient is returned stripped of any extensions.
</ul></ul></ul>

<p><hr><table width=100%>
  <tr>
    <td align=left><font size=-1>Copyright &copy; 1998 Innovative Systems Techniques, Inc.</font>
    <td align=right><font size=-1>Updated December 23, 1998</font></table> </body></html>
</body></head>
