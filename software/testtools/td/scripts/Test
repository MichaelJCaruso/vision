#!/bin/csh

unalias cd
unalias ls

set HostName    = `uname -n`
set HostId      = `uname -n -m`
set OSVersion   = `uname -s -r -v`
set TestDate    = `date`

if ($#argv > 3) then
    set TDComponentsUpperDir = $argv[4]
else
    set TDComponentsUpperDir = ~/vision-master/software/testtools/td/component
endif

if ($#argv > 2) then
    set TDVersion = $argv[3]
else
    set TDVersion = 8.0
endif

set TDComponents = $TDComponentsUpperDir/$TDVersion
if (! -d $TDComponents) then
    echo ">>> Test Components Directory '$TDComponents' Not Found"
    exit 1
endif

if ($#argv > 1) then
    setenv NDFPathName $argv[2]
endif

if (-d software) then
    set softwarepath = $cwd/software
else if (-d ../software) then
    set softwarepath = `(cd ../software; pwd)`
else if (-d ../../software) then
    set softwarepath = `(cd ../../software; pwd)`
else if (-d ../../../software) then
    set softwarepath = `(cd ../../../software; pwd)`
else if (-d ../../../../software) then
    set softwarepath = `(cd ../../../../software; pwd)`
else if (-d ../../../../../software) then
    set softwarepath = `(cd ../../../../../software; pwd)`
else if (-d ../../../../../../software) then
    set softwarepath = `(cd ../../../../../../software; pwd)`
else if (-d ../../../../../../../software) then
    set softwarepath = `(cd ../../../../../../../software; pwd)`
else if (-d ../../../../../../../../software) then
    set softwarepath = `(cd ../../../../../../../../software; pwd)`
else
    set softwarepath = `pwd`
endif

# Always check, whenever there are ambiguity, list all candidates and exit...
# The release string provided by users should be either "src/projectName","release/releaseNumber", or "projectName", "releaseNumber".
# For example, "src/linux-port","release/7.0.1", "release-7.0.1extensions", "7.0.2".
if ($#argv > 0) then
    if (-d $softwarepath/$argv[1]) then
        set Release = $argv[1]
    else if (-d $softwarepath/src/$argv[1]) then
        set Release = src/$argv[1]
    else
        echo "Cannot find directory $softwarepath/$argv[1] or $softwarepath/src/$argv[1]"
        exit 1
    endif
else
    set candidates = ()
    set releases = (`cd $softwarepath/src; ls`)
    foreach release ($releases)
        if (-x $softwarepath/src/$release/src/backend/batchvision) then
            set candidates = ($candidates src/$release)
        endif
    end
        echo "Usage On '$HostName':"
        foreach candidate ($candidates)
            echo "   $0 $candidate [ndf [TDversion [componentDirectory]]]"
        end
        exit 1
endif

set Tag = "$HostName $Release $TestDate"

set ReleaseDirectory    = "$softwarepath/$Release"
set ReleaseExecutable   = "$ReleaseDirectory/src/backend/batchvision"
set ReleaseOutput       = "$ReleaseDirectory/src/backend/TD/component.$TDVersion"

if (! -x $ReleaseExecutable) then
    echo ">>> Vision Release $Release Does Not Exist On '$HostName'"
    exit 1
endif

if (! -e $ReleaseOutput) then
    mkdir -p $ReleaseOutput
endif
if (! -d $ReleaseOutput) then
    echo ">>> Output Directory '$ReleaseOutput' Can Not Be Created"
    exit 1
endif

cd $ReleaseOutput/..

#######################################################################################################################
#  The following -a option of strings is used for AIX , but it takes longer time with this option on,
#      so strings without -a option is used here to save time.
#  strings -a $ReleaseExecutable | grep AUDIT | grep -v auditshell | sed 's/AUDITINFO:/*        /g' >> LOG.$TDVersion
#######################################################################################################################

cat /dev/null > LOG.$TDVersion
echo     "********************************************************">>LOG.$TDVersion
echo     "*  Test Suite Execution"                      >> LOG.$TDVersion
echo     "*    Test Date . . . . . . . $TestDate"       >> LOG.$TDVersion
echo     "*    Machine . . . . . . . . $HostId"         >> LOG.$TDVersion
echo     "*    OS Version. . . . . . . $OSVersion"      >> LOG.$TDVersion
echo     "*    Release Name. . . . . . $Release"        >> LOG.$TDVersion
echo     "*    Test Suite Version. . . $TDVersion"      >> LOG.$TDVersion
echo     "*    Components Directory. . $TDComponentsUpperDir" >> LOG.$TDVersion
if ($?NDFPathName) then
   echo "*    NDF . . . . . . . . . . $NDFPathName"     >> LOG.$TDVersion
endif
echo     "*    Release Audit:"                          >> LOG.$TDVersion
strings $ReleaseExecutable | grep AUDIT | sed 's/AUDITINFO:/*        /g' >> LOG.$TDVersion
echo     "*    Execution Tag . . . . . $Tag"            >> LOG.$TDVersion
echo     "********************************************************">>LOG.$TDVersion

cat LOG.$TDVersion

cd $TDComponents
# One of the stress tests will run small systems out of RAM if we don't limit the datasize
limit datasize 2000000

$ReleaseExecutable -d >>& $ReleaseOutput/../LOG.$TDVersion << @@@EOD@@@
!id <- "$Tag";
?g
^tmp define: 'componentOutput' toBe: "$ReleaseOutput";
?g
?? component.set
?d
#M displayCPDCountsByRType displayMallocInfo displayMappingInfo displayCounts preservingCPCCs print,
#V displayState displayCounts,
#RTYPE_C_Dictionary usingCache print,
QUIT

@@@EOD@@@

echo "" >> $ReleaseOutput/../LOG.$TDVersion

